
STM32_LWIP_MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011520  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034d4  080116b0  080116b0  000216b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b84  08014b84  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08014b84  08014b84  00024b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b8c  08014b8c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b8c  08014b8c  00024b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b90  08014b90  00024b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08014b94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068f4  20000078  08014c0c  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000696c  08014c0c  0003696c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029d60  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005096  00000000  00000000  00059e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001230  00000000  00000000  0005eea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  000600d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ca3f  00000000  00000000  000612c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bd8f  00000000  00000000  0008dcff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dddc9  00000000  00000000  000a9a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00187857  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a0  00000000  00000000  001878d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011698 	.word	0x08011698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08011698 	.word	0x08011698

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fc76 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f868 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f922 	bl	80007f4 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005b0:	f003 f8ea 	bl	8003788 <MX_LWIP_Init>
  MX_ADC1_Init();
 80005b4:	f000 f8cc 	bl	8000750 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  client = mqtt_client_new();
 80005b8:	f005 f832 	bl	8005620 <mqtt_client_new>
 80005bc:	4602      	mov	r2, r0
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <main+0xb4>)
 80005c0:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80005c2:	f003 fa13 	bl	80039ec <MX_LWIP_Process>

	  HAL_Delay(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 fcd6 	bl	8000f78 <HAL_Delay>

	  cnt++;
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <main+0xb8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a21      	ldr	r2, [pc, #132]	; (8000658 <main+0xb8>)
 80005d4:	6013      	str	r3, [r2, #0]
	  if(cnt>1000)
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <main+0xb8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005de:	ddf0      	ble.n	80005c2 <main+0x22>
	  {
		  cnt = 0;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <main+0xb8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
		  sprintf(buffer,"Hello from STM32 %d",i++);
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <main+0xbc>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	491b      	ldr	r1, [pc, #108]	; (800065c <main+0xbc>)
 80005ee:	600a      	str	r2, [r1, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	491b      	ldr	r1, [pc, #108]	; (8000660 <main+0xc0>)
 80005f4:	481b      	ldr	r0, [pc, #108]	; (8000664 <main+0xc4>)
 80005f6:	f00f ffc9 	bl	801058c <siprintf>
		  example_do_connect(client);
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <main+0xb4>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fa5c 	bl	8000abc <example_do_connect>
		  example_publish(client, "STM32F4-PUB" , buffer);
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <main+0xb4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a16      	ldr	r2, [pc, #88]	; (8000664 <main+0xc4>)
 800060a:	4917      	ldr	r1, [pc, #92]	; (8000668 <main+0xc8>)
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fa8d 	bl	8000b2c <example_publish>

		  HAL_ADC_Start(&hadc1);
 8000612:	4816      	ldr	r0, [pc, #88]	; (800066c <main+0xcc>)
 8000614:	f000 fd16 	bl	8001044 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8000618:	210a      	movs	r1, #10
 800061a:	4814      	ldr	r0, [pc, #80]	; (800066c <main+0xcc>)
 800061c:	f000 fe0b 	bl	8001236 <HAL_ADC_PollForConversion>
		  adc_value = HAL_ADC_GetValue(&hadc1);
 8000620:	4812      	ldr	r0, [pc, #72]	; (800066c <main+0xcc>)
 8000622:	f000 fe8c 	bl	800133e <HAL_ADC_GetValue>
 8000626:	4603      	mov	r3, r0
 8000628:	b21a      	sxth	r2, r3
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <main+0xd0>)
 800062c:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 800062e:	480f      	ldr	r0, [pc, #60]	; (800066c <main+0xcc>)
 8000630:	f000 fdce 	bl	80011d0 <HAL_ADC_Stop>
		  sprintf(buffer,"%d\0",adc_value);
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <main+0xd0>)
 8000636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800063a:	461a      	mov	r2, r3
 800063c:	490d      	ldr	r1, [pc, #52]	; (8000674 <main+0xd4>)
 800063e:	4809      	ldr	r0, [pc, #36]	; (8000664 <main+0xc4>)
 8000640:	f00f ffa4 	bl	801058c <siprintf>
		  example_publish(client, "STM32F4-ADC" , buffer);
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <main+0xb4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a06      	ldr	r2, [pc, #24]	; (8000664 <main+0xc4>)
 800064a:	490b      	ldr	r1, [pc, #44]	; (8000678 <main+0xd8>)
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fa6d 	bl	8000b2c <example_publish>
	  MX_LWIP_Process();
 8000652:	e7b6      	b.n	80005c2 <main+0x22>
 8000654:	200002cc 	.word	0x200002cc
 8000658:	20000214 	.word	0x20000214
 800065c:	20000264 	.word	0x20000264
 8000660:	080116b0 	.word	0x080116b0
 8000664:	20000268 	.word	0x20000268
 8000668:	080116c4 	.word	0x080116c4
 800066c:	2000021c 	.word	0x2000021c
 8000670:	20000218 	.word	0x20000218
 8000674:	080116d0 	.word	0x080116d0
 8000678:	080116d4 	.word	0x080116d4

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f00f fec5 	bl	801041a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f0:	23a8      	movs	r3, #168	; 0xa8
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fc07 	bl	8002f14 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800070c:	f000 fa42 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2105      	movs	r1, #5
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fe60 	bl	80033f4 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073a:	f000 fa2b 	bl	8000b94 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <MX_ADC1_Init+0x9c>)
 8000766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_ADC1_Init+0x98>)
 800076a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800076e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000778:	2201      	movs	r2, #1
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_ADC1_Init+0x98>)
 800077e:	2201      	movs	r2, #1
 8000780:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <MX_ADC1_Init+0xa0>)
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_ADC1_Init+0x98>)
 800079e:	2201      	movs	r2, #1
 80007a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007b2:	f000 fc03 	bl	8000fbc <HAL_ADC_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007bc:	f000 f9ea 	bl	8000b94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007d2:	f000 fdc1 	bl	8001358 <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007dc:	f000 f9da 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000021c 	.word	0x2000021c
 80007ec:	40012000 	.word	0x40012000
 80007f0:	0f000001 	.word	0x0f000001

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a2d      	ldr	r2, [pc, #180]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_GPIO_Init+0xd4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_GPIO_Init+0xd4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <MX_GPIO_Init+0xd4>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_GPIO_Init+0xd4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <MX_GPIO_Init+0xd8>)
 800089e:	f002 fb1f 	bl	8002ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80008a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0xd8>)
 80008bc:	f002 f976 	bl	8002bac <HAL_GPIO_Init>

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020c00 	.word	0x40020c00

080008d0 <mqtt_sub_request_cb>:

/* USER CODE BEGIN 4 */

static void mqtt_sub_request_cb(void *arg, err_t result)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  printf("Subscribe result: %d\n", result);
 80008dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008e0:	4619      	mov	r1, r3
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <mqtt_sub_request_cb+0x20>)
 80008e4:	f00f fda2 	bl	801042c <iprintf>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	080116e0 	.word	0x080116e0

080008f4 <mqtt_incoming_publish_cb>:
   If RAM and CPU budget allows it, the easiest implementation might be to just take a copy of
   the topic string and use it in mqtt_incoming_data_cb
*/
static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  printf("Incoming publish at topic %s with total length %u\n", topic, (unsigned int)tot_len);
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	68b9      	ldr	r1, [r7, #8]
 8000904:	480e      	ldr	r0, [pc, #56]	; (8000940 <mqtt_incoming_publish_cb+0x4c>)
 8000906:	f00f fd91 	bl	801042c <iprintf>

  /* Decode topic string into a user defined reference */
  if(strcmp(topic, "print_payload") == 0) {
 800090a:	490e      	ldr	r1, [pc, #56]	; (8000944 <mqtt_incoming_publish_cb+0x50>)
 800090c:	68b8      	ldr	r0, [r7, #8]
 800090e:	f7ff fc5f 	bl	80001d0 <strcmp>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <mqtt_incoming_publish_cb+0x2c>
    inpub_id = 0;
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <mqtt_incoming_publish_cb+0x54>)
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
    inpub_id = 1;
  } else {
    /* For all other topics */
    inpub_id = 2;
  }
}
 800091e:	e00a      	b.n	8000936 <mqtt_incoming_publish_cb+0x42>
  } else if(topic[0] == 'A') {
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b41      	cmp	r3, #65	; 0x41
 8000926:	d103      	bne.n	8000930 <mqtt_incoming_publish_cb+0x3c>
    inpub_id = 1;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <mqtt_incoming_publish_cb+0x54>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
}
 800092e:	e002      	b.n	8000936 <mqtt_incoming_publish_cb+0x42>
    inpub_id = 2;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <mqtt_incoming_publish_cb+0x54>)
 8000932:	2202      	movs	r2, #2
 8000934:	601a      	str	r2, [r3, #0]
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	080116f8 	.word	0x080116f8
 8000944:	0801172c 	.word	0x0801172c
 8000948:	20000094 	.word	0x20000094

0800094c <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	4611      	mov	r1, r2
 8000958:	461a      	mov	r2, r3
 800095a:	460b      	mov	r3, r1
 800095c:	80fb      	strh	r3, [r7, #6]
 800095e:	4613      	mov	r3, r2
 8000960:	717b      	strb	r3, [r7, #5]

	printf("Incoming publish payload with length %d, flags %u\n", len, (unsigned int)flags);
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	797a      	ldrb	r2, [r7, #5]
 8000966:	4619      	mov	r1, r3
 8000968:	4821      	ldr	r0, [pc, #132]	; (80009f0 <mqtt_incoming_data_cb+0xa4>)
 800096a:	f00f fd5f 	bl	801042c <iprintf>

  if(flags & MQTT_DATA_FLAG_LAST) {
 800096e:	797b      	ldrb	r3, [r7, #5]
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	2b00      	cmp	r3, #0
 8000976:	d037      	beq.n	80009e8 <mqtt_incoming_data_cb+0x9c>

	  if(strncmp(data,"LED1-ON",7)==0)
 8000978:	2207      	movs	r2, #7
 800097a:	491e      	ldr	r1, [pc, #120]	; (80009f4 <mqtt_incoming_data_cb+0xa8>)
 800097c:	68b8      	ldr	r0, [r7, #8]
 800097e:	f00f fe25 	bl	80105cc <strncmp>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d105      	bne.n	8000994 <mqtt_incoming_data_cb+0x48>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800098e:	481a      	ldr	r0, [pc, #104]	; (80009f8 <mqtt_incoming_data_cb+0xac>)
 8000990:	f002 faa6 	bl	8002ee0 <HAL_GPIO_WritePin>
	  }

	  if(strncmp(data,"LED1-OFF",8)==0)
 8000994:	2208      	movs	r2, #8
 8000996:	4919      	ldr	r1, [pc, #100]	; (80009fc <mqtt_incoming_data_cb+0xb0>)
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f00f fe17 	bl	80105cc <strncmp>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d105      	bne.n	80009b0 <mqtt_incoming_data_cb+0x64>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009aa:	4813      	ldr	r0, [pc, #76]	; (80009f8 <mqtt_incoming_data_cb+0xac>)
 80009ac:	f002 fa98 	bl	8002ee0 <HAL_GPIO_WritePin>
	  }

	  if(strncmp(data,"LED2-ON",7)==0)
 80009b0:	2207      	movs	r2, #7
 80009b2:	4913      	ldr	r1, [pc, #76]	; (8000a00 <mqtt_incoming_data_cb+0xb4>)
 80009b4:	68b8      	ldr	r0, [r7, #8]
 80009b6:	f00f fe09 	bl	80105cc <strncmp>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d105      	bne.n	80009cc <mqtt_incoming_data_cb+0x80>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c6:	480c      	ldr	r0, [pc, #48]	; (80009f8 <mqtt_incoming_data_cb+0xac>)
 80009c8:	f002 fa8a 	bl	8002ee0 <HAL_GPIO_WritePin>
	  }

	  if(strncmp(data,"LED2-OFF",8)==0)
 80009cc:	2208      	movs	r2, #8
 80009ce:	490d      	ldr	r1, [pc, #52]	; (8000a04 <mqtt_incoming_data_cb+0xb8>)
 80009d0:	68b8      	ldr	r0, [r7, #8]
 80009d2:	f00f fdfb 	bl	80105cc <strncmp>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d105      	bne.n	80009e8 <mqtt_incoming_data_cb+0x9c>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <mqtt_incoming_data_cb+0xac>)
 80009e4:	f002 fa7c 	bl	8002ee0 <HAL_GPIO_WritePin>


  } else {

  }
}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	0801173c 	.word	0x0801173c
 80009f4:	08011770 	.word	0x08011770
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	08011778 	.word	0x08011778
 8000a00:	08011784 	.word	0x08011784
 8000a04:	0801178c 	.word	0x0801178c

08000a08 <mqtt_pub_request_cb>:


/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
  if(result != ERR_OK) {
 8000a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <mqtt_pub_request_cb+0x20>
    printf("Publish result: %d\n", result);
 8000a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4803      	ldr	r0, [pc, #12]	; (8000a30 <mqtt_pub_request_cb+0x28>)
 8000a24:	f00f fd02 	bl	801042c <iprintf>
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	08011798 	.word	0x08011798

08000a34 <mqtt_connection_cb>:

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	80fb      	strh	r3, [r7, #6]
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d11f      	bne.n	8000a88 <mqtt_connection_cb+0x54>
    printf("mqtt_connection_cb: Successfully connected\n");
 8000a48:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <mqtt_connection_cb+0x6c>)
 8000a4a:	f00f fd63 	bl	8010514 <puts>

    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <mqtt_connection_cb+0x70>)
 8000a52:	4915      	ldr	r1, [pc, #84]	; (8000aa8 <mqtt_connection_cb+0x74>)
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f004 fdbf 	bl	80055d8 <mqtt_set_inpub_callback>

    /* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "STM32F4-SUB", 1, mqtt_sub_request_cb, arg);
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <mqtt_connection_cb+0x78>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	4912      	ldr	r1, [pc, #72]	; (8000ab0 <mqtt_connection_cb+0x7c>)
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f004 fcdf 	bl	800542c <mqtt_sub_unsub>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	75fb      	strb	r3, [r7, #23]

    if(err != ERR_OK) {
 8000a72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00e      	beq.n	8000a98 <mqtt_connection_cb+0x64>
      printf("mqtt_subscribe return: %d\n", err);
 8000a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <mqtt_connection_cb+0x80>)
 8000a82:	f00f fcd3 	bl	801042c <iprintf>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);

    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client);
  }
}
 8000a86:	e007      	b.n	8000a98 <mqtt_connection_cb+0x64>
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <mqtt_connection_cb+0x84>)
 8000a8e:	f00f fccd 	bl	801042c <iprintf>
    example_do_connect(client);
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f000 f812 	bl	8000abc <example_do_connect>
}
 8000a98:	bf00      	nop
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	080117ac 	.word	0x080117ac
 8000aa4:	0800094d 	.word	0x0800094d
 8000aa8:	080008f5 	.word	0x080008f5
 8000aac:	080008d1 	.word	0x080008d1
 8000ab0:	080117d8 	.word	0x080117d8
 8000ab4:	080117e4 	.word	0x080117e4
 8000ab8:	08011800 	.word	0x08011800

08000abc <example_do_connect>:

void example_do_connect(mqtt_client_t *client)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	6078      	str	r0, [r7, #4]
  struct mqtt_connect_client_info_t ci;
  err_t err;

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	221c      	movs	r2, #28
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f00f fca4 	bl	801041a <memset>

  /* Minimal amount of information required is client identifier, so set it here */
  ci.client_id = "lwip_test";
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <example_do_connect+0x60>)
 8000ad4:	613b      	str	r3, [r7, #16]
  //ci.client_user = "";
  //ci.client_pass = "";
  ci.keep_alive = 120;
 8000ad6:	2378      	movs	r3, #120	; 0x78
 8000ad8:	83bb      	strh	r3, [r7, #28]

  ip_addr_t mqttBrokerIP;
  IP4_ADDR(&mqttBrokerIP, 18,194,140,39);
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <example_do_connect+0x64>)
 8000adc:	60fb      	str	r3, [r7, #12]
  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */

  err = mqtt_client_connect(client,&mqttBrokerIP, MQTT_PORT, mqtt_connection_cb, 0, &ci);
 8000ade:	f107 010c 	add.w	r1, r7, #12
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <example_do_connect+0x68>)
 8000aee:	f240 725b 	movw	r2, #1883	; 0x75b
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f004 fd9e 	bl	8005634 <mqtt_client_connect>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* For now just print the result code if something goes wrong */
  if(err != ERR_OK) {
 8000afe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d005      	beq.n	8000b12 <example_do_connect+0x56>
    printf("mqtt_connect return %d\n", err);
 8000b06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4806      	ldr	r0, [pc, #24]	; (8000b28 <example_do_connect+0x6c>)
 8000b0e:	f00f fc8d 	bl	801042c <iprintf>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3730      	adds	r7, #48	; 0x30
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	08011830 	.word	0x08011830
 8000b20:	278cc212 	.word	0x278cc212
 8000b24:	08000a35 	.word	0x08000a35
 8000b28:	0801183c 	.word	0x0801183c

08000b2c <example_publish>:

void example_publish(mqtt_client_t *client, char *data, void *arg)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af04      	add	r7, sp, #16
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  const char *pub_payload= arg;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	617b      	str	r3, [r7, #20]
  err_t err;
  u8_t qos = 2; /* 0 1 or 2, see MQTT specification */
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	74fb      	strb	r3, [r7, #19]
  u8_t retain = 0; /* No don't retain such crappy payload... */
 8000b40:	2300      	movs	r3, #0
 8000b42:	74bb      	strb	r3, [r7, #18]
  err = mqtt_publish(client, data, pub_payload, strlen(pub_payload), qos, retain, mqtt_pub_request_cb, arg);
 8000b44:	6978      	ldr	r0, [r7, #20]
 8000b46:	f7ff fb4d 	bl	80001e4 <strlen>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	9303      	str	r3, [sp, #12]
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <example_publish+0x60>)
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	7cbb      	ldrb	r3, [r7, #18]
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	7cfb      	ldrb	r3, [r7, #19]
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f004 fb8d 	bl	8005284 <mqtt_publish>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	747b      	strb	r3, [r7, #17]
  if(err != ERR_OK) {
 8000b6e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <example_publish+0x56>
    printf("Publish err: %d\n", err);
 8000b76:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <example_publish+0x64>)
 8000b7e:	f00f fc55 	bl	801042c <iprintf>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	08000a09 	.word	0x08000a09
 8000b90:	08011854 	.word	0x08011854

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <Error_Handler+0x6>

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_ADC_MspInit+0x7c>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d127      	bne.n	8000c5e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_ADC_MspInit+0x80>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <HAL_ADC_MspInit+0x80>)
 8000c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <HAL_ADC_MspInit+0x80>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_ADC_MspInit+0x80>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_ADC_MspInit+0x80>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_ADC_MspInit+0x80>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c46:	2301      	movs	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_ADC_MspInit+0x84>)
 8000c5a:	f001 ffa7 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40012000 	.word	0x40012000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f93a 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e00a      	b.n	8000cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cda:	f3af 8000 	nop.w
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf0      	blt.n	8000cda <_read+0x12>
	}

return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e009      	b.n	8000d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf1      	blt.n	8000d14 <_write+0x12>
	}
	return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_close>:

int _close(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	return -1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d62:	605a      	str	r2, [r3, #4]
	return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_isatty>:

int _isatty(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	return 1;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d205      	bcs.n	8000de0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <_sbrk+0x6c>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	371c      	adds	r7, #28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	20020000 	.word	0x20020000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	20000098 	.word	0x20000098
 8000e0c:	20006970 	.word	0x20006970
 8000e10:	20006968 	.word	0x20006968

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <SystemInit+0x28>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <SystemInit+0x28>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SystemInit+0x28>)
 8000e2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e46:	e003      	b.n	8000e50 <LoopCopyDataInit>

08000e48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e4e:	3104      	adds	r1, #4

08000e50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e58:	d3f6      	bcc.n	8000e48 <CopyDataInit>
  ldr  r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e5c:	e002      	b.n	8000e64 <LoopFillZerobss>

08000e5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e60:	f842 3b04 	str.w	r3, [r2], #4

08000e64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e68:	d3f9      	bcc.n	8000e5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e6a:	f7ff ffd3 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f00f fa7d 	bl	801036c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fb95 	bl	80005a0 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e7c:	08014b94 	.word	0x08014b94
  ldr  r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e84:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000e88:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000e8c:	2000696c 	.word	0x2000696c

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 fd1b 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fe68 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fd25 	bl	8001946 <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f000 fcfb 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	200002d0 	.word	0x200002d0

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200002d0 	.word	0x200002d0

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_Delay+0x40>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000008 	.word	0x20000008

08000fbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e033      	b.n	800103a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d109      	bne.n	8000fee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fe06 	bl	8000bec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d118      	bne.n	800102c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001002:	f023 0302 	bic.w	r3, r3, #2
 8001006:	f043 0202 	orr.w	r2, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fac4 	bl	800159c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f023 0303 	bic.w	r3, r3, #3
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
 800102a:	e001      	b.n	8001030 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001056:	2b01      	cmp	r3, #1
 8001058:	d101      	bne.n	800105e <HAL_ADC_Start+0x1a>
 800105a:	2302      	movs	r3, #2
 800105c:	e0a5      	b.n	80011aa <HAL_ADC_Start+0x166>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b01      	cmp	r3, #1
 8001072:	d018      	beq.n	80010a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0201 	orr.w	r2, r2, #1
 8001082:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001084:	4b4c      	ldr	r3, [pc, #304]	; (80011b8 <HAL_ADC_Start+0x174>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a4c      	ldr	r2, [pc, #304]	; (80011bc <HAL_ADC_Start+0x178>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0c9a      	lsrs	r2, r3, #18
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001098:	e002      	b.n	80010a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	3b01      	subs	r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f9      	bne.n	800109a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d179      	bne.n	80011a8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010f2:	d106      	bne.n	8001102 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	f023 0206 	bic.w	r2, r3, #6
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001100:	e002      	b.n	8001108 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_ADC_Start+0x17c>)
 8001112:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800111c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	2b00      	cmp	r3, #0
 8001128:	d12a      	bne.n	8001180 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <HAL_ADC_Start+0x180>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d015      	beq.n	8001160 <HAL_ADC_Start+0x11c>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <HAL_ADC_Start+0x184>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d105      	bne.n	800114a <HAL_ADC_Start+0x106>
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <HAL_ADC_Start+0x17c>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <HAL_ADC_Start+0x188>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d129      	bne.n	80011a8 <HAL_ADC_Start+0x164>
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_ADC_Start+0x17c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 031f 	and.w	r3, r3, #31
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d823      	bhi.n	80011a8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d11c      	bne.n	80011a8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	e013      	b.n	80011a8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <HAL_ADC_Start+0x180>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10e      	bne.n	80011a8 <HAL_ADC_Start+0x164>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d107      	bne.n	80011a8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011a6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000000 	.word	0x20000000
 80011bc:	431bde83 	.word	0x431bde83
 80011c0:	40012300 	.word	0x40012300
 80011c4:	40012000 	.word	0x40012000
 80011c8:	40012100 	.word	0x40012100
 80011cc:	40012200 	.word	0x40012200

080011d0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <HAL_ADC_Stop+0x16>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e021      	b.n	800122a <HAL_ADC_Stop+0x5a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0201 	bic.w	r2, r2, #1
 80011fc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d109      	bne.n	8001220 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	f043 0201 	orr.w	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001252:	d113      	bne.n	800127c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800125e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001262:	d10b      	bne.n	800127c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f043 0220 	orr.w	r2, r3, #32
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e05c      	b.n	8001336 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800127c:	f7ff fe70 	bl	8000f60 <HAL_GetTick>
 8001280:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001282:	e01a      	b.n	80012ba <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128a:	d016      	beq.n	80012ba <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <HAL_ADC_PollForConversion+0x6c>
 8001292:	f7ff fe65 	bl	8000f60 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d20b      	bcs.n	80012ba <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0204 	orr.w	r2, r3, #4
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e03d      	b.n	8001336 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d1dd      	bne.n	8001284 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f06f 0212 	mvn.w	r2, #18
 80012d0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d123      	bne.n	8001334 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d11f      	bne.n	8001334 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800130c:	2b00      	cmp	r3, #0
 800130e:	d111      	bne.n	8001334 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d105      	bne.n	8001334 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f043 0201 	orr.w	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1c>
 8001370:	2302      	movs	r3, #2
 8001372:	e105      	b.n	8001580 <HAL_ADC_ConfigChannel+0x228>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b09      	cmp	r3, #9
 8001382:	d925      	bls.n	80013d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68d9      	ldr	r1, [r3, #12]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	3b1e      	subs	r3, #30
 800139a:	2207      	movs	r2, #7
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43da      	mvns	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	400a      	ands	r2, r1
 80013a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68d9      	ldr	r1, [r3, #12]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	4603      	mov	r3, r0
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4403      	add	r3, r0
 80013c2:	3b1e      	subs	r3, #30
 80013c4:	409a      	lsls	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	e022      	b.n	8001416 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6919      	ldr	r1, [r3, #16]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	2207      	movs	r2, #7
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	400a      	ands	r2, r1
 80013f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6919      	ldr	r1, [r3, #16]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	4603      	mov	r3, r0
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4403      	add	r3, r0
 800140c:	409a      	lsls	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b06      	cmp	r3, #6
 800141c:	d824      	bhi.n	8001468 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b05      	subs	r3, #5
 8001430:	221f      	movs	r2, #31
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	400a      	ands	r2, r1
 800143e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3b05      	subs	r3, #5
 800145a:	fa00 f203 	lsl.w	r2, r0, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	635a      	str	r2, [r3, #52]	; 0x34
 8001466:	e04c      	b.n	8001502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b0c      	cmp	r3, #12
 800146e:	d824      	bhi.n	80014ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	3b23      	subs	r3, #35	; 0x23
 8001482:	221f      	movs	r2, #31
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43da      	mvns	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	400a      	ands	r2, r1
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	3b23      	subs	r3, #35	; 0x23
 80014ac:	fa00 f203 	lsl.w	r2, r0, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
 80014b8:	e023      	b.n	8001502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b41      	subs	r3, #65	; 0x41
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b41      	subs	r3, #65	; 0x41
 80014f6:	fa00 f203 	lsl.w	r2, r0, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_ADC_ConfigChannel+0x234>)
 8001504:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a21      	ldr	r2, [pc, #132]	; (8001590 <HAL_ADC_ConfigChannel+0x238>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d109      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x1cc>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b12      	cmp	r3, #18
 8001516:	d105      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a19      	ldr	r2, [pc, #100]	; (8001590 <HAL_ADC_ConfigChannel+0x238>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d123      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x21e>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b10      	cmp	r3, #16
 8001534:	d003      	beq.n	800153e <HAL_ADC_ConfigChannel+0x1e6>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b11      	cmp	r3, #17
 800153c:	d11b      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b10      	cmp	r3, #16
 8001550:	d111      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_ADC_ConfigChannel+0x23c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <HAL_ADC_ConfigChannel+0x240>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9a      	lsrs	r2, r3, #18
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001568:	e002      	b.n	8001570 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3b01      	subs	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40012300 	.word	0x40012300
 8001590:	40012000 	.word	0x40012000
 8001594:	20000000 	.word	0x20000000
 8001598:	431bde83 	.word	0x431bde83

0800159c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a4:	4b79      	ldr	r3, [pc, #484]	; (800178c <ADC_Init+0x1f0>)
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	431a      	orrs	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	021a      	lsls	r2, r3, #8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6899      	ldr	r1, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	4a58      	ldr	r2, [pc, #352]	; (8001790 <ADC_Init+0x1f4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d022      	beq.n	800167a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001642:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6899      	ldr	r1, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6899      	ldr	r1, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	e00f      	b.n	800169a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001698:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0202 	bic.w	r2, r2, #2
 80016a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6899      	ldr	r1, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7e1b      	ldrb	r3, [r3, #24]
 80016b4:	005a      	lsls	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01b      	beq.n	8001700 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6859      	ldr	r1, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	3b01      	subs	r3, #1
 80016f4:	035a      	lsls	r2, r3, #13
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	e007      	b.n	8001710 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	3b01      	subs	r3, #1
 800172c:	051a      	lsls	r2, r3, #20
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6899      	ldr	r1, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001752:	025a      	lsls	r2, r3, #9
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800176a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6899      	ldr	r1, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	029a      	lsls	r2, r3, #10
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	609a      	str	r2, [r3, #8]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40012300 	.word	0x40012300
 8001790:	0f000001 	.word	0x0f000001

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff47 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff5c 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffb0 	bl	80018b4 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001970:	4baa      	ldr	r3, [pc, #680]	; (8001c1c <HAL_ETH_Init+0x2bc>)
 8001972:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e185      	b.n	8001c92 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f002 f832 	bl	8003a04 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	4b9e      	ldr	r3, [pc, #632]	; (8001c20 <HAL_ETH_Init+0x2c0>)
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	4a9d      	ldr	r2, [pc, #628]	; (8001c20 <HAL_ETH_Init+0x2c0>)
 80019aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ae:	6453      	str	r3, [r2, #68]	; 0x44
 80019b0:	4b9b      	ldr	r3, [pc, #620]	; (8001c20 <HAL_ETH_Init+0x2c0>)
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019bc:	4b99      	ldr	r3, [pc, #612]	; (8001c24 <HAL_ETH_Init+0x2c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a98      	ldr	r2, [pc, #608]	; (8001c24 <HAL_ETH_Init+0x2c4>)
 80019c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019c6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019c8:	4b96      	ldr	r3, [pc, #600]	; (8001c24 <HAL_ETH_Init+0x2c4>)
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4994      	ldr	r1, [pc, #592]	; (8001c24 <HAL_ETH_Init+0x2c4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0201 	orr.w	r2, r2, #1
 80019e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ec:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019ee:	f7ff fab7 	bl	8000f60 <HAL_GetTick>
 80019f2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019f4:	e011      	b.n	8001a1a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80019f6:	f7ff fab3 	bl	8000f60 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a04:	d909      	bls.n	8001a1a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e13b      	b.n	8001c92 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e4      	bne.n	80019f6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f023 031c 	bic.w	r3, r3, #28
 8001a3a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a3c:	f001 fe98 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 8001a40:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4a78      	ldr	r2, [pc, #480]	; (8001c28 <HAL_ETH_Init+0x2c8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d908      	bls.n	8001a5c <HAL_ETH_Init+0xfc>
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4a77      	ldr	r2, [pc, #476]	; (8001c2c <HAL_ETH_Init+0x2cc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d804      	bhi.n	8001a5c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f043 0308 	orr.w	r3, r3, #8
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	e027      	b.n	8001aac <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	4a73      	ldr	r2, [pc, #460]	; (8001c2c <HAL_ETH_Init+0x2cc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d908      	bls.n	8001a76 <HAL_ETH_Init+0x116>
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	4a72      	ldr	r2, [pc, #456]	; (8001c30 <HAL_ETH_Init+0x2d0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d804      	bhi.n	8001a76 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f043 030c 	orr.w	r3, r3, #12
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	e01a      	b.n	8001aac <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4a6d      	ldr	r2, [pc, #436]	; (8001c30 <HAL_ETH_Init+0x2d0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d903      	bls.n	8001a86 <HAL_ETH_Init+0x126>
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4a6c      	ldr	r2, [pc, #432]	; (8001c34 <HAL_ETH_Init+0x2d4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d911      	bls.n	8001aaa <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4a6a      	ldr	r2, [pc, #424]	; (8001c34 <HAL_ETH_Init+0x2d4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d908      	bls.n	8001aa0 <HAL_ETH_Init+0x140>
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4a69      	ldr	r2, [pc, #420]	; (8001c38 <HAL_ETH_Init+0x2d8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d804      	bhi.n	8001aa0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e005      	b.n	8001aac <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f043 0310 	orr.w	r3, r3, #16
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	e000      	b.n	8001aac <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001aaa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001ab4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ab8:	2100      	movs	r1, #0
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fb9a 	bl	80021f4 <HAL_ETH_WritePHYRegister>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001aca:	6939      	ldr	r1, [r7, #16]
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fd4f 	bl	8002570 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0d9      	b.n	8001c92 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001ade:	20ff      	movs	r0, #255	; 0xff
 8001ae0:	f7ff fa4a 	bl	8000f78 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80a7 	beq.w	8001c3c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001aee:	f7ff fa37 	bl	8000f60 <HAL_GetTick>
 8001af2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	461a      	mov	r2, r3
 8001afa:	2101      	movs	r1, #1
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fb11 	bl	8002124 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001b02:	f7ff fa2d 	bl	8000f60 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d90f      	bls.n	8001b34 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b18:	6939      	ldr	r1, [r7, #16]
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fd28 	bl	8002570 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0ae      	b.n	8001c92 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0da      	beq.n	8001af4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001b3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b42:	2100      	movs	r1, #0
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fb55 	bl	80021f4 <HAL_ETH_WritePHYRegister>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00b      	beq.n	8001b68 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b54:	6939      	ldr	r1, [r7, #16]
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fd0a 	bl	8002570 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b64:	2301      	movs	r3, #1
 8001b66:	e094      	b.n	8001c92 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b68:	f7ff f9fa 	bl	8000f60 <HAL_GetTick>
 8001b6c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	461a      	mov	r2, r3
 8001b74:	2101      	movs	r1, #1
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fad4 	bl	8002124 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001b7c:	f7ff f9f0 	bl	8000f60 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d90f      	bls.n	8001bae <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b92:	6939      	ldr	r1, [r7, #16]
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fceb 	bl	8002570 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e071      	b.n	8001c92 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0da      	beq.n	8001b6e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	211f      	movs	r1, #31
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 faaf 	bl	8002124 <HAL_ETH_ReadPHYRegister>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001bd0:	6939      	ldr	r1, [r7, #16]
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fccc 	bl	8002570 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001be0:	2301      	movs	r3, #1
 8001be2:	e056      	b.n	8001c92 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	e002      	b.n	8001bfe <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	e037      	b.n	8001c80 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	e032      	b.n	8001c80 <HAL_ETH_Init+0x320>
 8001c1a:	bf00      	nop
 8001c1c:	03938700 	.word	0x03938700
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40013800 	.word	0x40013800
 8001c28:	01312cff 	.word	0x01312cff
 8001c2c:	02160ebf 	.word	0x02160ebf
 8001c30:	039386ff 	.word	0x039386ff
 8001c34:	05f5e0ff 	.word	0x05f5e0ff
 8001c38:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	08db      	lsrs	r3, r3, #3
 8001c42:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	085b      	lsrs	r3, r3, #1
 8001c4a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	2100      	movs	r1, #0
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 facd 	bl	80021f4 <HAL_ETH_WritePHYRegister>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00b      	beq.n	8001c78 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c64:	6939      	ldr	r1, [r7, #16]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fc82 	bl	8002570 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e00c      	b.n	8001c92 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001c78:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001c7c:	f7ff f97c 	bl	8000f78 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fc74 	bl	8002570 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop

08001c9c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_ETH_DMATxDescListInit+0x20>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e052      	b.n	8001d62 <HAL_ETH_DMATxDescListInit+0xc6>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e030      	b.n	8001d3a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	4413      	add	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ce8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d208      	bcs.n	8001d2e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	015b      	lsls	r3, r3, #5
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	4413      	add	r3, r2
 8001d26:	461a      	mov	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	e002      	b.n	8001d34 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3ca      	bcc.n	8001cd8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4c:	3310      	adds	r3, #16
 8001d4e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b087      	sub	sp, #28
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_ETH_DMARxDescListInit+0x20>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e056      	b.n	8001e3c <HAL_ETH_DMARxDescListInit+0xce>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e034      	b.n	8001e14 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	015b      	lsls	r3, r3, #5
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	4413      	add	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001dba:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001dc2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d105      	bne.n	8001dec <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d208      	bcs.n	8001e08 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	015b      	lsls	r3, r3, #5
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	4413      	add	r3, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	e002      	b.n	8001e0e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d3c6      	bcc.n	8001daa <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e26:	330c      	adds	r3, #12
 8001e28:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_ETH_TransmitFrame+0x24>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e0cd      	b.n	8002008 <HAL_ETH_TransmitFrame+0x1c0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0b8      	b.n	8002008 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	da09      	bge.n	8001eb4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2212      	movs	r2, #18
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0a9      	b.n	8002008 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d915      	bls.n	8001eea <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	4a54      	ldr	r2, [pc, #336]	; (8002014 <HAL_ETH_TransmitFrame+0x1cc>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0a9b      	lsrs	r3, r3, #10
 8001ec8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	4b51      	ldr	r3, [pc, #324]	; (8002014 <HAL_ETH_TransmitFrame+0x1cc>)
 8001ece:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed2:	0a9b      	lsrs	r3, r3, #10
 8001ed4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	e001      	b.n	8001eee <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001eea:	2301      	movs	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d11c      	bne.n	8001f2e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001f02:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001f0e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f1e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	461a      	mov	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f2c:	e04b      	b.n	8001fc6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	e044      	b.n	8001fbe <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f42:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f58:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f62:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d116      	bne.n	8001f9c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001f7c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	4a25      	ldr	r2, [pc, #148]	; (8002018 <HAL_ETH_TransmitFrame+0x1d0>)
 8001f82:	fb02 f203 	mul.w	r2, r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001f8e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001f9a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001faa:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d3b6      	bcc.n	8001f34 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fce:	3314      	adds	r3, #20
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe2:	3314      	adds	r3, #20
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	ac02b00b 	.word	0xac02b00b
 8002018:	fffffa0c 	.word	0xfffffa0c

0800201c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_ETH_GetReceivedFrame+0x1a>
 8002032:	2302      	movs	r3, #2
 8002034:	e070      	b.n	8002118 <HAL_ETH_GetReceivedFrame+0xfc>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db5a      	blt.n	8002106 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d030      	beq.n	80020c0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	2b01      	cmp	r3, #1
 800206e:	d103      	bne.n	8002078 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0c1b      	lsrs	r3, r3, #16
 8002088:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800208c:	3b04      	subs	r3, #4
 800208e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	461a      	mov	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	e02b      	b.n	8002118 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d010      	beq.n	80020f0 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	461a      	mov	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
 80020ee:	e00a      	b.n	8002106 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	461a      	mov	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	460b      	mov	r3, r1
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b82      	cmp	r3, #130	; 0x82
 8002144:	d101      	bne.n	800214a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002146:	2302      	movs	r3, #2
 8002148:	e050      	b.n	80021ec <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2282      	movs	r2, #130	; 0x82
 800214e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 031c 	and.w	r3, r3, #28
 8002160:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8a1b      	ldrh	r3, [r3, #16]
 8002166:	02db      	lsls	r3, r3, #11
 8002168:	b29b      	uxth	r3, r3
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002170:	897b      	ldrh	r3, [r7, #10]
 8002172:	019b      	lsls	r3, r3, #6
 8002174:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	4313      	orrs	r3, r2
 800217c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f023 0302 	bic.w	r3, r3, #2
 8002184:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002196:	f7fe fee3 	bl	8000f60 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800219c:	e015      	b.n	80021ca <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800219e:	f7fe fedf 	bl	8000f60 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ac:	d309      	bcc.n	80021c2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e014      	b.n	80021ec <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e4      	bne.n	800219e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	460b      	mov	r3, r1
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b42      	cmp	r3, #66	; 0x42
 8002214:	d101      	bne.n	800221a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002216:	2302      	movs	r3, #2
 8002218:	e04e      	b.n	80022b8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2242      	movs	r2, #66	; 0x42
 800221e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 031c 	and.w	r3, r3, #28
 8002230:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8a1b      	ldrh	r3, [r3, #16]
 8002236:	02db      	lsls	r3, r3, #11
 8002238:	b29b      	uxth	r3, r3
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002240:	897b      	ldrh	r3, [r7, #10]
 8002242:	019b      	lsls	r3, r3, #6
 8002244:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002270:	f7fe fe76 	bl	8000f60 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002276:	e015      	b.n	80022a4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002278:	f7fe fe72 	bl	8000f60 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002286:	d309      	bcc.n	800229c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e00d      	b.n	80022b8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1e4      	bne.n	8002278 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ETH_Start+0x16>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e01f      	b.n	8002316 <HAL_ETH_Start+0x56>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2202      	movs	r2, #2
 80022e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fb44 	bl	8002974 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fb7b 	bl	80029e8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fc12 	bl	8002b1c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fbaf 	bl	8002a5c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fbdc 	bl	8002abc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_ETH_Stop+0x16>
 8002330:	2302      	movs	r3, #2
 8002332:	e01f      	b.n	8002374 <HAL_ETH_Stop+0x56>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fba1 	bl	8002a8c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fbce 	bl	8002aec <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fb66 	bl	8002a22 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fbe0 	bl	8002b1c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 fb26 	bl	80029ae <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_ETH_ConfigMAC+0x1c>
 8002394:	2302      	movs	r3, #2
 8002396:	e0e4      	b.n	8002562 <HAL_ETH_ConfigMAC+0x1e6>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80b1 	beq.w	8002512 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4b6c      	ldr	r3, [pc, #432]	; (800256c <HAL_ETH_ConfigMAC+0x1f0>)
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80023c8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80023ce:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80023d4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80023da:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80023e0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80023e6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80023ec:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80023f2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80023f8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80023fe:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002404:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800240a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002422:	2001      	movs	r0, #1
 8002424:	f7fe fda8 	bl	8000f78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002438:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800243e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002444:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800244a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002450:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002456:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002462:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002464:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800246e:	2001      	movs	r0, #1
 8002470:	f7fe fd82 	bl	8000f78 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002484:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800248e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800249e:	4013      	ands	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80024ac:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80024b2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80024b8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80024be:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80024c4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024dc:	2001      	movs	r0, #1
 80024de:	f7fe fd4b 	bl	8000f78 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002502:	2001      	movs	r0, #1
 8002504:	f7fe fd38 	bl	8000f78 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	61da      	str	r2, [r3, #28]
 8002510:	e01e      	b.n	8002550 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002520:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002542:	2001      	movs	r0, #1
 8002544:	f7fe fd18 	bl	8000f78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	ff20810f 	.word	0xff20810f

08002570 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b0b0      	sub	sp, #192	; 0xc0
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800258c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002594:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800259e:	2300      	movs	r3, #0
 80025a0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80025b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ba:	663b      	str	r3, [r7, #96]	; 0x60
 80025bc:	e001      	b.n	80025c2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80025c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025cc:	2300      	movs	r3, #0
 80025ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80025dc:	2340      	movs	r3, #64	; 0x40
 80025de:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800260a:	2300      	movs	r3, #0
 800260c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002644:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002648:	4bac      	ldr	r3, [pc, #688]	; (80028fc <ETH_MACDMAConfig+0x38c>)
 800264a:	4013      	ands	r3, r2
 800264c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002650:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002654:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002658:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800265a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800265c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002662:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002666:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800266a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002670:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002674:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002678:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800267a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800267c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800267e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002680:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002684:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002686:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002698:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f7fe fc67 	bl	8000f78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026b2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80026b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026b8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80026ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80026bc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80026be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80026c2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80026c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80026c8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80026ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80026ce:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80026d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80026d4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80026d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80026e0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026e2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7fe fc42 	bl	8000f78 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026fc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002706:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002710:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800271c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002720:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002724:	4013      	ands	r3, r2
 8002726:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800272a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800272e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002730:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002734:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002736:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800273a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800273c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002740:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002746:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002748:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800274c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800274e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002760:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800276c:	2001      	movs	r0, #1
 800276e:	f7fe fc03 	bl	8000f78 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800277a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800277c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002780:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002796:	2001      	movs	r0, #1
 8002798:	f7fe fbee 	bl	8000f78 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027a4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80027aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ae:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80027b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027b8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80027ca:	2304      	movs	r3, #4
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80027ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80027d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027de:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027e4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027fa:	3318      	adds	r3, #24
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002802:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002806:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <ETH_MACDMAConfig+0x390>)
 8002808:	4013      	ands	r3, r2
 800280a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800280e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002810:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002812:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002814:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002816:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002818:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800281a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800281c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800281e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002820:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002822:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002824:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002826:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800282a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800282e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002830:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002842:	3318      	adds	r3, #24
 8002844:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002848:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002852:	3318      	adds	r3, #24
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800285a:	2001      	movs	r0, #1
 800285c:	f7fe fb8c 	bl	8000f78 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002868:	3318      	adds	r3, #24
 800286a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800286e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002874:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002878:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800287c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800287e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002880:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002884:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002886:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800288a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002898:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f7fe fb65 	bl	8000f78 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028ba:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10f      	bne.n	80028e4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028cc:	331c      	adds	r3, #28
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e0:	331c      	adds	r3, #28
 80028e2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	461a      	mov	r2, r3
 80028ea:	2100      	movs	r1, #0
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f809 	bl	8002904 <ETH_MACAddressConfig>
}
 80028f2:	bf00      	nop
 80028f4:	37c0      	adds	r7, #192	; 0xc0
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	ff20810f 	.word	0xff20810f
 8002900:	f8de3f23 	.word	0xf8de3f23

08002904 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3305      	adds	r3, #5
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	3204      	adds	r2, #4
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <ETH_MACAddressConfig+0x68>)
 8002926:	4413      	add	r3, r2
 8002928:	461a      	mov	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3303      	adds	r3, #3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	061a      	lsls	r2, r3, #24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3302      	adds	r3, #2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3301      	adds	r3, #1
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	4313      	orrs	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <ETH_MACAddressConfig+0x6c>)
 8002956:	4413      	add	r3, r2
 8002958:	461a      	mov	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	6013      	str	r3, [r2, #0]
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40028040 	.word	0x40028040
 8002970:	40028044 	.word	0x40028044

08002974 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0208 	orr.w	r2, r2, #8
 800298e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002998:	2001      	movs	r0, #1
 800299a:	f000 f8e9 	bl	8002b70 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0208 	bic.w	r2, r2, #8
 80029c8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80029d2:	2001      	movs	r0, #1
 80029d4:	f000 f8cc 	bl	8002b70 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]
}
 80029e0:	bf00      	nop
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0204 	orr.w	r2, r2, #4
 8002a02:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f000 f8af 	bl	8002b70 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0204 	bic.w	r2, r2, #4
 8002a3c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f000 f892 	bl	8002b70 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a6c:	3318      	adds	r3, #24
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7c:	3318      	adds	r3, #24
 8002a7e:	601a      	str	r2, [r3, #0]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9c:	3318      	adds	r3, #24
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aac:	3318      	adds	r3, #24
 8002aae:	601a      	str	r2, [r3, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002acc:	3318      	adds	r3, #24
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0202 	orr.w	r2, r2, #2
 8002ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002adc:	3318      	adds	r3, #24
 8002ade:	601a      	str	r2, [r3, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002afc:	3318      	adds	r3, #24
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0202 	bic.w	r2, r2, #2
 8002b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b30:	3318      	adds	r3, #24
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b40:	3318      	adds	r3, #24
 8002b42:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4c:	3318      	adds	r3, #24
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f000 f80c 	bl	8002b70 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b62:	3318      	adds	r3, #24
 8002b64:	601a      	str	r2, [r3, #0]
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <ETH_Delay+0x34>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <ETH_Delay+0x38>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0a5b      	lsrs	r3, r3, #9
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002b8c:	bf00      	nop
  } 
  while (Delay --);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1e5a      	subs	r2, r3, #1
 8002b92:	60fa      	str	r2, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f9      	bne.n	8002b8c <ETH_Delay+0x1c>
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	10624dd3 	.word	0x10624dd3

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	e16b      	b.n	8002ea0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	f040 815a 	bne.w	8002e9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d00b      	beq.n	8002c06 <HAL_GPIO_Init+0x5a>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d007      	beq.n	8002c06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bfa:	2b11      	cmp	r3, #17
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b12      	cmp	r3, #18
 8002c04:	d130      	bne.n	8002c68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	2203      	movs	r2, #3
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 0201 	and.w	r2, r3, #1
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0xfc>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b12      	cmp	r3, #18
 8002ca6:	d123      	bne.n	8002cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	08da      	lsrs	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3208      	adds	r2, #8
 8002cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	08da      	lsrs	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3208      	adds	r2, #8
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0203 	and.w	r2, r3, #3
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80b4 	beq.w	8002e9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <HAL_GPIO_Init+0x308>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4a5e      	ldr	r2, [pc, #376]	; (8002eb4 <HAL_GPIO_Init+0x308>)
 8002d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	4b5c      	ldr	r3, [pc, #368]	; (8002eb4 <HAL_GPIO_Init+0x308>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4e:	4a5a      	ldr	r2, [pc, #360]	; (8002eb8 <HAL_GPIO_Init+0x30c>)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	3302      	adds	r3, #2
 8002d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	220f      	movs	r2, #15
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a51      	ldr	r2, [pc, #324]	; (8002ebc <HAL_GPIO_Init+0x310>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02b      	beq.n	8002dd2 <HAL_GPIO_Init+0x226>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a50      	ldr	r2, [pc, #320]	; (8002ec0 <HAL_GPIO_Init+0x314>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d025      	beq.n	8002dce <HAL_GPIO_Init+0x222>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4f      	ldr	r2, [pc, #316]	; (8002ec4 <HAL_GPIO_Init+0x318>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01f      	beq.n	8002dca <HAL_GPIO_Init+0x21e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4e      	ldr	r2, [pc, #312]	; (8002ec8 <HAL_GPIO_Init+0x31c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d019      	beq.n	8002dc6 <HAL_GPIO_Init+0x21a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4d      	ldr	r2, [pc, #308]	; (8002ecc <HAL_GPIO_Init+0x320>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_GPIO_Init+0x216>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4c      	ldr	r2, [pc, #304]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00d      	beq.n	8002dbe <HAL_GPIO_Init+0x212>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4b      	ldr	r2, [pc, #300]	; (8002ed4 <HAL_GPIO_Init+0x328>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_Init+0x20e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4a      	ldr	r2, [pc, #296]	; (8002ed8 <HAL_GPIO_Init+0x32c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_GPIO_Init+0x20a>
 8002db2:	2307      	movs	r3, #7
 8002db4:	e00e      	b.n	8002dd4 <HAL_GPIO_Init+0x228>
 8002db6:	2308      	movs	r3, #8
 8002db8:	e00c      	b.n	8002dd4 <HAL_GPIO_Init+0x228>
 8002dba:	2306      	movs	r3, #6
 8002dbc:	e00a      	b.n	8002dd4 <HAL_GPIO_Init+0x228>
 8002dbe:	2305      	movs	r3, #5
 8002dc0:	e008      	b.n	8002dd4 <HAL_GPIO_Init+0x228>
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	e006      	b.n	8002dd4 <HAL_GPIO_Init+0x228>
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e004      	b.n	8002dd4 <HAL_GPIO_Init+0x228>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e002      	b.n	8002dd4 <HAL_GPIO_Init+0x228>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_GPIO_Init+0x228>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	f002 0203 	and.w	r2, r2, #3
 8002dda:	0092      	lsls	r2, r2, #2
 8002ddc:	4093      	lsls	r3, r2
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de4:	4934      	ldr	r1, [pc, #208]	; (8002eb8 <HAL_GPIO_Init+0x30c>)
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	3302      	adds	r3, #2
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df2:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <HAL_GPIO_Init+0x330>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e16:	4a31      	ldr	r2, [pc, #196]	; (8002edc <HAL_GPIO_Init+0x330>)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_GPIO_Init+0x330>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e40:	4a26      	ldr	r2, [pc, #152]	; (8002edc <HAL_GPIO_Init+0x330>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e46:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_GPIO_Init+0x330>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <HAL_GPIO_Init+0x330>)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_GPIO_Init+0x330>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e94:	4a11      	ldr	r2, [pc, #68]	; (8002edc <HAL_GPIO_Init+0x330>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2b0f      	cmp	r3, #15
 8002ea4:	f67f ae90 	bls.w	8002bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3724      	adds	r7, #36	; 0x24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40021400 	.word	0x40021400
 8002ed4:	40021800 	.word	0x40021800
 8002ed8:	40021c00 	.word	0x40021c00
 8002edc:	40013c00 	.word	0x40013c00

08002ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
 8002eec:	4613      	mov	r3, r2
 8002eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef0:	787b      	ldrb	r3, [r7, #1]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002efc:	e003      	b.n	8002f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002efe:	887b      	ldrh	r3, [r7, #2]
 8002f00:	041a      	lsls	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	619a      	str	r2, [r3, #24]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e25b      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d075      	beq.n	800301e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f32:	4ba3      	ldr	r3, [pc, #652]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d00c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3e:	4ba0      	ldr	r3, [pc, #640]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d112      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4a:	4b9d      	ldr	r3, [pc, #628]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f56:	d10b      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	4b99      	ldr	r3, [pc, #612]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d05b      	beq.n	800301c <HAL_RCC_OscConfig+0x108>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d157      	bne.n	800301c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e236      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f78:	d106      	bne.n	8002f88 <HAL_RCC_OscConfig+0x74>
 8002f7a:	4b91      	ldr	r3, [pc, #580]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a90      	ldr	r2, [pc, #576]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e01d      	b.n	8002fc4 <HAL_RCC_OscConfig+0xb0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x98>
 8002f92:	4b8b      	ldr	r3, [pc, #556]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a8a      	ldr	r2, [pc, #552]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b88      	ldr	r3, [pc, #544]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a87      	ldr	r2, [pc, #540]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0xb0>
 8002fac:	4b84      	ldr	r3, [pc, #528]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a83      	ldr	r2, [pc, #524]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a80      	ldr	r2, [pc, #512]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fd ffc8 	bl	8000f60 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7fd ffc4 	bl	8000f60 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e1fb      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b76      	ldr	r3, [pc, #472]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xc0>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fd ffb4 	bl	8000f60 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7fd ffb0 	bl	8000f60 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1e7      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	4b6c      	ldr	r3, [pc, #432]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0xe8>
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d063      	beq.n	80030f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302a:	4b65      	ldr	r3, [pc, #404]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003036:	4b62      	ldr	r3, [pc, #392]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d11c      	bne.n	800307c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003042:	4b5f      	ldr	r3, [pc, #380]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	4b5c      	ldr	r3, [pc, #368]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x152>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1bb      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b56      	ldr	r3, [pc, #344]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4952      	ldr	r1, [pc, #328]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	e03a      	b.n	80030f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003084:	4b4f      	ldr	r3, [pc, #316]	; (80031c4 <HAL_RCC_OscConfig+0x2b0>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fd ff69 	bl	8000f60 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003092:	f7fd ff65 	bl	8000f60 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e19c      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4940      	ldr	r1, [pc, #256]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_RCC_OscConfig+0x2b0>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fd ff48 	bl	8000f60 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fd ff44 	bl	8000f60 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e17b      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d030      	beq.n	8003160 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4b30      	ldr	r3, [pc, #192]	; (80031c8 <HAL_RCC_OscConfig+0x2b4>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7fd ff28 	bl	8000f60 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003114:	f7fd ff24 	bl	8000f60 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e15b      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x200>
 8003132:	e015      	b.n	8003160 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003134:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <HAL_RCC_OscConfig+0x2b4>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313a:	f7fd ff11 	bl	8000f60 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003142:	f7fd ff0d 	bl	8000f60 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e144      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a0 	beq.w	80032ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10f      	bne.n	800319e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318c:	6413      	str	r3, [r2, #64]	; 0x40
 800318e:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319a:	2301      	movs	r3, #1
 800319c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_OscConfig+0x2b8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d121      	bne.n	80031ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <HAL_RCC_OscConfig+0x2b8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a07      	ldr	r2, [pc, #28]	; (80031cc <HAL_RCC_OscConfig+0x2b8>)
 80031b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b6:	f7fd fed3 	bl	8000f60 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	e011      	b.n	80031e2 <HAL_RCC_OscConfig+0x2ce>
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	42470000 	.word	0x42470000
 80031c8:	42470e80 	.word	0x42470e80
 80031cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d0:	f7fd fec6 	bl	8000f60 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0fd      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b81      	ldr	r3, [pc, #516]	; (80033e8 <HAL_RCC_OscConfig+0x4d4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d106      	bne.n	8003204 <HAL_RCC_OscConfig+0x2f0>
 80031f6:	4b7d      	ldr	r3, [pc, #500]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a7c      	ldr	r2, [pc, #496]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6713      	str	r3, [r2, #112]	; 0x70
 8003202:	e01c      	b.n	800323e <HAL_RCC_OscConfig+0x32a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b05      	cmp	r3, #5
 800320a:	d10c      	bne.n	8003226 <HAL_RCC_OscConfig+0x312>
 800320c:	4b77      	ldr	r3, [pc, #476]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	4a76      	ldr	r2, [pc, #472]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 8003212:	f043 0304 	orr.w	r3, r3, #4
 8003216:	6713      	str	r3, [r2, #112]	; 0x70
 8003218:	4b74      	ldr	r3, [pc, #464]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a73      	ldr	r2, [pc, #460]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	e00b      	b.n	800323e <HAL_RCC_OscConfig+0x32a>
 8003226:	4b71      	ldr	r3, [pc, #452]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a70      	ldr	r2, [pc, #448]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	4b6e      	ldr	r3, [pc, #440]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a6d      	ldr	r2, [pc, #436]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 8003238:	f023 0304 	bic.w	r3, r3, #4
 800323c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d015      	beq.n	8003272 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fd fe8b 	bl	8000f60 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fd fe87 	bl	8000f60 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0bc      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	4b61      	ldr	r3, [pc, #388]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ee      	beq.n	800324e <HAL_RCC_OscConfig+0x33a>
 8003270:	e014      	b.n	800329c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7fd fe75 	bl	8000f60 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fd fe71 	bl	8000f60 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0a6      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003290:	4b56      	ldr	r3, [pc, #344]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ee      	bne.n	800327a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b52      	ldr	r3, [pc, #328]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a51      	ldr	r2, [pc, #324]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 80032a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8092 	beq.w	80033dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b8:	4b4c      	ldr	r3, [pc, #304]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d05c      	beq.n	800337e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d141      	bne.n	8003350 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032cc:	4b48      	ldr	r3, [pc, #288]	; (80033f0 <HAL_RCC_OscConfig+0x4dc>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fd fe45 	bl	8000f60 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032da:	f7fd fe41 	bl	8000f60 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e078      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ec:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f0      	bne.n	80032da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	019b      	lsls	r3, r3, #6
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	3b01      	subs	r3, #1
 8003312:	041b      	lsls	r3, r3, #16
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	061b      	lsls	r3, r3, #24
 800331c:	4933      	ldr	r1, [pc, #204]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003322:	4b33      	ldr	r3, [pc, #204]	; (80033f0 <HAL_RCC_OscConfig+0x4dc>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fd fe1a 	bl	8000f60 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003330:	f7fd fe16 	bl	8000f60 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e04d      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x41c>
 800334e:	e045      	b.n	80033dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <HAL_RCC_OscConfig+0x4dc>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7fd fe03 	bl	8000f60 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335e:	f7fd fdff 	bl	8000f60 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e036      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003370:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <HAL_RCC_OscConfig+0x44a>
 800337c:	e02e      	b.n	80033dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e029      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <HAL_RCC_OscConfig+0x4d8>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	429a      	cmp	r2, r3
 800339c:	d11c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d115      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033b2:	4013      	ands	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d10d      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d106      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40007000 	.word	0x40007000
 80033ec:	40023800 	.word	0x40023800
 80033f0:	42470060 	.word	0x42470060

080033f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0cc      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003408:	4b68      	ldr	r3, [pc, #416]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d90c      	bls.n	8003430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b65      	ldr	r3, [pc, #404]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0b8      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d020      	beq.n	800347e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003448:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003460:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a52      	ldr	r2, [pc, #328]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800346a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346c:	4b50      	ldr	r3, [pc, #320]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	494d      	ldr	r1, [pc, #308]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d044      	beq.n	8003514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	4b47      	ldr	r3, [pc, #284]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d119      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e07f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c2:	4b3b      	ldr	r3, [pc, #236]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e067      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d2:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f023 0203 	bic.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4934      	ldr	r1, [pc, #208]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e4:	f7fd fd3c 	bl	8000f60 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ec:	f7fd fd38 	bl	8000f60 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e04f      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 020c 	and.w	r2, r3, #12
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	429a      	cmp	r2, r3
 8003512:	d1eb      	bne.n	80034ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d20c      	bcs.n	800353c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b20      	ldr	r3, [pc, #128]	; (80035ac <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e032      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4916      	ldr	r1, [pc, #88]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	490e      	ldr	r1, [pc, #56]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800357a:	f000 f821 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 800357e:	4601      	mov	r1, r0
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	5cd3      	ldrb	r3, [r2, r3]
 800358e:	fa21 f303 	lsr.w	r3, r1, r3
 8003592:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd fc9c 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40023c00 	.word	0x40023c00
 80035b0:	40023800 	.word	0x40023800
 80035b4:	080149f8 	.word	0x080149f8
 80035b8:	20000000 	.word	0x20000000
 80035bc:	20000004 	.word	0x20000004

080035c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	2300      	movs	r3, #0
 80035d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d6:	4b63      	ldr	r3, [pc, #396]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d007      	beq.n	80035f2 <HAL_RCC_GetSysClockFreq+0x32>
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d008      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x38>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 80b4 	bne.w	8003754 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ec:	4b5e      	ldr	r3, [pc, #376]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035ee:	60bb      	str	r3, [r7, #8]
       break;
 80035f0:	e0b3      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035f2:	4b5e      	ldr	r3, [pc, #376]	; (800376c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80035f4:	60bb      	str	r3, [r7, #8]
      break;
 80035f6:	e0b0      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035f8:	4b5a      	ldr	r3, [pc, #360]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003600:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003602:	4b58      	ldr	r3, [pc, #352]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d04a      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360e:	4b55      	ldr	r3, [pc, #340]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	f04f 0400 	mov.w	r4, #0
 8003618:	f240 11ff 	movw	r1, #511	; 0x1ff
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	ea03 0501 	and.w	r5, r3, r1
 8003624:	ea04 0602 	and.w	r6, r4, r2
 8003628:	4629      	mov	r1, r5
 800362a:	4632      	mov	r2, r6
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	f04f 0400 	mov.w	r4, #0
 8003634:	0154      	lsls	r4, r2, #5
 8003636:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800363a:	014b      	lsls	r3, r1, #5
 800363c:	4619      	mov	r1, r3
 800363e:	4622      	mov	r2, r4
 8003640:	1b49      	subs	r1, r1, r5
 8003642:	eb62 0206 	sbc.w	r2, r2, r6
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	f04f 0400 	mov.w	r4, #0
 800364e:	0194      	lsls	r4, r2, #6
 8003650:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003654:	018b      	lsls	r3, r1, #6
 8003656:	1a5b      	subs	r3, r3, r1
 8003658:	eb64 0402 	sbc.w	r4, r4, r2
 800365c:	f04f 0100 	mov.w	r1, #0
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	00e2      	lsls	r2, r4, #3
 8003666:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800366a:	00d9      	lsls	r1, r3, #3
 800366c:	460b      	mov	r3, r1
 800366e:	4614      	mov	r4, r2
 8003670:	195b      	adds	r3, r3, r5
 8003672:	eb44 0406 	adc.w	r4, r4, r6
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	0262      	lsls	r2, r4, #9
 8003680:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003684:	0259      	lsls	r1, r3, #9
 8003686:	460b      	mov	r3, r1
 8003688:	4614      	mov	r4, r2
 800368a:	4618      	mov	r0, r3
 800368c:	4621      	mov	r1, r4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f04f 0400 	mov.w	r4, #0
 8003694:	461a      	mov	r2, r3
 8003696:	4623      	mov	r3, r4
 8003698:	f7fc fe02 	bl	80002a0 <__aeabi_uldivmod>
 800369c:	4603      	mov	r3, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e049      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a4:	4b2f      	ldr	r3, [pc, #188]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	f04f 0400 	mov.w	r4, #0
 80036ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	ea03 0501 	and.w	r5, r3, r1
 80036ba:	ea04 0602 	and.w	r6, r4, r2
 80036be:	4629      	mov	r1, r5
 80036c0:	4632      	mov	r2, r6
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	f04f 0400 	mov.w	r4, #0
 80036ca:	0154      	lsls	r4, r2, #5
 80036cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036d0:	014b      	lsls	r3, r1, #5
 80036d2:	4619      	mov	r1, r3
 80036d4:	4622      	mov	r2, r4
 80036d6:	1b49      	subs	r1, r1, r5
 80036d8:	eb62 0206 	sbc.w	r2, r2, r6
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	f04f 0400 	mov.w	r4, #0
 80036e4:	0194      	lsls	r4, r2, #6
 80036e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036ea:	018b      	lsls	r3, r1, #6
 80036ec:	1a5b      	subs	r3, r3, r1
 80036ee:	eb64 0402 	sbc.w	r4, r4, r2
 80036f2:	f04f 0100 	mov.w	r1, #0
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	00e2      	lsls	r2, r4, #3
 80036fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003700:	00d9      	lsls	r1, r3, #3
 8003702:	460b      	mov	r3, r1
 8003704:	4614      	mov	r4, r2
 8003706:	195b      	adds	r3, r3, r5
 8003708:	eb44 0406 	adc.w	r4, r4, r6
 800370c:	f04f 0100 	mov.w	r1, #0
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	02a2      	lsls	r2, r4, #10
 8003716:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800371a:	0299      	lsls	r1, r3, #10
 800371c:	460b      	mov	r3, r1
 800371e:	4614      	mov	r4, r2
 8003720:	4618      	mov	r0, r3
 8003722:	4621      	mov	r1, r4
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f04f 0400 	mov.w	r4, #0
 800372a:	461a      	mov	r2, r3
 800372c:	4623      	mov	r3, r4
 800372e:	f7fc fdb7 	bl	80002a0 <__aeabi_uldivmod>
 8003732:	4603      	mov	r3, r0
 8003734:	460c      	mov	r4, r1
 8003736:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	3301      	adds	r3, #1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	60bb      	str	r3, [r7, #8]
      break;
 8003752:	e002      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003756:	60bb      	str	r3, [r7, #8]
      break;
 8003758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375a:	68bb      	ldr	r3, [r7, #8]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003764:	40023800 	.word	0x40023800
 8003768:	00f42400 	.word	0x00f42400
 800376c:	007a1200 	.word	0x007a1200

08003770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <HAL_RCC_GetHCLKFreq+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000000 	.word	0x20000000

08003788 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800378e:	4b8d      	ldr	r3, [pc, #564]	; (80039c4 <MX_LWIP_Init+0x23c>)
 8003790:	22c0      	movs	r2, #192	; 0xc0
 8003792:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003794:	4b8b      	ldr	r3, [pc, #556]	; (80039c4 <MX_LWIP_Init+0x23c>)
 8003796:	22a8      	movs	r2, #168	; 0xa8
 8003798:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800379a:	4b8a      	ldr	r3, [pc, #552]	; (80039c4 <MX_LWIP_Init+0x23c>)
 800379c:	2200      	movs	r2, #0
 800379e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80037a0:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <MX_LWIP_Init+0x23c>)
 80037a2:	220a      	movs	r2, #10
 80037a4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80037a6:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <MX_LWIP_Init+0x240>)
 80037a8:	22ff      	movs	r2, #255	; 0xff
 80037aa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80037ac:	4b86      	ldr	r3, [pc, #536]	; (80039c8 <MX_LWIP_Init+0x240>)
 80037ae:	22ff      	movs	r2, #255	; 0xff
 80037b0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80037b2:	4b85      	ldr	r3, [pc, #532]	; (80039c8 <MX_LWIP_Init+0x240>)
 80037b4:	22ff      	movs	r2, #255	; 0xff
 80037b6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80037b8:	4b83      	ldr	r3, [pc, #524]	; (80039c8 <MX_LWIP_Init+0x240>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80037be:	4b83      	ldr	r3, [pc, #524]	; (80039cc <MX_LWIP_Init+0x244>)
 80037c0:	22c0      	movs	r2, #192	; 0xc0
 80037c2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80037c4:	4b81      	ldr	r3, [pc, #516]	; (80039cc <MX_LWIP_Init+0x244>)
 80037c6:	22a8      	movs	r2, #168	; 0xa8
 80037c8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80037ca:	4b80      	ldr	r3, [pc, #512]	; (80039cc <MX_LWIP_Init+0x244>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80037d0:	4b7e      	ldr	r3, [pc, #504]	; (80039cc <MX_LWIP_Init+0x244>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80037d6:	f002 f9d7 	bl	8005b88 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80037da:	4b7a      	ldr	r3, [pc, #488]	; (80039c4 <MX_LWIP_Init+0x23c>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	061a      	lsls	r2, r3, #24
 80037e0:	4b78      	ldr	r3, [pc, #480]	; (80039c4 <MX_LWIP_Init+0x23c>)
 80037e2:	785b      	ldrb	r3, [r3, #1]
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	431a      	orrs	r2, r3
 80037e8:	4b76      	ldr	r3, [pc, #472]	; (80039c4 <MX_LWIP_Init+0x23c>)
 80037ea:	789b      	ldrb	r3, [r3, #2]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	4313      	orrs	r3, r2
 80037f0:	4a74      	ldr	r2, [pc, #464]	; (80039c4 <MX_LWIP_Init+0x23c>)
 80037f2:	78d2      	ldrb	r2, [r2, #3]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	061a      	lsls	r2, r3, #24
 80037f8:	4b72      	ldr	r3, [pc, #456]	; (80039c4 <MX_LWIP_Init+0x23c>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	0619      	lsls	r1, r3, #24
 80037fe:	4b71      	ldr	r3, [pc, #452]	; (80039c4 <MX_LWIP_Init+0x23c>)
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	041b      	lsls	r3, r3, #16
 8003804:	4319      	orrs	r1, r3
 8003806:	4b6f      	ldr	r3, [pc, #444]	; (80039c4 <MX_LWIP_Init+0x23c>)
 8003808:	789b      	ldrb	r3, [r3, #2]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	430b      	orrs	r3, r1
 800380e:	496d      	ldr	r1, [pc, #436]	; (80039c4 <MX_LWIP_Init+0x23c>)
 8003810:	78c9      	ldrb	r1, [r1, #3]
 8003812:	430b      	orrs	r3, r1
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800381a:	431a      	orrs	r2, r3
 800381c:	4b69      	ldr	r3, [pc, #420]	; (80039c4 <MX_LWIP_Init+0x23c>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	0619      	lsls	r1, r3, #24
 8003822:	4b68      	ldr	r3, [pc, #416]	; (80039c4 <MX_LWIP_Init+0x23c>)
 8003824:	785b      	ldrb	r3, [r3, #1]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	4319      	orrs	r1, r3
 800382a:	4b66      	ldr	r3, [pc, #408]	; (80039c4 <MX_LWIP_Init+0x23c>)
 800382c:	789b      	ldrb	r3, [r3, #2]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	430b      	orrs	r3, r1
 8003832:	4964      	ldr	r1, [pc, #400]	; (80039c4 <MX_LWIP_Init+0x23c>)
 8003834:	78c9      	ldrb	r1, [r1, #3]
 8003836:	430b      	orrs	r3, r1
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800383e:	431a      	orrs	r2, r3
 8003840:	4b60      	ldr	r3, [pc, #384]	; (80039c4 <MX_LWIP_Init+0x23c>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	0619      	lsls	r1, r3, #24
 8003846:	4b5f      	ldr	r3, [pc, #380]	; (80039c4 <MX_LWIP_Init+0x23c>)
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	4319      	orrs	r1, r3
 800384e:	4b5d      	ldr	r3, [pc, #372]	; (80039c4 <MX_LWIP_Init+0x23c>)
 8003850:	789b      	ldrb	r3, [r3, #2]
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	430b      	orrs	r3, r1
 8003856:	495b      	ldr	r1, [pc, #364]	; (80039c4 <MX_LWIP_Init+0x23c>)
 8003858:	78c9      	ldrb	r1, [r1, #3]
 800385a:	430b      	orrs	r3, r1
 800385c:	0e1b      	lsrs	r3, r3, #24
 800385e:	4313      	orrs	r3, r2
 8003860:	4a5b      	ldr	r2, [pc, #364]	; (80039d0 <MX_LWIP_Init+0x248>)
 8003862:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003864:	4b58      	ldr	r3, [pc, #352]	; (80039c8 <MX_LWIP_Init+0x240>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	061a      	lsls	r2, r3, #24
 800386a:	4b57      	ldr	r3, [pc, #348]	; (80039c8 <MX_LWIP_Init+0x240>)
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	431a      	orrs	r2, r3
 8003872:	4b55      	ldr	r3, [pc, #340]	; (80039c8 <MX_LWIP_Init+0x240>)
 8003874:	789b      	ldrb	r3, [r3, #2]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	4313      	orrs	r3, r2
 800387a:	4a53      	ldr	r2, [pc, #332]	; (80039c8 <MX_LWIP_Init+0x240>)
 800387c:	78d2      	ldrb	r2, [r2, #3]
 800387e:	4313      	orrs	r3, r2
 8003880:	061a      	lsls	r2, r3, #24
 8003882:	4b51      	ldr	r3, [pc, #324]	; (80039c8 <MX_LWIP_Init+0x240>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	0619      	lsls	r1, r3, #24
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <MX_LWIP_Init+0x240>)
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	4319      	orrs	r1, r3
 8003890:	4b4d      	ldr	r3, [pc, #308]	; (80039c8 <MX_LWIP_Init+0x240>)
 8003892:	789b      	ldrb	r3, [r3, #2]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	430b      	orrs	r3, r1
 8003898:	494b      	ldr	r1, [pc, #300]	; (80039c8 <MX_LWIP_Init+0x240>)
 800389a:	78c9      	ldrb	r1, [r1, #3]
 800389c:	430b      	orrs	r3, r1
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038a4:	431a      	orrs	r2, r3
 80038a6:	4b48      	ldr	r3, [pc, #288]	; (80039c8 <MX_LWIP_Init+0x240>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	0619      	lsls	r1, r3, #24
 80038ac:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <MX_LWIP_Init+0x240>)
 80038ae:	785b      	ldrb	r3, [r3, #1]
 80038b0:	041b      	lsls	r3, r3, #16
 80038b2:	4319      	orrs	r1, r3
 80038b4:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <MX_LWIP_Init+0x240>)
 80038b6:	789b      	ldrb	r3, [r3, #2]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	430b      	orrs	r3, r1
 80038bc:	4942      	ldr	r1, [pc, #264]	; (80039c8 <MX_LWIP_Init+0x240>)
 80038be:	78c9      	ldrb	r1, [r1, #3]
 80038c0:	430b      	orrs	r3, r1
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038c8:	431a      	orrs	r2, r3
 80038ca:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <MX_LWIP_Init+0x240>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	0619      	lsls	r1, r3, #24
 80038d0:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <MX_LWIP_Init+0x240>)
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	4319      	orrs	r1, r3
 80038d8:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <MX_LWIP_Init+0x240>)
 80038da:	789b      	ldrb	r3, [r3, #2]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	430b      	orrs	r3, r1
 80038e0:	4939      	ldr	r1, [pc, #228]	; (80039c8 <MX_LWIP_Init+0x240>)
 80038e2:	78c9      	ldrb	r1, [r1, #3]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	0e1b      	lsrs	r3, r3, #24
 80038e8:	4313      	orrs	r3, r2
 80038ea:	4a3a      	ldr	r2, [pc, #232]	; (80039d4 <MX_LWIP_Init+0x24c>)
 80038ec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80038ee:	4b37      	ldr	r3, [pc, #220]	; (80039cc <MX_LWIP_Init+0x244>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	061a      	lsls	r2, r3, #24
 80038f4:	4b35      	ldr	r3, [pc, #212]	; (80039cc <MX_LWIP_Init+0x244>)
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	431a      	orrs	r2, r3
 80038fc:	4b33      	ldr	r3, [pc, #204]	; (80039cc <MX_LWIP_Init+0x244>)
 80038fe:	789b      	ldrb	r3, [r3, #2]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	4313      	orrs	r3, r2
 8003904:	4a31      	ldr	r2, [pc, #196]	; (80039cc <MX_LWIP_Init+0x244>)
 8003906:	78d2      	ldrb	r2, [r2, #3]
 8003908:	4313      	orrs	r3, r2
 800390a:	061a      	lsls	r2, r3, #24
 800390c:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <MX_LWIP_Init+0x244>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	0619      	lsls	r1, r3, #24
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <MX_LWIP_Init+0x244>)
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	041b      	lsls	r3, r3, #16
 8003918:	4319      	orrs	r1, r3
 800391a:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <MX_LWIP_Init+0x244>)
 800391c:	789b      	ldrb	r3, [r3, #2]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	430b      	orrs	r3, r1
 8003922:	492a      	ldr	r1, [pc, #168]	; (80039cc <MX_LWIP_Init+0x244>)
 8003924:	78c9      	ldrb	r1, [r1, #3]
 8003926:	430b      	orrs	r3, r1
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800392e:	431a      	orrs	r2, r3
 8003930:	4b26      	ldr	r3, [pc, #152]	; (80039cc <MX_LWIP_Init+0x244>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	0619      	lsls	r1, r3, #24
 8003936:	4b25      	ldr	r3, [pc, #148]	; (80039cc <MX_LWIP_Init+0x244>)
 8003938:	785b      	ldrb	r3, [r3, #1]
 800393a:	041b      	lsls	r3, r3, #16
 800393c:	4319      	orrs	r1, r3
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <MX_LWIP_Init+0x244>)
 8003940:	789b      	ldrb	r3, [r3, #2]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	430b      	orrs	r3, r1
 8003946:	4921      	ldr	r1, [pc, #132]	; (80039cc <MX_LWIP_Init+0x244>)
 8003948:	78c9      	ldrb	r1, [r1, #3]
 800394a:	430b      	orrs	r3, r1
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003952:	431a      	orrs	r2, r3
 8003954:	4b1d      	ldr	r3, [pc, #116]	; (80039cc <MX_LWIP_Init+0x244>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	0619      	lsls	r1, r3, #24
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <MX_LWIP_Init+0x244>)
 800395c:	785b      	ldrb	r3, [r3, #1]
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	4319      	orrs	r1, r3
 8003962:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <MX_LWIP_Init+0x244>)
 8003964:	789b      	ldrb	r3, [r3, #2]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	430b      	orrs	r3, r1
 800396a:	4918      	ldr	r1, [pc, #96]	; (80039cc <MX_LWIP_Init+0x244>)
 800396c:	78c9      	ldrb	r1, [r1, #3]
 800396e:	430b      	orrs	r3, r1
 8003970:	0e1b      	lsrs	r3, r3, #24
 8003972:	4313      	orrs	r3, r2
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <MX_LWIP_Init+0x250>)
 8003976:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003978:	4b18      	ldr	r3, [pc, #96]	; (80039dc <MX_LWIP_Init+0x254>)
 800397a:	9302      	str	r3, [sp, #8]
 800397c:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <MX_LWIP_Init+0x258>)
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	2300      	movs	r3, #0
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <MX_LWIP_Init+0x250>)
 8003986:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <MX_LWIP_Init+0x24c>)
 8003988:	4911      	ldr	r1, [pc, #68]	; (80039d0 <MX_LWIP_Init+0x248>)
 800398a:	4816      	ldr	r0, [pc, #88]	; (80039e4 <MX_LWIP_Init+0x25c>)
 800398c:	f002 fdca 	bl	8006524 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003990:	4814      	ldr	r0, [pc, #80]	; (80039e4 <MX_LWIP_Init+0x25c>)
 8003992:	f002 ff79 	bl	8006888 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <MX_LWIP_Init+0x25c>)
 8003998:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80039a8:	480e      	ldr	r0, [pc, #56]	; (80039e4 <MX_LWIP_Init+0x25c>)
 80039aa:	f002 ff7d 	bl	80068a8 <netif_set_up>
 80039ae:	e002      	b.n	80039b6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80039b0:	480c      	ldr	r0, [pc, #48]	; (80039e4 <MX_LWIP_Init+0x25c>)
 80039b2:	f002 ffe5 	bl	8006980 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80039b6:	490c      	ldr	r1, [pc, #48]	; (80039e8 <MX_LWIP_Init+0x260>)
 80039b8:	480a      	ldr	r0, [pc, #40]	; (80039e4 <MX_LWIP_Init+0x25c>)
 80039ba:	f003 f813 	bl	80069e4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80039be:	bf00      	nop
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000314 	.word	0x20000314
 80039c8:	20000310 	.word	0x20000310
 80039cc:	200002d4 	.word	0x200002d4
 80039d0:	2000030c 	.word	0x2000030c
 80039d4:	20000318 	.word	0x20000318
 80039d8:	2000031c 	.word	0x2000031c
 80039dc:	080101c1 	.word	0x080101c1
 80039e0:	08003f91 	.word	0x08003f91
 80039e4:	200002d8 	.word	0x200002d8
 80039e8:	08003ffd 	.word	0x08003ffd

080039ec <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80039f0:	4803      	ldr	r0, [pc, #12]	; (8003a00 <MX_LWIP_Process+0x14>)
 80039f2:	f000 faad 	bl	8003f50 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80039f6:	f00a f803 	bl	800da00 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200002d8 	.word	0x200002d8

08003a04 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08e      	sub	sp, #56	; 0x38
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a46      	ldr	r2, [pc, #280]	; (8003b3c <HAL_ETH_MspInit+0x138>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	f040 8085 	bne.w	8003b32 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003a28:	2300      	movs	r3, #0
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	4a43      	ldr	r2, [pc, #268]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a36:	6313      	str	r3, [r2, #48]	; 0x30
 8003a38:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a40:	623b      	str	r3, [r7, #32]
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	4a3c      	ldr	r2, [pc, #240]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a52:	6313      	str	r3, [r2, #48]	; 0x30
 8003a54:	4b3a      	ldr	r3, [pc, #232]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	4a35      	ldr	r2, [pc, #212]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a70:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	4b2f      	ldr	r3, [pc, #188]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	4a2e      	ldr	r2, [pc, #184]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a86:	f043 0304 	orr.w	r3, r3, #4
 8003a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8c:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	4a27      	ldr	r2, [pc, #156]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <HAL_ETH_MspInit+0x13c>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003ad0:	2332      	movs	r3, #50	; 0x32
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003adc:	2303      	movs	r3, #3
 8003ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ae0:	230b      	movs	r3, #11
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4816      	ldr	r0, [pc, #88]	; (8003b44 <HAL_ETH_MspInit+0x140>)
 8003aec:	f7ff f85e 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003af0:	2386      	movs	r3, #134	; 0x86
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af4:	2302      	movs	r3, #2
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afc:	2303      	movs	r3, #3
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b00:	230b      	movs	r3, #11
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b08:	4619      	mov	r1, r3
 8003b0a:	480f      	ldr	r0, [pc, #60]	; (8003b48 <HAL_ETH_MspInit+0x144>)
 8003b0c:	f7ff f84e 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003b10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b16:	2302      	movs	r3, #2
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b22:	230b      	movs	r3, #11
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4807      	ldr	r0, [pc, #28]	; (8003b4c <HAL_ETH_MspInit+0x148>)
 8003b2e:	f7ff f83d 	bl	8002bac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003b32:	bf00      	nop
 8003b34:	3738      	adds	r7, #56	; 0x38
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40028000 	.word	0x40028000
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40020800 	.word	0x40020800
 8003b48:	40020000 	.word	0x40020000
 8003b4c:	40020400 	.word	0x40020400

08003b50 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003b5c:	4b4d      	ldr	r3, [pc, #308]	; (8003c94 <low_level_init+0x144>)
 8003b5e:	4a4e      	ldr	r2, [pc, #312]	; (8003c98 <low_level_init+0x148>)
 8003b60:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003b62:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <low_level_init+0x144>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003b68:	4b4a      	ldr	r3, [pc, #296]	; (8003c94 <low_level_init+0x144>)
 8003b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b6e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003b70:	4b48      	ldr	r3, [pc, #288]	; (8003c94 <low_level_init+0x144>)
 8003b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b76:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003b78:	4b46      	ldr	r3, [pc, #280]	; (8003c94 <low_level_init+0x144>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003b86:	23e1      	movs	r3, #225	; 0xe1
 8003b88:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003b92:	2300      	movs	r3, #0
 8003b94:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003b96:	4a3f      	ldr	r2, [pc, #252]	; (8003c94 <low_level_init+0x144>)
 8003b98:	f107 0308 	add.w	r3, r7, #8
 8003b9c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <low_level_init+0x144>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003ba4:	4b3b      	ldr	r3, [pc, #236]	; (8003c94 <low_level_init+0x144>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003baa:	4b3a      	ldr	r3, [pc, #232]	; (8003c94 <low_level_init+0x144>)
 8003bac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003bb0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003bb2:	4838      	ldr	r0, [pc, #224]	; (8003c94 <low_level_init+0x144>)
 8003bb4:	f7fd fed4 	bl	8001960 <HAL_ETH_Init>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d108      	bne.n	8003bd4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003bc8:	f043 0304 	orr.w	r3, r3, #4
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	4a31      	ldr	r2, [pc, #196]	; (8003c9c <low_level_init+0x14c>)
 8003bd8:	4931      	ldr	r1, [pc, #196]	; (8003ca0 <low_level_init+0x150>)
 8003bda:	482e      	ldr	r0, [pc, #184]	; (8003c94 <low_level_init+0x144>)
 8003bdc:	f7fe f85e 	bl	8001c9c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003be0:	2304      	movs	r3, #4
 8003be2:	4a30      	ldr	r2, [pc, #192]	; (8003ca4 <low_level_init+0x154>)
 8003be4:	4930      	ldr	r1, [pc, #192]	; (8003ca8 <low_level_init+0x158>)
 8003be6:	482b      	ldr	r0, [pc, #172]	; (8003c94 <low_level_init+0x144>)
 8003be8:	f7fe f8c1 	bl	8001d6e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2206      	movs	r2, #6
 8003bf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <low_level_init+0x144>)
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003c00:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <low_level_init+0x144>)
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	785a      	ldrb	r2, [r3, #1]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <low_level_init+0x144>)
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	789a      	ldrb	r2, [r3, #2]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <low_level_init+0x144>)
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	78da      	ldrb	r2, [r3, #3]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <low_level_init+0x144>)
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	791a      	ldrb	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003c30:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <low_level_init+0x144>)
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	795a      	ldrb	r2, [r3, #5]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003c42:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c4a:	f043 030a 	orr.w	r3, r3, #10
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003c56:	480f      	ldr	r0, [pc, #60]	; (8003c94 <low_level_init+0x144>)
 8003c58:	f7fe fb32 	bl	80022c0 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003c5c:	f107 0310 	add.w	r3, r7, #16
 8003c60:	461a      	mov	r2, r3
 8003c62:	211d      	movs	r1, #29
 8003c64:	480b      	ldr	r0, [pc, #44]	; (8003c94 <low_level_init+0x144>)
 8003c66:	f7fe fa5d 	bl	8002124 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f043 030b 	orr.w	r3, r3, #11
 8003c70:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	461a      	mov	r2, r3
 8003c76:	211d      	movs	r1, #29
 8003c78:	4806      	ldr	r0, [pc, #24]	; (8003c94 <low_level_init+0x144>)
 8003c7a:	f7fe fabb 	bl	80021f4 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003c7e:	f107 0310 	add.w	r3, r7, #16
 8003c82:	461a      	mov	r2, r3
 8003c84:	211d      	movs	r1, #29
 8003c86:	4803      	ldr	r0, [pc, #12]	; (8003c94 <low_level_init+0x144>)
 8003c88:	f7fe fa4c 	bl	8002124 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003c8c:	bf00      	nop
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20001bf0 	.word	0x20001bf0
 8003c98:	40028000 	.word	0x40028000
 8003c9c:	20001c38 	.word	0x20001c38
 8003ca0:	20000320 	.word	0x20000320
 8003ca4:	200003a0 	.word	0x200003a0
 8003ca8:	20001b70 	.word	0x20001b70

08003cac <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003cb6:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <low_level_output+0x138>)
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003cce:	4b45      	ldr	r3, [pc, #276]	; (8003de4 <low_level_output+0x138>)
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	e05a      	b.n	8003d94 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da03      	bge.n	8003cee <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003ce6:	23f8      	movs	r3, #248	; 0xf8
 8003ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003cec:	e05c      	b.n	8003da8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	895b      	ldrh	r3, [r3, #10]
 8003cf2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003cf8:	e02f      	b.n	8003d5a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	18d0      	adds	r0, r2, r3
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	18d1      	adds	r1, r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003d0e:	3304      	adds	r3, #4
 8003d10:	461a      	mov	r2, r3
 8003d12:	f00c fb5e 	bl	80103d2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	da03      	bge.n	8003d2c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003d24:	23f8      	movs	r3, #248	; 0xf8
 8003d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003d2a:	e03d      	b.n	8003da8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003d3c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003d48:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003d54:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d8c8      	bhi.n	8003cfa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	18d0      	adds	r0, r2, r3
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4413      	add	r3, r2
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f00c fb2a 	bl	80103d2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1a1      	bne.n	8003cde <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003d9a:	6979      	ldr	r1, [r7, #20]
 8003d9c:	4811      	ldr	r0, [pc, #68]	; (8003de4 <low_level_output+0x138>)
 8003d9e:	f7fe f853 	bl	8001e48 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003da8:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <low_level_output+0x138>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db0:	3314      	adds	r3, #20
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003dbc:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <low_level_output+0x138>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <low_level_output+0x138>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003dd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3728      	adds	r7, #40	; 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20001bf0 	.word	0x20001bf0

08003de8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08c      	sub	sp, #48	; 0x30
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003e0c:	484f      	ldr	r0, [pc, #316]	; (8003f4c <low_level_input+0x164>)
 8003e0e:	f7fe f905 	bl	800201c <HAL_ETH_GetReceivedFrame>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <low_level_input+0x34>

    return NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e092      	b.n	8003f42 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003e1c:	4b4b      	ldr	r3, [pc, #300]	; (8003f4c <low_level_input+0x164>)
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003e22:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <low_level_input+0x164>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003e28:	89fb      	ldrh	r3, [r7, #14]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003e2e:	89fb      	ldrh	r3, [r7, #14]
 8003e30:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003e34:	4619      	mov	r1, r3
 8003e36:	2000      	movs	r0, #0
 8003e38:	f002 fe70 	bl	8006b1c <pbuf_alloc>
 8003e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d04b      	beq.n	8003edc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003e44:	4b41      	ldr	r3, [pc, #260]	; (8003f4c <low_level_input+0x164>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e52:	e040      	b.n	8003ed6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	895b      	ldrh	r3, [r3, #10]
 8003e58:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003e5e:	e021      	b.n	8003ea4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	18d0      	adds	r0, r2, r3
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	18d1      	adds	r1, r2, r3
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003e74:	3304      	adds	r3, #4
 8003e76:	461a      	mov	r2, r3
 8003e78:	f00c faab 	bl	80103d2 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003e92:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003e9e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d8d6      	bhi.n	8003e60 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	18d0      	adds	r0, r2, r3
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f00c fa85 	bl	80103d2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	4413      	add	r3, r2
 8003ece:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1bb      	bne.n	8003e54 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <low_level_input+0x164>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	e00b      	b.n	8003f00 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	3301      	adds	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <low_level_input+0x164>)
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d3ee      	bcc.n	8003ee8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <low_level_input+0x164>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003f10:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <low_level_input+0x164>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f18:	3314      	adds	r3, #20
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00d      	beq.n	8003f40 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <low_level_input+0x164>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	2280      	movs	r2, #128	; 0x80
 8003f30:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <low_level_input+0x164>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3730      	adds	r7, #48	; 0x30
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20001bf0 	.word	0x20001bf0

08003f50 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff45 	bl	8003de8 <low_level_input>
 8003f5e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d010      	beq.n	8003f88 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	4798      	blx	r3
 8003f70:	4603      	mov	r3, r0
 8003f72:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003f74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f003 f8ad 	bl	80070dc <pbuf_free>
    p = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	e000      	b.n	8003f8a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003f88:	bf00      	nop
  }
}
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <ethernetif_init+0x1c>
 8003f9e:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <ethernetif_init+0x48>)
 8003fa0:	f240 2207 	movw	r2, #519	; 0x207
 8003fa4:	490d      	ldr	r1, [pc, #52]	; (8003fdc <ethernetif_init+0x4c>)
 8003fa6:	480e      	ldr	r0, [pc, #56]	; (8003fe0 <ethernetif_init+0x50>)
 8003fa8:	f00c fa40 	bl	801042c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2273      	movs	r2, #115	; 0x73
 8003fb0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2274      	movs	r2, #116	; 0x74
 8003fb8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <ethernetif_init+0x54>)
 8003fc0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <ethernetif_init+0x58>)
 8003fc6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff fdc1 	bl	8003b50 <low_level_init>

  return ERR_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	08011868 	.word	0x08011868
 8003fdc:	08011884 	.word	0x08011884
 8003fe0:	08011894 	.word	0x08011894
 8003fe4:	0800e691 	.word	0x0800e691
 8003fe8:	08003cad 	.word	0x08003cad

08003fec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003ff0:	f7fc ffb6 	bl	8000f60 <HAL_GetTick>
 8003ff4:	4603      	mov	r3, r0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d05d      	beq.n	80040da <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800401e:	4b34      	ldr	r3, [pc, #208]	; (80040f0 <ethernetif_update_config+0xf4>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d03f      	beq.n	80040a6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004026:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800402a:	2100      	movs	r1, #0
 800402c:	4830      	ldr	r0, [pc, #192]	; (80040f0 <ethernetif_update_config+0xf4>)
 800402e:	f7fe f8e1 	bl	80021f4 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004032:	f7fc ff95 	bl	8000f60 <HAL_GetTick>
 8004036:	4603      	mov	r3, r0
 8004038:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800403a:	f107 0308 	add.w	r3, r7, #8
 800403e:	461a      	mov	r2, r3
 8004040:	2101      	movs	r1, #1
 8004042:	482b      	ldr	r0, [pc, #172]	; (80040f0 <ethernetif_update_config+0xf4>)
 8004044:	f7fe f86e 	bl	8002124 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004048:	f7fc ff8a 	bl	8000f60 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004056:	d828      	bhi.n	80040aa <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0eb      	beq.n	800403a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004062:	f107 0308 	add.w	r3, r7, #8
 8004066:	461a      	mov	r2, r3
 8004068:	211f      	movs	r1, #31
 800406a:	4821      	ldr	r0, [pc, #132]	; (80040f0 <ethernetif_update_config+0xf4>)
 800406c:	f7fe f85a 	bl	8002124 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <ethernetif_update_config+0xf4>)
 800407c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	e002      	b.n	800408a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <ethernetif_update_config+0xf4>)
 8004086:	2200      	movs	r2, #0
 8004088:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004094:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <ethernetif_update_config+0xf4>)
 8004096:	2200      	movs	r2, #0
 8004098:	609a      	str	r2, [r3, #8]
 800409a:	e016      	b.n	80040ca <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <ethernetif_update_config+0xf4>)
 800409e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	e011      	b.n	80040ca <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80040a6:	bf00      	nop
 80040a8:	e000      	b.n	80040ac <ethernetif_update_config+0xb0>
          goto error;
 80040aa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <ethernetif_update_config+0xf4>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <ethernetif_update_config+0xf4>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80040bc:	4313      	orrs	r3, r2
 80040be:	b29b      	uxth	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	2100      	movs	r1, #0
 80040c4:	480a      	ldr	r0, [pc, #40]	; (80040f0 <ethernetif_update_config+0xf4>)
 80040c6:	f7fe f895 	bl	80021f4 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80040ca:	2100      	movs	r1, #0
 80040cc:	4808      	ldr	r0, [pc, #32]	; (80040f0 <ethernetif_update_config+0xf4>)
 80040ce:	f7fe f955 	bl	800237c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80040d2:	4807      	ldr	r0, [pc, #28]	; (80040f0 <ethernetif_update_config+0xf4>)
 80040d4:	f7fe f8f4 	bl	80022c0 <HAL_ETH_Start>
 80040d8:	e002      	b.n	80040e0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80040da:	4805      	ldr	r0, [pc, #20]	; (80040f0 <ethernetif_update_config+0xf4>)
 80040dc:	f7fe f91f 	bl	800231e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f807 	bl	80040f4 <ethernetif_notify_conn_changed>
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20001bf0 	.word	0x20001bf0

080040f4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	88db      	ldrh	r3, [r3, #6]
 8004114:	3301      	adds	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	88db      	ldrh	r3, [r3, #6]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d105      	bne.n	8004130 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	88db      	ldrh	r3, [r3, #6]
 8004128:	3301      	adds	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	88db      	ldrh	r3, [r3, #6]
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	711a      	strb	r2, [r3, #4]
  rb->put++;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	3301      	adds	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	2bff      	cmp	r3, #255	; 0xff
 800416c:	d902      	bls.n	8004174 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	801a      	strh	r2, [r3, #0]
  }
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	885b      	ldrh	r3, [r3, #2]
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4413      	add	r3, r2
 8004192:	3304      	adds	r3, #4
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	2bff      	cmp	r3, #255	; 0xff
 80041b0:	d905      	bls.n	80041be <mqtt_ringbuf_advance_get_idx+0x1e>
 80041b2:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <mqtt_ringbuf_advance_get_idx+0x4c>)
 80041b4:	22cb      	movs	r2, #203	; 0xcb
 80041b6:	490e      	ldr	r1, [pc, #56]	; (80041f0 <mqtt_ringbuf_advance_get_idx+0x50>)
 80041b8:	480e      	ldr	r0, [pc, #56]	; (80041f4 <mqtt_ringbuf_advance_get_idx+0x54>)
 80041ba:	f00c f937 	bl	801042c <iprintf>

  rb->get += len;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	885a      	ldrh	r2, [r3, #2]
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	4413      	add	r3, r2
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	885b      	ldrh	r3, [r3, #2]
 80041d0:	2bff      	cmp	r3, #255	; 0xff
 80041d2:	d906      	bls.n	80041e2 <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	885b      	ldrh	r3, [r3, #2]
 80041d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	805a      	strh	r2, [r3, #2]
  }
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	080118bc 	.word	0x080118bc
 80041f0:	080118f4 	.word	0x080118f4
 80041f4:	08011934 	.word	0x08011934

080041f8 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	885b      	ldrh	r3, [r3, #2]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004214:	d303      	bcc.n	800421e <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800421c:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	b29b      	uxth	r3, r3
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff ffda 	bl	80041f8 <mqtt_ringbuf_len>
 8004244:	4603      	mov	r3, r0
 8004246:	461a      	mov	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	885b      	ldrh	r3, [r3, #2]
 800424c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004250:	429a      	cmp	r2, r3
 8004252:	da04      	bge.n	800425e <mqtt_output_send+0x2e>
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ffcf 	bl	80041f8 <mqtt_ringbuf_len>
 800425a:	4603      	mov	r3, r0
 800425c:	e004      	b.n	8004268 <mqtt_output_send+0x38>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	885b      	ldrh	r3, [r3, #2]
 8004262:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004266:	b29b      	uxth	r3, r3
 8004268:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004270:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <mqtt_output_send+0x54>
 8004278:	4b44      	ldr	r3, [pc, #272]	; (800438c <mqtt_output_send+0x15c>)
 800427a:	22f0      	movs	r2, #240	; 0xf0
 800427c:	4944      	ldr	r1, [pc, #272]	; (8004390 <mqtt_output_send+0x160>)
 800427e:	4845      	ldr	r0, [pc, #276]	; (8004394 <mqtt_output_send+0x164>)
 8004280:	f00c f8d4 	bl	801042c <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8004284:	89bb      	ldrh	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d07c      	beq.n	8004384 <mqtt_output_send+0x154>
 800428a:	897b      	ldrh	r3, [r7, #10]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d079      	beq.n	8004384 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8004290:	89ba      	ldrh	r2, [r7, #12]
 8004292:	897b      	ldrh	r3, [r7, #10]
 8004294:	429a      	cmp	r2, r3
 8004296:	d90d      	bls.n	80042b4 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8004298:	897b      	ldrh	r3, [r7, #10]
 800429a:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ffab 	bl	80041f8 <mqtt_ringbuf_len>
 80042a2:	4603      	mov	r3, r0
 80042a4:	461a      	mov	r2, r3
 80042a6:	897b      	ldrh	r3, [r7, #10]
 80042a8:	4293      	cmp	r3, r2
 80042aa:	bf34      	ite	cc
 80042ac:	2301      	movcc	r3, #1
 80042ae:	2300      	movcs	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff ff63 	bl	8004180 <mqtt_ringbuf_get_ptr>
 80042ba:	4601      	mov	r1, r0
 80042bc:	7bbb      	ldrb	r3, [r7, #14]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <mqtt_output_send+0x96>
 80042c2:	2303      	movs	r3, #3
 80042c4:	e000      	b.n	80042c8 <mqtt_output_send+0x98>
 80042c6:	2301      	movs	r3, #1
 80042c8:	89ba      	ldrh	r2, [r7, #12]
 80042ca:	6838      	ldr	r0, [r7, #0]
 80042cc:	f007 fce6 	bl	800bc9c <tcp_write>
 80042d0:	4603      	mov	r3, r0
 80042d2:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 80042d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d146      	bne.n	800436a <mqtt_output_send+0x13a>
 80042dc:	7bbb      	ldrb	r3, [r7, #14]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d043      	beq.n	800436a <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80042e2:	89bb      	ldrh	r3, [r7, #12]
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ff5a 	bl	80041a0 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80042f2:	461c      	mov	r4, r3
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff7f 	bl	80041f8 <mqtt_ringbuf_len>
 80042fa:	4603      	mov	r3, r0
 80042fc:	461a      	mov	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	885b      	ldrh	r3, [r3, #2]
 8004302:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004306:	429a      	cmp	r2, r3
 8004308:	da04      	bge.n	8004314 <mqtt_output_send+0xe4>
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ff74 	bl	80041f8 <mqtt_ringbuf_len>
 8004310:	4603      	mov	r3, r0
 8004312:	e003      	b.n	800431c <mqtt_output_send+0xec>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	885b      	ldrh	r3, [r3, #2]
 8004318:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800431c:	42a3      	cmp	r3, r4
 800431e:	dd03      	ble.n	8004328 <mqtt_output_send+0xf8>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004326:	e014      	b.n	8004352 <mqtt_output_send+0x122>
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ff65 	bl	80041f8 <mqtt_ringbuf_len>
 800432e:	4603      	mov	r3, r0
 8004330:	461a      	mov	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	885b      	ldrh	r3, [r3, #2]
 8004336:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800433a:	429a      	cmp	r2, r3
 800433c:	da04      	bge.n	8004348 <mqtt_output_send+0x118>
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff ff5a 	bl	80041f8 <mqtt_ringbuf_len>
 8004344:	4603      	mov	r3, r0
 8004346:	e004      	b.n	8004352 <mqtt_output_send+0x122>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	885b      	ldrh	r3, [r3, #2]
 800434c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004350:	b29b      	uxth	r3, r3
 8004352:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ff13 	bl	8004180 <mqtt_ringbuf_get_ptr>
 800435a:	4601      	mov	r1, r0
 800435c:	89ba      	ldrh	r2, [r7, #12]
 800435e:	2301      	movs	r3, #1
 8004360:	6838      	ldr	r0, [r7, #0]
 8004362:	f007 fc9b 	bl	800bc9c <tcp_write>
 8004366:	4603      	mov	r3, r0
 8004368:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800436a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8004372:	89bb      	ldrh	r3, [r7, #12]
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff ff12 	bl	80041a0 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 800437c:	6838      	ldr	r0, [r7, #0]
 800437e:	f008 fa79 	bl	800c874 <tcp_output>
 8004382:	e000      	b.n	8004386 <mqtt_output_send+0x156>
    return;
 8004384:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bd90      	pop	{r4, r7, pc}
 800438c:	080118bc 	.word	0x080118bc
 8004390:	0801195c 	.word	0x0801195c
 8004394:	08011934 	.word	0x08011934

08004398 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <mqtt_create_request+0x28>
 80043b2:	4b19      	ldr	r3, [pc, #100]	; (8004418 <mqtt_create_request+0x80>)
 80043b4:	f240 1223 	movw	r2, #291	; 0x123
 80043b8:	4918      	ldr	r1, [pc, #96]	; (800441c <mqtt_create_request+0x84>)
 80043ba:	4819      	ldr	r0, [pc, #100]	; (8004420 <mqtt_create_request+0x88>)
 80043bc:	f00c f836 	bl	801042c <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 80043c0:	2300      	movs	r3, #0
 80043c2:	74fb      	strb	r3, [r7, #19]
 80043c4:	e01f      	b.n	8004406 <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 80043c6:	7cfb      	ldrb	r3, [r7, #19]
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	68f9      	ldr	r1, [r7, #12]
 80043d6:	440b      	add	r3, r1
 80043d8:	429a      	cmp	r2, r3
 80043da:	d111      	bne.n	8004400 <mqtt_create_request+0x68>
      r = &r_objs[n];
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	6a3a      	ldr	r2, [r7, #32]
 80043f6:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	819a      	strh	r2, [r3, #12]
      break;
 80043fe:	e006      	b.n	800440e <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	3301      	adds	r3, #1
 8004404:	74fb      	strb	r3, [r7, #19]
 8004406:	7cfb      	ldrb	r3, [r7, #19]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	d8db      	bhi.n	80043c6 <mqtt_create_request+0x2e>
    }
  }
  return r;
 800440e:	697b      	ldr	r3, [r7, #20]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	080118bc 	.word	0x080118bc
 800441c:	0801197c 	.word	0x0801197c
 8004420:	08011934 	.word	0x08011934

08004424 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <mqtt_append_request+0x26>
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <mqtt_append_request+0x88>)
 800443e:	f240 123f 	movw	r2, #319	; 0x13f
 8004442:	491b      	ldr	r1, [pc, #108]	; (80044b0 <mqtt_append_request+0x8c>)
 8004444:	481b      	ldr	r0, [pc, #108]	; (80044b4 <mqtt_append_request+0x90>)
 8004446:	f00b fff1 	bl	801042c <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e00a      	b.n	8004468 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	89da      	ldrh	r2, [r3, #14]
 8004456:	8a7b      	ldrh	r3, [r7, #18]
 8004458:	4413      	add	r3, r2
 800445a:	b29b      	uxth	r3, r3
 800445c:	827b      	strh	r3, [r7, #18]
    head = iter;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f1      	bne.n	8004452 <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 800446e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004472:	2b1e      	cmp	r3, #30
 8004474:	dd06      	ble.n	8004484 <mqtt_append_request+0x60>
 8004476:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <mqtt_append_request+0x88>)
 8004478:	f240 1247 	movw	r2, #327	; 0x147
 800447c:	490e      	ldr	r1, [pc, #56]	; (80044b8 <mqtt_append_request+0x94>)
 800447e:	480d      	ldr	r0, [pc, #52]	; (80044b4 <mqtt_append_request+0x90>)
 8004480:	f00b ffd4 	bl	801042c <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8004484:	8a7b      	ldrh	r3, [r7, #18]
 8004486:	f1c3 031e 	rsb	r3, r3, #30
 800448a:	b29a      	uxth	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d103      	bne.n	800449e <mqtt_append_request+0x7a>
    *tail = r;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 800449c:	e002      	b.n	80044a4 <mqtt_append_request+0x80>
    head->next = r;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	080118bc 	.word	0x080118bc
 80044b0:	080119a0 	.word	0x080119a0
 80044b4:	08011934 	.word	0x08011934
 80044b8:	080119c4 	.word	0x080119c4

080044bc <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <mqtt_delete_request+0x14>
    r->next = r;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	601a      	str	r2, [r3, #0]
  }
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <mqtt_take_request+0x28>
 80044f6:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <mqtt_take_request+0x98>)
 80044f8:	f240 1267 	movw	r2, #359	; 0x167
 80044fc:	491e      	ldr	r1, [pc, #120]	; (8004578 <mqtt_take_request+0x9c>)
 80044fe:	481f      	ldr	r0, [pc, #124]	; (800457c <mqtt_take_request+0xa0>)
 8004500:	f00b ff94 	bl	801042c <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	e009      	b.n	8004520 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	899b      	ldrh	r3, [r3, #12]
 8004510:	887a      	ldrh	r2, [r7, #2]
 8004512:	429a      	cmp	r2, r3
 8004514:	d008      	beq.n	8004528 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f2      	bne.n	800450c <mqtt_take_request+0x30>
 8004526:	e000      	b.n	800452a <mqtt_take_request+0x4e>
      break;
 8004528:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01c      	beq.n	800456a <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <mqtt_take_request+0x64>
      *tail = iter->next;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e003      	b.n	8004548 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	89d9      	ldrh	r1, [r3, #14]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	89da      	ldrh	r2, [r3, #14]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	440a      	add	r2, r1
 8004560:	b292      	uxth	r2, r2
 8004562:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
  }
  return iter;
 800456a:	68fb      	ldr	r3, [r7, #12]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	080118bc 	.word	0x080118bc
 8004578:	080119fc 	.word	0x080119fc
 800457c:	08011934 	.word	0x08011934

08004580 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <mqtt_request_time_elapsed+0x20>
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <mqtt_request_time_elapsed+0x98>)
 8004594:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8004598:	4920      	ldr	r1, [pc, #128]	; (800461c <mqtt_request_time_elapsed+0x9c>)
 800459a:	4821      	ldr	r0, [pc, #132]	; (8004620 <mqtt_request_time_elapsed+0xa0>)
 800459c:	f00b ff46 	bl	801042c <iprintf>
  r = *tail;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 80045a6:	e02c      	b.n	8004602 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	89db      	ldrh	r3, [r3, #14]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d31c      	bcc.n	80045ee <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	89db      	ldrh	r3, [r3, #14]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	6892      	ldr	r2, [r2, #8]
 80045d8:	f06f 0102 	mvn.w	r1, #2
 80045dc:	4610      	mov	r0, r2
 80045de:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff ff6b 	bl	80044bc <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e009      	b.n	8004602 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	89da      	ldrh	r2, [r3, #14]
 80045f2:	78fb      	ldrb	r3, [r7, #3]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	81da      	strh	r2, [r3, #14]
      t = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <mqtt_request_time_elapsed+0x8e>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1cc      	bne.n	80045a8 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	080118bc 	.word	0x080118bc
 800461c:	08011a1c 	.word	0x08011a1c
 8004620:	08011934 	.word	0x08011934

08004624 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <mqtt_clear_requests+0x1c>
 8004632:	4b0e      	ldr	r3, [pc, #56]	; (800466c <mqtt_clear_requests+0x48>)
 8004634:	f240 12a7 	movw	r2, #423	; 0x1a7
 8004638:	490d      	ldr	r1, [pc, #52]	; (8004670 <mqtt_clear_requests+0x4c>)
 800463a:	480e      	ldr	r0, [pc, #56]	; (8004674 <mqtt_clear_requests+0x50>)
 800463c:	f00b fef6 	bl	801042c <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e007      	b.n	8004658 <mqtt_clear_requests+0x34>
    next = iter->next;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff ff34 	bl	80044bc <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f4      	bne.n	8004648 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	080118bc 	.word	0x080118bc
 8004670:	08011a44 	.word	0x08011a44
 8004674:	08011934 	.word	0x08011934

08004678 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <mqtt_init_requests+0x1e>
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <mqtt_init_requests+0x4c>)
 800468a:	f240 12b7 	movw	r2, #439	; 0x1b7
 800468e:	490e      	ldr	r1, [pc, #56]	; (80046c8 <mqtt_init_requests+0x50>)
 8004690:	480e      	ldr	r0, [pc, #56]	; (80046cc <mqtt_init_requests+0x54>)
 8004692:	f00b fecb 	bl	801042c <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8004696:	2300      	movs	r3, #0
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	e00b      	b.n	80046b4 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	011a      	lsls	r2, r3, #4
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	440b      	add	r3, r1
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	440a      	add	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	3301      	adds	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d8ef      	bhi.n	800469c <mqtt_init_requests+0x24>
  }
}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	080118bc 	.word	0x080118bc
 80046c8:	08011a68 	.word	0x08011a68
 80046cc:	08011934 	.word	0x08011934

080046d0 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	4619      	mov	r1, r3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff fd2d 	bl	8004140 <mqtt_ringbuf_put>
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	460b      	mov	r3, r1
 80046f8:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 80046fa:	887b      	ldrh	r3, [r7, #2]
 80046fc:	0a1b      	lsrs	r3, r3, #8
 80046fe:	b29b      	uxth	r3, r3
 8004700:	b2db      	uxtb	r3, r3
 8004702:	4619      	mov	r1, r3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff fd1b 	bl	8004140 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 800470a:	887b      	ldrh	r3, [r7, #2]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fd15 	bl	8004140 <mqtt_ringbuf_put>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b086      	sub	sp, #24
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	4613      	mov	r3, r2
 800472a:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 800472c:	2300      	movs	r3, #0
 800472e:	82fb      	strh	r3, [r7, #22]
 8004730:	e00a      	b.n	8004748 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8004732:	8afb      	ldrh	r3, [r7, #22]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	4413      	add	r3, r2
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	4619      	mov	r1, r3
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7ff fcff 	bl	8004140 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8004742:	8afb      	ldrh	r3, [r7, #22]
 8004744:	3301      	adds	r3, #1
 8004746:	82fb      	strh	r3, [r7, #22]
 8004748:	8afa      	ldrh	r2, [r7, #22]
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	429a      	cmp	r2, r3
 800474e:	d3f0      	bcc.n	8004732 <mqtt_output_append_buf+0x14>
  }
}
 8004750:	bf00      	nop
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	b29b      	uxth	r3, r3
 800476c:	b2db      	uxtb	r3, r3
 800476e:	4619      	mov	r1, r3
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff fce5 	bl	8004140 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	4619      	mov	r1, r3
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fcdf 	bl	8004140 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8004782:	2300      	movs	r3, #0
 8004784:	82fb      	strh	r3, [r7, #22]
 8004786:	e00a      	b.n	800479e <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8004788:	8afb      	ldrh	r3, [r7, #22]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	4413      	add	r3, r2
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	4619      	mov	r1, r3
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff fcd4 	bl	8004140 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8004798:	8afb      	ldrh	r3, [r7, #22]
 800479a:	3301      	adds	r3, #1
 800479c:	82fb      	strh	r3, [r7, #22]
 800479e:	8afa      	ldrh	r2, [r7, #22]
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d3f0      	bcc.n	8004788 <mqtt_output_append_string+0x30>
  }
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	4608      	mov	r0, r1
 80047b8:	4611      	mov	r1, r2
 80047ba:	461a      	mov	r2, r3
 80047bc:	4603      	mov	r3, r0
 80047be:	70fb      	strb	r3, [r7, #3]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70bb      	strb	r3, [r7, #2]
 80047c4:	4613      	mov	r3, r2
 80047c6:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	b25a      	sxtb	r2, r3
 80047ce:	78bb      	ldrb	r3, [r7, #2]
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	b25b      	sxtb	r3, r3
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	b25b      	sxtb	r3, r3
 80047da:	4313      	orrs	r3, r2
 80047dc:	b25a      	sxtb	r2, r3
 80047de:	787b      	ldrb	r3, [r7, #1]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	b25b      	sxtb	r3, r3
 80047e4:	f003 0306 	and.w	r3, r3, #6
 80047e8:	b25b      	sxtb	r3, r3
 80047ea:	4313      	orrs	r3, r2
 80047ec:	b25a      	sxtb	r2, r3
 80047ee:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	b25b      	sxtb	r3, r3
 80047f8:	4313      	orrs	r3, r2
 80047fa:	b25b      	sxtb	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff65 	bl	80046d0 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8004806:	8abb      	ldrh	r3, [r7, #20]
 8004808:	b25b      	sxtb	r3, r3
 800480a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800480e:	b25b      	sxtb	r3, r3
 8004810:	8aba      	ldrh	r2, [r7, #20]
 8004812:	2a7f      	cmp	r2, #127	; 0x7f
 8004814:	d902      	bls.n	800481c <mqtt_output_append_fixed_header+0x6e>
 8004816:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800481a:	e000      	b.n	800481e <mqtt_output_append_fixed_header+0x70>
 800481c:	2200      	movs	r2, #0
 800481e:	4313      	orrs	r3, r2
 8004820:	b25b      	sxtb	r3, r3
 8004822:	b2db      	uxtb	r3, r3
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff ff52 	bl	80046d0 <mqtt_output_append_u8>
    r_length >>= 7;
 800482c:	8abb      	ldrh	r3, [r7, #20]
 800482e:	09db      	lsrs	r3, r3, #7
 8004830:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8004832:	8abb      	ldrh	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e6      	bne.n	8004806 <mqtt_output_append_fixed_header+0x58>
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 800484c:	887b      	ldrh	r3, [r7, #2]
 800484e:	3301      	adds	r3, #1
 8004850:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <mqtt_output_check_space+0x26>
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <mqtt_output_check_space+0x58>)
 800485a:	f240 2207 	movw	r2, #519	; 0x207
 800485e:	490f      	ldr	r1, [pc, #60]	; (800489c <mqtt_output_check_space+0x5c>)
 8004860:	480f      	ldr	r0, [pc, #60]	; (80048a0 <mqtt_output_check_space+0x60>)
 8004862:	f00b fde3 	bl	801042c <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8004866:	89fb      	ldrh	r3, [r7, #14]
 8004868:	3301      	adds	r3, #1
 800486a:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 800486c:	887b      	ldrh	r3, [r7, #2]
 800486e:	09db      	lsrs	r3, r3, #7
 8004870:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8004872:	887b      	ldrh	r3, [r7, #2]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f6      	bne.n	8004866 <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 8004878:	89fc      	ldrh	r4, [r7, #14]
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fcbc 	bl	80041f8 <mqtt_ringbuf_len>
 8004880:	4603      	mov	r3, r0
 8004882:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004886:	429c      	cmp	r4, r3
 8004888:	bfd4      	ite	le
 800488a:	2301      	movle	r3, #1
 800488c:	2300      	movgt	r3, #0
 800488e:	b2db      	uxtb	r3, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	bd90      	pop	{r4, r7, pc}
 8004898:	080118bc 	.word	0x080118bc
 800489c:	08011a8c 	.word	0x08011a8c
 80048a0:	08011934 	.word	0x08011934

080048a4 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <mqtt_close+0x20>
 80048b6:	4b27      	ldr	r3, [pc, #156]	; (8004954 <mqtt_close+0xb0>)
 80048b8:	f240 221b 	movw	r2, #539	; 0x21b
 80048bc:	4926      	ldr	r1, [pc, #152]	; (8004958 <mqtt_close+0xb4>)
 80048be:	4827      	ldr	r0, [pc, #156]	; (800495c <mqtt_close+0xb8>)
 80048c0:	f00b fdb4 	bl	801042c <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d024      	beq.n	8004916 <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f004 fad0 	bl	8008e78 <tcp_recv>
    altcp_err(client->conn,  NULL);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f004 fb0e 	bl	8008f00 <tcp_err>
    altcp_sent(client->conn, NULL);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f004 fae6 	bl	8008ebc <tcp_sent>
    res = altcp_close(client->conn);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f003 f8eb 	bl	8007ad0 <tcp_close>
 80048fa:	4603      	mov	r3, r0
 80048fc:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 80048fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d004      	beq.n	8004910 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	4618      	mov	r0, r3
 800490c:	f003 f9ca 	bl	8007ca4 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3318      	adds	r3, #24
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fe82 	bl	8004624 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	480f      	ldr	r0, [pc, #60]	; (8004960 <mqtt_close+0xbc>)
 8004924:	f009 f832 	bl	800d98c <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	7a9b      	ldrb	r3, [r3, #10]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d006      	beq.n	800494c <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6911      	ldr	r1, [r2, #16]
 8004946:	887a      	ldrh	r2, [r7, #2]
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	4798      	blx	r3
    }
  }
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	080118bc 	.word	0x080118bc
 8004958:	08011ab0 	.word	0x08011ab0
 800495c:	08011934 	.word	0x08011934
 8004960:	08004965 	.word	0x08004965

08004964 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af02      	add	r7, sp, #8
 800496a:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <mqtt_cyclic_timer+0x24>
 800497a:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <mqtt_cyclic_timer+0x120>)
 800497c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8004980:	4941      	ldr	r1, [pc, #260]	; (8004a88 <mqtt_cyclic_timer+0x124>)
 8004982:	4842      	ldr	r0, [pc, #264]	; (8004a8c <mqtt_cyclic_timer+0x128>)
 8004984:	f00b fd52 	bl	801042c <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	7a9b      	ldrb	r3, [r3, #10]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d115      	bne.n	80049bc <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	3301      	adds	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	2b63      	cmp	r3, #99	; 0x63
 80049aa:	dd5e      	ble.n	8004a6a <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80049ac:	f240 1101 	movw	r1, #257	; 0x101
 80049b0:	68b8      	ldr	r0, [r7, #8]
 80049b2:	f7ff ff77 	bl	80048a4 <mqtt_close>
      restart_timer = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
 80049ba:	e056      	b.n	8004a6a <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	7a9b      	ldrb	r3, [r3, #10]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d150      	bne.n	8004a66 <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	3318      	adds	r3, #24
 80049c8:	2105      	movs	r1, #5
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fdd8 	bl	8004580 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	885b      	ldrh	r3, [r3, #2]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d048      	beq.n	8004a6a <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	889b      	ldrh	r3, [r3, #4]
 80049dc:	3301      	adds	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	889b      	ldrh	r3, [r3, #4]
 80049e8:	461a      	mov	r2, r3
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	441a      	add	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	885b      	ldrh	r3, [r3, #2]
 80049f4:	4619      	mov	r1, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	885b      	ldrh	r3, [r3, #2]
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	440b      	add	r3, r1
 8004a00:	429a      	cmp	r2, r3
 8004a02:	dd06      	ble.n	8004a12 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8004a04:	f240 1101 	movw	r1, #257	; 0x101
 8004a08:	68b8      	ldr	r0, [r7, #8]
 8004a0a:	f7ff ff4b 	bl	80048a4 <mqtt_close>
        restart_timer = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	8852      	ldrh	r2, [r2, #2]
 8004a22:	4293      	cmp	r3, r2
 8004a24:	db18      	blt.n	8004a58 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	33ec      	adds	r3, #236	; 0xec
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff ff07 	bl	8004840 <mqtt_output_check_space>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d018      	beq.n	8004a6a <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8004a3e:	2300      	movs	r3, #0
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	2300      	movs	r3, #0
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	2300      	movs	r3, #0
 8004a48:	2200      	movs	r2, #0
 8004a4a:	210c      	movs	r1, #12
 8004a4c:	f7ff feaf 	bl	80047ae <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	801a      	strh	r2, [r3, #0]
 8004a56:	e008      	b.n	8004a6a <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	801a      	strh	r2, [r3, #0]
 8004a64:	e001      	b.n	8004a6a <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	4907      	ldr	r1, [pc, #28]	; (8004a90 <mqtt_cyclic_timer+0x12c>)
 8004a74:	f241 3088 	movw	r0, #5000	; 0x1388
 8004a78:	f008 ff62 	bl	800d940 <sys_timeout>
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	080118bc 	.word	0x080118bc
 8004a88:	08011acc 	.word	0x08011acc
 8004a8c:	08011934 	.word	0x08011934
 8004a90:	08004965 	.word	0x08004965

08004a94 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	4608      	mov	r0, r1
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	70fb      	strb	r3, [r7, #3]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	803b      	strh	r3, [r7, #0]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	33ec      	adds	r3, #236	; 0xec
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fec1 	bl	8004840 <mqtt_output_check_space>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01d      	beq.n	8004b00 <pub_ack_rec_rel_response+0x6c>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8004aca:	78ba      	ldrb	r2, [r7, #2]
 8004acc:	78f9      	ldrb	r1, [r7, #3]
 8004ace:	2302      	movs	r3, #2
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f7ff fe68 	bl	80047ae <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	33ec      	adds	r3, #236	; 0xec
 8004ae2:	883a      	ldrh	r2, [r7, #0]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fe01 	bl	80046ee <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f7ff fb99 	bl	8004230 <mqtt_output_send>
 8004afe:	e001      	b.n	8004b04 <pub_ack_rec_rel_response+0x70>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8004b00:	23ff      	movs	r3, #255	; 0xff
 8004b02:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8004b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00c      	beq.n	8004b3e <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6890      	ldr	r0, [r2, #8]
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	2a02      	cmp	r2, #2
 8004b30:	d801      	bhi.n	8004b36 <mqtt_incomming_suback+0x26>
 8004b32:	2200      	movs	r2, #0
 8004b34:	e001      	b.n	8004b3a <mqtt_incomming_suback+0x2a>
 8004b36:	f06f 020c 	mvn.w	r2, #12
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4798      	blx	r3
  }
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b08f      	sub	sp, #60	; 0x3c
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	460b      	mov	r3, r1
 8004b54:	72fb      	strb	r3, [r7, #11]
 8004b56:	4613      	mov	r3, r2
 8004b58:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8004b64:	7afb      	ldrb	r3, [r7, #11]
 8004b66:	4413      	add	r3, r2
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 8004b6a:	7afb      	ldrb	r3, [r7, #11]
 8004b6c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b86:	2b7f      	cmp	r3, #127	; 0x7f
 8004b88:	d906      	bls.n	8004b98 <mqtt_message_received+0x50>
 8004b8a:	4b9c      	ldr	r3, [pc, #624]	; (8004dfc <mqtt_message_received+0x2b4>)
 8004b8c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8004b90:	499b      	ldr	r1, [pc, #620]	; (8004e00 <mqtt_message_received+0x2b8>)
 8004b92:	489c      	ldr	r0, [pc, #624]	; (8004e04 <mqtt_message_received+0x2bc>)
 8004b94:	f00b fc4a 	bl	801042c <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8004b98:	7afa      	ldrb	r2, [r7, #11]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d906      	bls.n	8004bb0 <mqtt_message_received+0x68>
 8004ba2:	4b96      	ldr	r3, [pc, #600]	; (8004dfc <mqtt_message_received+0x2b4>)
 8004ba4:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8004ba8:	4997      	ldr	r1, [pc, #604]	; (8004e08 <mqtt_message_received+0x2c0>)
 8004baa:	4896      	ldr	r0, [pc, #600]	; (8004e04 <mqtt_message_received+0x2bc>)
 8004bac:	f00b fc3e 	bl	801042c <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8004bb0:	7afa      	ldrb	r2, [r7, #11]
 8004bb2:	893b      	ldrh	r3, [r7, #8]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	2b80      	cmp	r3, #128	; 0x80
 8004bb8:	dd09      	ble.n	8004bce <mqtt_message_received+0x86>
 8004bba:	4b90      	ldr	r3, [pc, #576]	; (8004dfc <mqtt_message_received+0x2b4>)
 8004bbc:	f240 22ae 	movw	r2, #686	; 0x2ae
 8004bc0:	4992      	ldr	r1, [pc, #584]	; (8004e0c <mqtt_message_received+0x2c4>)
 8004bc2:	4890      	ldr	r0, [pc, #576]	; (8004e04 <mqtt_message_received+0x2bc>)
 8004bc4:	f00b fc32 	bl	801042c <iprintf>
 8004bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bcc:	e16b      	b.n	8004ea6 <mqtt_message_received+0x35e>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8004bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d123      	bne.n	8004c1e <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	7a9b      	ldrb	r3, [r3, #10]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	f040 8150 	bne.w	8004e80 <mqtt_message_received+0x338>
      if (length < 2) {
 8004be0:	893b      	ldrh	r3, [r7, #8]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	f240 814e 	bls.w	8004e84 <mqtt_message_received+0x33c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	3301      	adds	r3, #1
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8004bf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 8144 	bne.w	8004e80 <mqtt_message_received+0x338>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2203      	movs	r2, #3
 8004c02:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8139 	beq.w	8004e80 <mqtt_message_received+0x338>
          client->connect_cb(client, client->connect_arg, res);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	6911      	ldr	r1, [r2, #16]
 8004c16:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	4798      	blx	r3
 8004c1c:	e130      	b.n	8004e80 <mqtt_message_received+0x338>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8004c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c22:	2b0d      	cmp	r3, #13
 8004c24:	f000 812c 	beq.w	8004e80 <mqtt_message_received+0x338>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8004c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	f040 80c0 	bne.w	8004db2 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 8004c36:	893b      	ldrh	r3, [r7, #8]
 8004c38:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004c40:	105b      	asrs	r3, r3, #1
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	d87d      	bhi.n	8004d4e <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8004c52:	7ffb      	ldrb	r3, [r7, #31]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <mqtt_message_received+0x114>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e000      	b.n	8004c5e <mqtt_message_received+0x116>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8004c60:	893a      	ldrh	r2, [r7, #8]
 8004c62:	8bbb      	ldrh	r3, [r7, #28]
 8004c64:	3302      	adds	r3, #2
 8004c66:	429a      	cmp	r2, r3
 8004c68:	f2c0 810e 	blt.w	8004e88 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8004c72:	8b7b      	ldrh	r3, [r7, #26]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	4413      	add	r3, r2
 8004c82:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8004c84:	8b7a      	ldrh	r2, [r7, #26]
 8004c86:	8939      	ldrh	r1, [r7, #8]
 8004c88:	8bbb      	ldrh	r3, [r7, #28]
 8004c8a:	3302      	adds	r3, #2
 8004c8c:	1acb      	subs	r3, r1, r3
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	f300 80fc 	bgt.w	8004e8c <mqtt_message_received+0x344>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8004c94:	8b7a      	ldrh	r2, [r7, #26]
 8004c96:	8bbb      	ldrh	r3, [r7, #28]
 8004c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c9a:	1acb      	subs	r3, r1, r3
 8004c9c:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	f200 80f4 	bhi.w	8004e8c <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	3302      	adds	r3, #2
 8004ca8:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 8004caa:	8b7b      	ldrh	r3, [r7, #26]
 8004cac:	3302      	adds	r3, #2
 8004cae:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8004cb0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cb2:	7ffa      	ldrb	r2, [r7, #31]
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	d001      	beq.n	8004cbc <mqtt_message_received+0x174>
 8004cb8:	2202      	movs	r2, #2
 8004cba:	e000      	b.n	8004cbe <mqtt_message_received+0x176>
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	f0c0 80e4 	bcc.w	8004e90 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8004cc8:	7ffb      	ldrb	r3, [r7, #31]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01a      	beq.n	8004d04 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 8004cce:	893a      	ldrh	r2, [r7, #8]
 8004cd0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	f0c0 80dd 	bcc.w	8004e94 <mqtt_message_received+0x34c>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8004cda:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cde:	4413      	add	r3, r2
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cea:	3301      	adds	r3, #1
 8004cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cee:	440b      	add	r3, r1
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8004cfc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cfe:	3302      	adds	r3, #2
 8004d00:	863b      	strh	r3, [r7, #48]	; 0x30
 8004d02:	e002      	b.n	8004d0a <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8004d0a:	8b7b      	ldrh	r3, [r7, #26]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4413      	add	r3, r2
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8004d14:	8b7b      	ldrh	r3, [r7, #26]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4413      	add	r3, r2
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8004d1e:	893a      	ldrh	r2, [r7, #8]
 8004d20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 8004d26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d28:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8004d3a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	440a      	add	r2, r1
 8004d40:	6979      	ldr	r1, [r7, #20]
 8004d42:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8004d44:	8b7b      	ldrh	r3, [r7, #26]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4413      	add	r3, r2
 8004d4a:	7cfa      	ldrb	r2, [r7, #19]
 8004d4c:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8004d4e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d103      	bne.n	8004d5c <mqtt_message_received+0x214>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 8092 	bne.w	8004e80 <mqtt_message_received+0x338>
      if (length < (size_t)(payload_offset + payload_length)) {
 8004d5c:	893b      	ldrh	r3, [r7, #8]
 8004d5e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004d60:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004d62:	440a      	add	r2, r1
 8004d64:	4293      	cmp	r3, r2
 8004d66:	f0c0 8097 	bcc.w	8004e98 <mqtt_message_received+0x350>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8004d72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d76:	18d1      	adds	r1, r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf0c      	ite	eq
 8004d7e:	2301      	moveq	r3, #1
 8004d80:	2300      	movne	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004d86:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d178      	bne.n	8004e80 <mqtt_message_received+0x338>
 8004d8e:	7ffb      	ldrb	r3, [r7, #31]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d075      	beq.n	8004e80 <mqtt_message_received+0x338>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8004d94:	7ffb      	ldrb	r3, [r7, #31]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <mqtt_message_received+0x256>
 8004d9a:	2304      	movs	r3, #4
 8004d9c:	e000      	b.n	8004da0 <mqtt_message_received+0x258>
 8004d9e:	2305      	movs	r3, #5
 8004da0:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	891a      	ldrh	r2, [r3, #8]
 8004da6:	7cb9      	ldrb	r1, [r7, #18]
 8004da8:	2300      	movs	r3, #0
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff fe72 	bl	8004a94 <pub_ack_rec_rel_response>
 8004db0:	e066      	b.n	8004e80 <mqtt_message_received+0x338>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 8004dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d065      	beq.n	8004e9c <mqtt_message_received+0x354>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8004dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dd4:	2b05      	cmp	r3, #5
 8004dd6:	d106      	bne.n	8004de6 <mqtt_message_received+0x29e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8004dd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004dda:	2301      	movs	r3, #1
 8004ddc:	2106      	movs	r1, #6
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7ff fe58 	bl	8004a94 <pub_ack_rec_rel_response>
 8004de4:	e04c      	b.n	8004e80 <mqtt_message_received+0x338>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8004de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dea:	2b06      	cmp	r3, #6
 8004dec:	d110      	bne.n	8004e10 <mqtt_message_received+0x2c8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8004dee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004df0:	2300      	movs	r3, #0
 8004df2:	2107      	movs	r1, #7
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7ff fe4d 	bl	8004a94 <pub_ack_rec_rel_response>
 8004dfa:	e041      	b.n	8004e80 <mqtt_message_received+0x338>
 8004dfc:	080118bc 	.word	0x080118bc
 8004e00:	08011af0 	.word	0x08011af0
 8004e04:	08011934 	.word	0x08011934
 8004e08:	08011b20 	.word	0x08011b20
 8004e0c:	08011b44 	.word	0x08011b44

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8004e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e14:	2b09      	cmp	r3, #9
 8004e16:	d00b      	beq.n	8004e30 <mqtt_message_received+0x2e8>
 8004e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e1c:	2b0b      	cmp	r3, #11
 8004e1e:	d007      	beq.n	8004e30 <mqtt_message_received+0x2e8>
 8004e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e24:	2b07      	cmp	r3, #7
 8004e26:	d003      	beq.n	8004e30 <mqtt_message_received+0x2e8>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8004e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d12d      	bne.n	8004e8c <mqtt_message_received+0x344>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3318      	adds	r3, #24
 8004e34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e36:	4611      	mov	r1, r2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff fb4f 	bl	80044dc <mqtt_take_request>
 8004e3e:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01c      	beq.n	8004e80 <mqtt_message_received+0x338>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8004e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e4a:	2b09      	cmp	r3, #9
 8004e4c:	d10a      	bne.n	8004e64 <mqtt_message_received+0x31c>
          if (length < 3) {
 8004e4e:	893b      	ldrh	r3, [r7, #8]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d925      	bls.n	8004ea0 <mqtt_message_received+0x358>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	3302      	adds	r3, #2
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6a38      	ldr	r0, [r7, #32]
 8004e5e:	f7ff fe57 	bl	8004b10 <mqtt_incomming_suback>
 8004e62:	e00a      	b.n	8004e7a <mqtt_message_received+0x332>
          }
        } else if (r->cb != NULL) {
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d006      	beq.n	8004e7a <mqtt_message_received+0x332>
          r->cb(r->arg, ERR_OK);
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	6a3a      	ldr	r2, [r7, #32]
 8004e72:	6892      	ldr	r2, [r2, #8]
 8004e74:	2100      	movs	r1, #0
 8004e76:	4610      	mov	r0, r2
 8004e78:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8004e7a:	6a38      	ldr	r0, [r7, #32]
 8004e7c:	f7ff fb1e 	bl	80044bc <mqtt_delete_request>
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8004e80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e82:	e010      	b.n	8004ea6 <mqtt_message_received+0x35e>
        goto out_disconnect;
 8004e84:	bf00      	nop
 8004e86:	e00c      	b.n	8004ea2 <mqtt_message_received+0x35a>
        goto out_disconnect;
 8004e88:	bf00      	nop
 8004e8a:	e00a      	b.n	8004ea2 <mqtt_message_received+0x35a>
out_disconnect:
 8004e8c:	bf00      	nop
 8004e8e:	e008      	b.n	8004ea2 <mqtt_message_received+0x35a>
        goto out_disconnect;
 8004e90:	bf00      	nop
 8004e92:	e006      	b.n	8004ea2 <mqtt_message_received+0x35a>
          goto out_disconnect;
 8004e94:	bf00      	nop
 8004e96:	e004      	b.n	8004ea2 <mqtt_message_received+0x35a>
        goto out_disconnect;
 8004e98:	bf00      	nop
 8004e9a:	e002      	b.n	8004ea2 <mqtt_message_received+0x35a>
      goto out_disconnect;
 8004e9c:	bf00      	nop
 8004e9e:	e000      	b.n	8004ea2 <mqtt_message_received+0x35a>
            goto out_disconnect;
 8004ea0:	bf00      	nop
  return MQTT_CONNECT_DISCONNECTED;
 8004ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	373c      	adds	r7, #60	; 0x3c
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd90      	pop	{r4, r7, pc}
 8004eae:	bf00      	nop

08004eb0 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8004eca:	e0bc      	b.n	8005046 <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d903      	bls.n	8004eda <mqtt_parse_incoming+0x2a>
 8004ed2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	da4d      	bge.n	8004f76 <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 8004eda:	7dfa      	ldrb	r2, [r7, #23]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d206      	bcs.n	8004ef2 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 8004ee4:	7dfb      	ldrb	r3, [r7, #23]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004eee:	75bb      	strb	r3, [r7, #22]
 8004ef0:	e012      	b.n	8004f18 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 8004ef2:	8bfb      	ldrh	r3, [r7, #30]
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	83fa      	strh	r2, [r7, #30]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6838      	ldr	r0, [r7, #0]
 8004efc:	f002 fba6 	bl	800764c <pbuf_get_at>
 8004f00:	4603      	mov	r3, r0
 8004f02:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f08:	1c59      	adds	r1, r3, #1
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6691      	str	r1, [r2, #104]	; 0x68
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4413      	add	r3, r2
 8004f12:	7dba      	ldrb	r2, [r7, #22]
 8004f14:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	f240 8090 	bls.w	8005046 <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8004f26:	7dbb      	ldrb	r3, [r7, #22]
 8004f28:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
 8004f2e:	1e9a      	subs	r2, r3, #2
 8004f30:	4613      	mov	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8004f40:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	db7e      	blt.n	8005046 <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8004f4e:	7df9      	ldrb	r1, [r7, #23]
 8004f50:	2300      	movs	r3, #0
 8004f52:	2200      	movs	r2, #0
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff fdf7 	bl	8004b48 <mqtt_message_received>
            client->msg_idx = 0;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	75fb      	strb	r3, [r7, #23]
 8004f64:	e06f      	b.n	8005046 <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8004f66:	7dfa      	ldrb	r2, [r7, #23]
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	441a      	add	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8004f74:	e067      	b.n	8005046 <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	7dfa      	ldrb	r2, [r7, #23]
 8004f80:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 8004f84:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f88:	fb02 f201 	mul.w	r2, r2, r1
 8004f8c:	1a9b      	subs	r3, r3, r2
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	4413      	add	r3, r2
 8004f96:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	891a      	ldrh	r2, [r3, #8]
 8004f9c:	8bfb      	ldrh	r3, [r7, #30]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d905      	bls.n	8004fb6 <mqtt_parse_incoming+0x106>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	891a      	ldrh	r2, [r3, #8]
 8004fae:	8bfb      	ldrh	r3, [r7, #30]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	e001      	b.n	8004fba <mqtt_parse_incoming+0x10a>
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8004fbc:	8a7b      	ldrh	r3, [r7, #18]
 8004fbe:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004fc2:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8004fc4:	8aba      	ldrh	r2, [r7, #20]
 8004fc6:	8a3b      	ldrh	r3, [r7, #16]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d901      	bls.n	8004fd0 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8004fcc:	8a3b      	ldrh	r3, [r7, #16]
 8004fce:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8004fd6:	8a7b      	ldrh	r3, [r7, #18]
 8004fd8:	18d1      	adds	r1, r2, r3
 8004fda:	8bfb      	ldrh	r3, [r7, #30]
 8004fdc:	8aba      	ldrh	r2, [r7, #20]
 8004fde:	6838      	ldr	r0, [r7, #0]
 8004fe0:	f002 fa66 	bl	80074b0 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004fe8:	8abb      	ldrh	r3, [r7, #20]
 8004fea:	441a      	add	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 8004ff0:	8bfa      	ldrh	r2, [r7, #30]
 8004ff2:	8abb      	ldrh	r3, [r7, #20]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8004ff8:	8abb      	ldrh	r3, [r7, #20]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <mqtt_parse_incoming+0x15e>
 8005006:	8aba      	ldrh	r2, [r7, #20]
 8005008:	8a3b      	ldrh	r3, [r7, #16]
 800500a:	429a      	cmp	r2, r3
 800500c:	d11b      	bne.n	8005046 <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800500e:	8a7a      	ldrh	r2, [r7, #18]
 8005010:	8abb      	ldrh	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	b29a      	uxth	r2, r3
 8005016:	7dfb      	ldrb	r3, [r7, #23]
 8005018:	b29b      	uxth	r3, r3
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	b29a      	uxth	r2, r3
 800501e:	7df9      	ldrb	r1, [r7, #23]
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff fd90 	bl	8004b48 <mqtt_message_received>
 8005028:	4603      	mov	r3, r0
 800502a:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800502c:	89fb      	ldrh	r3, [r7, #14]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <mqtt_parse_incoming+0x186>
          return res;
 8005032:	89fb      	ldrh	r3, [r7, #14]
 8005034:	e00e      	b.n	8005054 <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	891b      	ldrh	r3, [r3, #8]
 800504a:	8bfa      	ldrh	r2, [r7, #30]
 800504c:	429a      	cmp	r2, r3
 800504e:	f4ff af3d 	bcc.w	8004ecc <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <mqtt_tcp_recv_cb+0x26>
 8005074:	4b24      	ldr	r3, [pc, #144]	; (8005108 <mqtt_tcp_recv_cb+0xac>)
 8005076:	f240 32a7 	movw	r2, #935	; 0x3a7
 800507a:	4924      	ldr	r1, [pc, #144]	; (800510c <mqtt_tcp_recv_cb+0xb0>)
 800507c:	4824      	ldr	r0, [pc, #144]	; (8005110 <mqtt_tcp_recv_cb+0xb4>)
 800507e:	f00b f9d5 	bl	801042c <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	d006      	beq.n	800509a <mqtt_tcp_recv_cb+0x3e>
 800508c:	4b1e      	ldr	r3, [pc, #120]	; (8005108 <mqtt_tcp_recv_cb+0xac>)
 800508e:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8005092:	4920      	ldr	r1, [pc, #128]	; (8005114 <mqtt_tcp_recv_cb+0xb8>)
 8005094:	481e      	ldr	r0, [pc, #120]	; (8005110 <mqtt_tcp_recv_cb+0xb4>)
 8005096:	f00b f9c9 	bl	801042c <iprintf>

  if (p == NULL) {
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d105      	bne.n	80050ac <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80050a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050a4:	6978      	ldr	r0, [r7, #20]
 80050a6:	f7ff fbfd 	bl	80048a4 <mqtt_close>
 80050aa:	e027      	b.n	80050fc <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 80050ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f002 f811 	bl	80070dc <pbuf_free>
      return err;
 80050ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050be:	e01e      	b.n	80050fe <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	891b      	ldrh	r3, [r3, #8]
 80050c4:	4619      	mov	r1, r3
 80050c6:	68b8      	ldr	r0, [r7, #8]
 80050c8:	f002 feea 	bl	8007ea0 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	6978      	ldr	r0, [r7, #20]
 80050d0:	f7ff feee 	bl	8004eb0 <mqtt_parse_incoming>
 80050d4:	4603      	mov	r3, r0
 80050d6:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f001 ffff 	bl	80070dc <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 80050de:	8a7b      	ldrh	r3, [r7, #18]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 80050e4:	8a7b      	ldrh	r3, [r7, #18]
 80050e6:	4619      	mov	r1, r3
 80050e8:	6978      	ldr	r0, [r7, #20]
 80050ea:	f7ff fbdb 	bl	80048a4 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	885b      	ldrh	r3, [r3, #2]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2200      	movs	r2, #0
 80050fa:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	080118bc 	.word	0x080118bc
 800510c:	08011b5c 	.word	0x08011b5c
 8005110:	08011934 	.word	0x08011934
 8005114:	08011b80 	.word	0x08011b80

08005118 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	7a9b      	ldrb	r3, [r3, #10]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d127      	bne.n	8005182 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2200      	movs	r2, #0
 8005136:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2200      	movs	r2, #0
 800513c:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800513e:	e00d      	b.n	800515c <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d006      	beq.n	8005156 <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	6892      	ldr	r2, [r2, #8]
 8005150:	2100      	movs	r1, #0
 8005152:	4610      	mov	r0, r2
 8005154:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8005156:	6938      	ldr	r0, [r7, #16]
 8005158:	f7ff f9b0 	bl	80044bc <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	3318      	adds	r3, #24
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff f9ba 	bl	80044dc <mqtt_take_request>
 8005168:	6138      	str	r0, [r7, #16]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e7      	bne.n	8005140 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f7ff f857 	bl	8004230 <mqtt_output_send>
  }
  return ERR_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <mqtt_tcp_err_cb+0x24>
 80051a2:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <mqtt_tcp_err_cb+0x3c>)
 80051a4:	f240 32f6 	movw	r2, #1014	; 0x3f6
 80051a8:	4908      	ldr	r1, [pc, #32]	; (80051cc <mqtt_tcp_err_cb+0x40>)
 80051aa:	4809      	ldr	r0, [pc, #36]	; (80051d0 <mqtt_tcp_err_cb+0x44>)
 80051ac:	f00b f93e 	bl	801042c <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80051b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff fb72 	bl	80048a4 <mqtt_close>
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	080118bc 	.word	0x080118bc
 80051cc:	08011ba8 	.word	0x08011ba8
 80051d0:	08011934 	.word	0x08011934

080051d4 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	7a9b      	ldrb	r3, [r3, #10]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d105      	bne.n	80051f6 <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	33ec      	adds	r3, #236	; 0xec
 80051ee:	6839      	ldr	r1, [r7, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff f81d 	bl	8004230 <mqtt_output_send>
  }
  return ERR_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	4613      	mov	r3, r2
 800520c:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 8005212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800521a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521e:	e025      	b.n	800526c <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2200      	movs	r2, #0
 8005224:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8005226:	4913      	ldr	r1, [pc, #76]	; (8005274 <mqtt_tcp_connect_cb+0x74>)
 8005228:	68b8      	ldr	r0, [r7, #8]
 800522a:	f003 fe25 	bl	8008e78 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800522e:	4912      	ldr	r1, [pc, #72]	; (8005278 <mqtt_tcp_connect_cb+0x78>)
 8005230:	68b8      	ldr	r0, [r7, #8]
 8005232:	f003 fe43 	bl	8008ebc <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8005236:	2202      	movs	r2, #2
 8005238:	4910      	ldr	r1, [pc, #64]	; (800527c <mqtt_tcp_connect_cb+0x7c>)
 800523a:	68b8      	ldr	r0, [r7, #8]
 800523c:	f003 fe82 	bl	8008f44 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2202      	movs	r2, #2
 8005244:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	490d      	ldr	r1, [pc, #52]	; (8005280 <mqtt_tcp_connect_cb+0x80>)
 800524a:	f241 3088 	movw	r0, #5000	; 0x1388
 800524e:	f008 fb77 	bl	800d940 <sys_timeout>
  client->cyclic_tick = 0;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2200      	movs	r2, #0
 8005256:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f7fe ffe3 	bl	8004230 <mqtt_output_send>

  return ERR_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	0800505d 	.word	0x0800505d
 8005278:	08005119 	.word	0x08005119
 800527c:	080051d5 	.word	0x080051d5
 8005280:	08004965 	.word	0x08004965

08005284 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08c      	sub	sp, #48	; 0x30
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <mqtt_publish+0x22>
 8005298:	4b5d      	ldr	r3, [pc, #372]	; (8005410 <mqtt_publish+0x18c>)
 800529a:	f240 4254 	movw	r2, #1108	; 0x454
 800529e:	495d      	ldr	r1, [pc, #372]	; (8005414 <mqtt_publish+0x190>)
 80052a0:	485d      	ldr	r0, [pc, #372]	; (8005418 <mqtt_publish+0x194>)
 80052a2:	f00b f8c3 	bl	801042c <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <mqtt_publish+0x36>
 80052ac:	4b58      	ldr	r3, [pc, #352]	; (8005410 <mqtt_publish+0x18c>)
 80052ae:	f240 4255 	movw	r2, #1109	; 0x455
 80052b2:	495a      	ldr	r1, [pc, #360]	; (800541c <mqtt_publish+0x198>)
 80052b4:	4858      	ldr	r0, [pc, #352]	; (8005418 <mqtt_publish+0x194>)
 80052b6:	f00b f8b9 	bl	801042c <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	7a9b      	ldrb	r3, [r3, #10]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <mqtt_publish+0x52>
 80052c2:	4b53      	ldr	r3, [pc, #332]	; (8005410 <mqtt_publish+0x18c>)
 80052c4:	f240 4256 	movw	r2, #1110	; 0x456
 80052c8:	4955      	ldr	r1, [pc, #340]	; (8005420 <mqtt_publish+0x19c>)
 80052ca:	4853      	ldr	r0, [pc, #332]	; (8005418 <mqtt_publish+0x194>)
 80052cc:	f00b f8ae 	bl	801042c <iprintf>
 80052d0:	f06f 030a 	mvn.w	r3, #10
 80052d4:	e097      	b.n	8005406 <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 80052d6:	68b8      	ldr	r0, [r7, #8]
 80052d8:	f7fa ff84 	bl	80001e4 <strlen>
 80052dc:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d909      	bls.n	80052fc <mqtt_publish+0x78>
 80052e8:	4b49      	ldr	r3, [pc, #292]	; (8005410 <mqtt_publish+0x18c>)
 80052ea:	f240 4259 	movw	r2, #1113	; 0x459
 80052ee:	494d      	ldr	r1, [pc, #308]	; (8005424 <mqtt_publish+0x1a0>)
 80052f0:	4849      	ldr	r0, [pc, #292]	; (8005418 <mqtt_publish+0x194>)
 80052f2:	f00b f89b 	bl	801042c <iprintf>
 80052f6:	f06f 030f 	mvn.w	r3, #15
 80052fa:	e084      	b.n	8005406 <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8005300:	8b7b      	ldrh	r3, [r7, #26]
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	887b      	ldrh	r3, [r7, #2]
 8005306:	4413      	add	r3, r2
 8005308:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 800530a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <mqtt_publish+0xa0>
    total_len += 2;
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	3302      	adds	r3, #2
 8005316:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7fe fef5 	bl	8004108 <msg_generate_packet_id>
 800531e:	4603      	mov	r3, r0
 8005320:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005322:	e001      	b.n	8005328 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532e:	d309      	bcc.n	8005344 <mqtt_publish+0xc0>
 8005330:	4b37      	ldr	r3, [pc, #220]	; (8005410 <mqtt_publish+0x18c>)
 8005332:	f240 4265 	movw	r2, #1125	; 0x465
 8005336:	493c      	ldr	r1, [pc, #240]	; (8005428 <mqtt_publish+0x1a4>)
 8005338:	4837      	ldr	r0, [pc, #220]	; (8005418 <mqtt_publish+0x194>)
 800533a:	f00b f877 	bl	801042c <iprintf>
 800533e:	f06f 030f 	mvn.w	r3, #15
 8005342:	e060      	b.n	8005406 <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f103 001c 	add.w	r0, r3, #28
 800534e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	2104      	movs	r1, #4
 8005358:	f7ff f81e 	bl	8004398 <mqtt_create_request>
 800535c:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d102      	bne.n	800536a <mqtt_publish+0xe6>
    return ERR_MEM;
 8005364:	f04f 33ff 	mov.w	r3, #4294967295
 8005368:	e04d      	b.n	8005406 <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	33ec      	adds	r3, #236	; 0xec
 800536e:	8b3a      	ldrh	r2, [r7, #24]
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fa64 	bl	8004840 <mqtt_output_check_space>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <mqtt_publish+0x106>
    mqtt_delete_request(r);
 800537e:	6978      	ldr	r0, [r7, #20]
 8005380:	f7ff f89c 	bl	80044bc <mqtt_delete_request>
    return ERR_MEM;
 8005384:	f04f 33ff 	mov.w	r3, #4294967295
 8005388:	e03d      	b.n	8005406 <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005390:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005394:	8b3b      	ldrh	r3, [r7, #24]
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	4613      	mov	r3, r2
 80053a0:	2200      	movs	r2, #0
 80053a2:	2103      	movs	r1, #3
 80053a4:	f7ff fa03 	bl	80047ae <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	33ec      	adds	r3, #236	; 0xec
 80053ac:	8b7a      	ldrh	r2, [r7, #26]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff f9d1 	bl	8004758 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 80053b6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d006      	beq.n	80053cc <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	33ec      	adds	r3, #236	; 0xec
 80053c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff f991 	bl	80046ee <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <mqtt_publish+0x162>
 80053d2:	887b      	ldrh	r3, [r7, #2]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d006      	beq.n	80053e6 <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	33ec      	adds	r3, #236	; 0xec
 80053dc:	887a      	ldrh	r2, [r7, #2]
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff f99c 	bl	800471e <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3318      	adds	r3, #24
 80053ea:	6979      	ldr	r1, [r7, #20]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff f819 	bl	8004424 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f7fe ff16 	bl	8004230 <mqtt_output_send>
  return ERR_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3728      	adds	r7, #40	; 0x28
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	080118bc 	.word	0x080118bc
 8005414:	08011bc8 	.word	0x08011bc8
 8005418:	08011934 	.word	0x08011934
 800541c:	08011be8 	.word	0x08011be8
 8005420:	08011c04 	.word	0x08011c04
 8005424:	08011c24 	.word	0x08011c24
 8005428:	08011c48 	.word	0x08011c48

0800542c <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08c      	sub	sp, #48	; 0x30
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <mqtt_sub_unsub+0x24>
 8005442:	4b5e      	ldr	r3, [pc, #376]	; (80055bc <mqtt_sub_unsub+0x190>)
 8005444:	f240 429f 	movw	r2, #1183	; 0x49f
 8005448:	495d      	ldr	r1, [pc, #372]	; (80055c0 <mqtt_sub_unsub+0x194>)
 800544a:	485e      	ldr	r0, [pc, #376]	; (80055c4 <mqtt_sub_unsub+0x198>)
 800544c:	f00a ffee 	bl	801042c <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <mqtt_sub_unsub+0x38>
 8005456:	4b59      	ldr	r3, [pc, #356]	; (80055bc <mqtt_sub_unsub+0x190>)
 8005458:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 800545c:	495a      	ldr	r1, [pc, #360]	; (80055c8 <mqtt_sub_unsub+0x19c>)
 800545e:	4859      	ldr	r0, [pc, #356]	; (80055c4 <mqtt_sub_unsub+0x198>)
 8005460:	f00a ffe4 	bl	801042c <iprintf>

  topic_strlen = strlen(topic);
 8005464:	68b8      	ldr	r0, [r7, #8]
 8005466:	f7fa febd 	bl	80001e4 <strlen>
 800546a:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8005472:	4293      	cmp	r3, r2
 8005474:	d909      	bls.n	800548a <mqtt_sub_unsub+0x5e>
 8005476:	4b51      	ldr	r3, [pc, #324]	; (80055bc <mqtt_sub_unsub+0x190>)
 8005478:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800547c:	4953      	ldr	r1, [pc, #332]	; (80055cc <mqtt_sub_unsub+0x1a0>)
 800547e:	4851      	ldr	r0, [pc, #324]	; (80055c4 <mqtt_sub_unsub+0x198>)
 8005480:	f00a ffd4 	bl	801042c <iprintf>
 8005484:	f06f 030f 	mvn.w	r3, #15
 8005488:	e093      	b.n	80055b2 <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800548e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005490:	3304      	adds	r3, #4
 8005492:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8005496:	2a00      	cmp	r2, #0
 8005498:	bf14      	ite	ne
 800549a:	2201      	movne	r2, #1
 800549c:	2200      	moveq	r2, #0
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	4413      	add	r3, r2
 80054a2:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054aa:	d309      	bcc.n	80054c0 <mqtt_sub_unsub+0x94>
 80054ac:	4b43      	ldr	r3, [pc, #268]	; (80055bc <mqtt_sub_unsub+0x190>)
 80054ae:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80054b2:	4947      	ldr	r1, [pc, #284]	; (80055d0 <mqtt_sub_unsub+0x1a4>)
 80054b4:	4843      	ldr	r0, [pc, #268]	; (80055c4 <mqtt_sub_unsub+0x198>)
 80054b6:	f00a ffb9 	bl	801042c <iprintf>
 80054ba:	f06f 030f 	mvn.w	r3, #15
 80054be:	e078      	b.n	80055b2 <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d906      	bls.n	80054d8 <mqtt_sub_unsub+0xac>
 80054ca:	4b3c      	ldr	r3, [pc, #240]	; (80055bc <mqtt_sub_unsub+0x190>)
 80054cc:	f240 42aa 	movw	r2, #1194	; 0x4aa
 80054d0:	4940      	ldr	r1, [pc, #256]	; (80055d4 <mqtt_sub_unsub+0x1a8>)
 80054d2:	483c      	ldr	r0, [pc, #240]	; (80055c4 <mqtt_sub_unsub+0x198>)
 80054d4:	f00a ffaa 	bl	801042c <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	7a9b      	ldrb	r3, [r3, #10]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 80054e0:	f06f 030a 	mvn.w	r3, #10
 80054e4:	e065      	b.n	80055b2 <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7fe fe0e 	bl	8004108 <msg_generate_packet_id>
 80054ec:	4603      	mov	r3, r0
 80054ee:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f103 001c 	add.w	r0, r3, #28
 80054f6:	8b3a      	ldrh	r2, [r7, #24]
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2104      	movs	r1, #4
 8005500:	f7fe ff4a 	bl	8004398 <mqtt_create_request>
 8005504:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 800550c:	f04f 33ff 	mov.w	r3, #4294967295
 8005510:	e04f      	b.n	80055b2 <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	33ec      	adds	r3, #236	; 0xec
 8005516:	8b7a      	ldrh	r2, [r7, #26]
 8005518:	4611      	mov	r1, r2
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff f990 	bl	8004840 <mqtt_output_check_space>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d105      	bne.n	8005532 <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 8005526:	6978      	ldr	r0, [r7, #20]
 8005528:	f7fe ffc8 	bl	80044bc <mqtt_delete_request>
    return ERR_MEM;
 800552c:	f04f 33ff 	mov.w	r3, #4294967295
 8005530:	e03f      	b.n	80055b2 <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005538:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <mqtt_sub_unsub+0x118>
 8005540:	2108      	movs	r1, #8
 8005542:	e000      	b.n	8005546 <mqtt_sub_unsub+0x11a>
 8005544:	210a      	movs	r1, #10
 8005546:	8b7b      	ldrh	r3, [r7, #26]
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	2300      	movs	r3, #0
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	2301      	movs	r3, #1
 8005550:	2200      	movs	r2, #0
 8005552:	f7ff f92c 	bl	80047ae <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	33ec      	adds	r3, #236	; 0xec
 800555a:	8b3a      	ldrh	r2, [r7, #24]
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff f8c5 	bl	80046ee <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	33ec      	adds	r3, #236	; 0xec
 8005568:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff f8f3 	bl	8004758 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 8005572:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	2b02      	cmp	r3, #2
 8005584:	bf28      	it	cs
 8005586:	2302      	movcs	r3, #2
 8005588:	b2db      	uxtb	r3, r3
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f7ff f89f 	bl	80046d0 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3318      	adds	r3, #24
 8005596:	6979      	ldr	r1, [r7, #20]
 8005598:	4618      	mov	r0, r3
 800559a:	f7fe ff43 	bl	8004424 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4619      	mov	r1, r3
 80055aa:	4610      	mov	r0, r2
 80055ac:	f7fe fe40 	bl	8004230 <mqtt_output_send>
  return ERR_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3728      	adds	r7, #40	; 0x28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	080118bc 	.word	0x080118bc
 80055c0:	08011c6c 	.word	0x08011c6c
 80055c4:	08011934 	.word	0x08011934
 80055c8:	08011c8c 	.word	0x08011c8c
 80055cc:	08011cac 	.word	0x08011cac
 80055d0:	08011cd4 	.word	0x08011cd4
 80055d4:	08011cfc 	.word	0x08011cfc

080055d8 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <mqtt_set_inpub_callback+0x22>
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <mqtt_set_inpub_callback+0x3c>)
 80055ee:	f240 42da 	movw	r2, #1242	; 0x4da
 80055f2:	4909      	ldr	r1, [pc, #36]	; (8005618 <mqtt_set_inpub_callback+0x40>)
 80055f4:	4809      	ldr	r0, [pc, #36]	; (800561c <mqtt_set_inpub_callback+0x44>)
 80055f6:	f00a ff19 	bl	801042c <iprintf>
  client->data_cb = data_cb;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	080118bc 	.word	0x080118bc
 8005618:	08011d14 	.word	0x08011d14
 800561c:	08011934 	.word	0x08011934

08005620 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8005624:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8005628:	2001      	movs	r0, #1
 800562a:	f000 fe61 	bl	80062f0 <mem_calloc>
 800562e:	4603      	mov	r3, r0
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}

08005634 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	; 0x30
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8005644:	230a      	movs	r3, #10
 8005646:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564e:	2300      	movs	r3, #0
 8005650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005654:	2300      	movs	r3, #0
 8005656:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	83fb      	strh	r3, [r7, #30]
 800565e:	2300      	movs	r3, #0
 8005660:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <mqtt_client_connect+0x42>
 8005668:	4bac      	ldr	r3, [pc, #688]	; (800591c <mqtt_client_connect+0x2e8>)
 800566a:	f240 520f 	movw	r2, #1295	; 0x50f
 800566e:	49ac      	ldr	r1, [pc, #688]	; (8005920 <mqtt_client_connect+0x2ec>)
 8005670:	48ac      	ldr	r0, [pc, #688]	; (8005924 <mqtt_client_connect+0x2f0>)
 8005672:	f00a fedb 	bl	801042c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <mqtt_client_connect+0x56>
 800567c:	4ba7      	ldr	r3, [pc, #668]	; (800591c <mqtt_client_connect+0x2e8>)
 800567e:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8005682:	49a9      	ldr	r1, [pc, #676]	; (8005928 <mqtt_client_connect+0x2f4>)
 8005684:	48a7      	ldr	r0, [pc, #668]	; (8005924 <mqtt_client_connect+0x2f0>)
 8005686:	f00a fed1 	bl	801042c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <mqtt_client_connect+0x6a>
 8005690:	4ba2      	ldr	r3, [pc, #648]	; (800591c <mqtt_client_connect+0x2e8>)
 8005692:	f240 5211 	movw	r2, #1297	; 0x511
 8005696:	49a5      	ldr	r1, [pc, #660]	; (800592c <mqtt_client_connect+0x2f8>)
 8005698:	48a2      	ldr	r0, [pc, #648]	; (8005924 <mqtt_client_connect+0x2f0>)
 800569a:	f00a fec7 	bl	801042c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <mqtt_client_connect+0x80>
 80056a6:	4b9d      	ldr	r3, [pc, #628]	; (800591c <mqtt_client_connect+0x2e8>)
 80056a8:	f240 5212 	movw	r2, #1298	; 0x512
 80056ac:	49a0      	ldr	r1, [pc, #640]	; (8005930 <mqtt_client_connect+0x2fc>)
 80056ae:	489d      	ldr	r0, [pc, #628]	; (8005924 <mqtt_client_connect+0x2f0>)
 80056b0:	f00a febc 	bl	801042c <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	7a9b      	ldrb	r3, [r3, #10]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 80056bc:	f06f 0309 	mvn.w	r3, #9
 80056c0:	e221      	b.n	8005b06 <mqtt_client_connect+0x4d2>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 80056c2:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80056c6:	2100      	movs	r1, #0
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f00a fea6 	bl	801041a <memset>
  client->connect_arg = arg;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d2:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 80056da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056dc:	899a      	ldrh	r2, [r3, #12]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	331c      	adds	r3, #28
 80056e6:	2104      	movs	r1, #4
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fe ffc5 	bl	8004678 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 80056ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d073      	beq.n	80057de <mqtt_client_connect+0x1aa>
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d06f      	beq.n	80057de <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 80056fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005702:	f043 0304 	orr.w	r3, r3, #4
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800570a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570c:	7e1b      	ldrb	r3, [r3, #24]
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	b25b      	sxtb	r3, r3
 8005712:	f003 0318 	and.w	r3, r3, #24
 8005716:	b25a      	sxtb	r2, r3
 8005718:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800571c:	4313      	orrs	r3, r2
 800571e:	b25b      	sxtb	r3, r3
 8005720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 8005724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005726:	7e5b      	ldrb	r3, [r3, #25]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800572c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005730:	f043 0320 	orr.w	r3, r3, #32
 8005734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	4618      	mov	r0, r3
 800573e:	f7fa fd51 	bl	80001e4 <strlen>
 8005742:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	2bff      	cmp	r3, #255	; 0xff
 8005748:	d909      	bls.n	800575e <mqtt_client_connect+0x12a>
 800574a:	4b74      	ldr	r3, [pc, #464]	; (800591c <mqtt_client_connect+0x2e8>)
 800574c:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8005750:	4978      	ldr	r1, [pc, #480]	; (8005934 <mqtt_client_connect+0x300>)
 8005752:	4874      	ldr	r0, [pc, #464]	; (8005924 <mqtt_client_connect+0x2f0>)
 8005754:	f00a fe6a 	bl	801042c <iprintf>
 8005758:	f06f 0305 	mvn.w	r3, #5
 800575c:	e1d3      	b.n	8005b06 <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d109      	bne.n	8005778 <mqtt_client_connect+0x144>
 8005764:	4b6d      	ldr	r3, [pc, #436]	; (800591c <mqtt_client_connect+0x2e8>)
 8005766:	f240 5229 	movw	r2, #1321	; 0x529
 800576a:	4973      	ldr	r1, [pc, #460]	; (8005938 <mqtt_client_connect+0x304>)
 800576c:	486d      	ldr	r0, [pc, #436]	; (8005924 <mqtt_client_connect+0x2f0>)
 800576e:	f00a fe5d 	bl	801042c <iprintf>
 8005772:	f06f 0305 	mvn.w	r3, #5
 8005776:	e1c6      	b.n	8005b06 <mqtt_client_connect+0x4d2>
    will_topic_len = (u8_t)len;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fa fd2e 	bl	80001e4 <strlen>
 8005788:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2bff      	cmp	r3, #255	; 0xff
 800578e:	d909      	bls.n	80057a4 <mqtt_client_connect+0x170>
 8005790:	4b62      	ldr	r3, [pc, #392]	; (800591c <mqtt_client_connect+0x2e8>)
 8005792:	f240 522c 	movw	r2, #1324	; 0x52c
 8005796:	4969      	ldr	r1, [pc, #420]	; (800593c <mqtt_client_connect+0x308>)
 8005798:	4862      	ldr	r0, [pc, #392]	; (8005924 <mqtt_client_connect+0x2f0>)
 800579a:	f00a fe47 	bl	801042c <iprintf>
 800579e:	f06f 0305 	mvn.w	r3, #5
 80057a2:	e1b0      	b.n	8005b06 <mqtt_client_connect+0x4d2>
    will_msg_len = (u8_t)len;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 80057aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ac:	1c9a      	adds	r2, r3, #2
 80057ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80057b2:	4413      	add	r3, r2
 80057b4:	1c9a      	adds	r2, r3, #2
 80057b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80057ba:	4413      	add	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c4:	d309      	bcc.n	80057da <mqtt_client_connect+0x1a6>
 80057c6:	4b55      	ldr	r3, [pc, #340]	; (800591c <mqtt_client_connect+0x2e8>)
 80057c8:	f240 522f 	movw	r2, #1327	; 0x52f
 80057cc:	495c      	ldr	r1, [pc, #368]	; (8005940 <mqtt_client_connect+0x30c>)
 80057ce:	4855      	ldr	r0, [pc, #340]	; (8005924 <mqtt_client_connect+0x2f0>)
 80057d0:	f00a fe2c 	bl	801042c <iprintf>
 80057d4:	f06f 0305 	mvn.w	r3, #5
 80057d8:	e195      	b.n	8005b06 <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 80057de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d03d      	beq.n	8005862 <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 80057e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 80057f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fa fcf4 	bl	80001e4 <strlen>
 80057fc:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005804:	d309      	bcc.n	800581a <mqtt_client_connect+0x1e6>
 8005806:	4b45      	ldr	r3, [pc, #276]	; (800591c <mqtt_client_connect+0x2e8>)
 8005808:	f240 5235 	movw	r2, #1333	; 0x535
 800580c:	494d      	ldr	r1, [pc, #308]	; (8005944 <mqtt_client_connect+0x310>)
 800580e:	4845      	ldr	r0, [pc, #276]	; (8005924 <mqtt_client_connect+0x2f0>)
 8005810:	f00a fe0c 	bl	801042c <iprintf>
 8005814:	f06f 0305 	mvn.w	r3, #5
 8005818:	e175      	b.n	8005b06 <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <mqtt_client_connect+0x200>
 8005820:	4b3e      	ldr	r3, [pc, #248]	; (800591c <mqtt_client_connect+0x2e8>)
 8005822:	f240 5236 	movw	r2, #1334	; 0x536
 8005826:	4948      	ldr	r1, [pc, #288]	; (8005948 <mqtt_client_connect+0x314>)
 8005828:	483e      	ldr	r0, [pc, #248]	; (8005924 <mqtt_client_connect+0x2f0>)
 800582a:	f00a fdff 	bl	801042c <iprintf>
 800582e:	f06f 0305 	mvn.w	r3, #5
 8005832:	e168      	b.n	8005b06 <mqtt_client_connect+0x4d2>
    client_user_len = (u16_t)len;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8005838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800583a:	1c9a      	adds	r2, r3, #2
 800583c:	8bfb      	ldrh	r3, [r7, #30]
 800583e:	4413      	add	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005848:	d309      	bcc.n	800585e <mqtt_client_connect+0x22a>
 800584a:	4b34      	ldr	r3, [pc, #208]	; (800591c <mqtt_client_connect+0x2e8>)
 800584c:	f240 5239 	movw	r2, #1337	; 0x539
 8005850:	493b      	ldr	r1, [pc, #236]	; (8005940 <mqtt_client_connect+0x30c>)
 8005852:	4834      	ldr	r0, [pc, #208]	; (8005924 <mqtt_client_connect+0x2f0>)
 8005854:	f00a fdea 	bl	801042c <iprintf>
 8005858:	f06f 0305 	mvn.w	r3, #5
 800585c:	e153      	b.n	8005b06 <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d03d      	beq.n	80058e6 <mqtt_client_connect+0x2b2>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800586a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800586e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	4618      	mov	r0, r3
 800587c:	f7fa fcb2 	bl	80001e4 <strlen>
 8005880:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005888:	d309      	bcc.n	800589e <mqtt_client_connect+0x26a>
 800588a:	4b24      	ldr	r3, [pc, #144]	; (800591c <mqtt_client_connect+0x2e8>)
 800588c:	f240 523f 	movw	r2, #1343	; 0x53f
 8005890:	492e      	ldr	r1, [pc, #184]	; (800594c <mqtt_client_connect+0x318>)
 8005892:	4824      	ldr	r0, [pc, #144]	; (8005924 <mqtt_client_connect+0x2f0>)
 8005894:	f00a fdca 	bl	801042c <iprintf>
 8005898:	f06f 0305 	mvn.w	r3, #5
 800589c:	e133      	b.n	8005b06 <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <mqtt_client_connect+0x284>
 80058a4:	4b1d      	ldr	r3, [pc, #116]	; (800591c <mqtt_client_connect+0x2e8>)
 80058a6:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 80058aa:	4929      	ldr	r1, [pc, #164]	; (8005950 <mqtt_client_connect+0x31c>)
 80058ac:	481d      	ldr	r0, [pc, #116]	; (8005924 <mqtt_client_connect+0x2f0>)
 80058ae:	f00a fdbd 	bl	801042c <iprintf>
 80058b2:	f06f 0305 	mvn.w	r3, #5
 80058b6:	e126      	b.n	8005b06 <mqtt_client_connect+0x4d2>
    client_pass_len = (u16_t)len;
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 80058bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058be:	1c9a      	adds	r2, r3, #2
 80058c0:	8bbb      	ldrh	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058cc:	d309      	bcc.n	80058e2 <mqtt_client_connect+0x2ae>
 80058ce:	4b13      	ldr	r3, [pc, #76]	; (800591c <mqtt_client_connect+0x2e8>)
 80058d0:	f240 5243 	movw	r2, #1347	; 0x543
 80058d4:	491a      	ldr	r1, [pc, #104]	; (8005940 <mqtt_client_connect+0x30c>)
 80058d6:	4813      	ldr	r0, [pc, #76]	; (8005924 <mqtt_client_connect+0x2f0>)
 80058d8:	f00a fda8 	bl	801042c <iprintf>
 80058dc:	f06f 0305 	mvn.w	r3, #5
 80058e0:	e111      	b.n	8005b06 <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 80058e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ea:	f043 0302 	orr.w	r3, r3, #2
 80058ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 80058f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fa fc74 	bl	80001e4 <strlen>
 80058fc:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005904:	d328      	bcc.n	8005958 <mqtt_client_connect+0x324>
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <mqtt_client_connect+0x2e8>)
 8005908:	f240 524b 	movw	r2, #1355	; 0x54b
 800590c:	4911      	ldr	r1, [pc, #68]	; (8005954 <mqtt_client_connect+0x320>)
 800590e:	4805      	ldr	r0, [pc, #20]	; (8005924 <mqtt_client_connect+0x2f0>)
 8005910:	f00a fd8c 	bl	801042c <iprintf>
 8005914:	f06f 0305 	mvn.w	r3, #5
 8005918:	e0f5      	b.n	8005b06 <mqtt_client_connect+0x4d2>
 800591a:	bf00      	nop
 800591c:	080118bc 	.word	0x080118bc
 8005920:	08011d3c 	.word	0x08011d3c
 8005924:	08011934 	.word	0x08011934
 8005928:	08011d60 	.word	0x08011d60
 800592c:	08011d88 	.word	0x08011d88
 8005930:	08011db4 	.word	0x08011db4
 8005934:	08011de8 	.word	0x08011de8
 8005938:	08011e28 	.word	0x08011e28
 800593c:	08011e68 	.word	0x08011e68
 8005940:	08011ea4 	.word	0x08011ea4
 8005944:	08011ed4 	.word	0x08011ed4
 8005948:	08011f14 	.word	0x08011f14
 800594c:	08011f58 	.word	0x08011f58
 8005950:	08011f98 	.word	0x08011f98
 8005954:	08011fdc 	.word	0x08011fdc
  client_id_length = (u16_t)len;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800595c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800595e:	1c9a      	adds	r2, r3, #2
 8005960:	8afb      	ldrh	r3, [r7, #22]
 8005962:	4413      	add	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d309      	bcc.n	8005982 <mqtt_client_connect+0x34e>
 800596e:	4b68      	ldr	r3, [pc, #416]	; (8005b10 <mqtt_client_connect+0x4dc>)
 8005970:	f240 524e 	movw	r2, #1358	; 0x54e
 8005974:	4967      	ldr	r1, [pc, #412]	; (8005b14 <mqtt_client_connect+0x4e0>)
 8005976:	4868      	ldr	r0, [pc, #416]	; (8005b18 <mqtt_client_connect+0x4e4>)
 8005978:	f00a fd58 	bl	801042c <iprintf>
 800597c:	f06f 0305 	mvn.w	r3, #5
 8005980:	e0c1      	b.n	8005b06 <mqtt_client_connect+0x4d2>
  remaining_length = (u16_t)len;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	33ec      	adds	r3, #236	; 0xec
 800598a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe ff56 	bl	8004840 <mqtt_output_check_space>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d102      	bne.n	80059a0 <mqtt_client_connect+0x36c>
    return ERR_MEM;
 800599a:	f04f 33ff 	mov.w	r3, #4294967295
 800599e:	e0b2      	b.n	8005b06 <mqtt_client_connect+0x4d2>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 80059a0:	2000      	movs	r0, #0
 80059a2:	f003 fa49 	bl	8008e38 <tcp_new_ip_type>
 80059a6:	4602      	mov	r2, r0
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d102      	bne.n	80059ba <mqtt_client_connect+0x386>
    return ERR_MEM;
 80059b4:	f04f 33ff 	mov.w	r3, #4294967295
 80059b8:	e0a5      	b.n	8005b06 <mqtt_client_connect+0x4d2>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	68f9      	ldr	r1, [r7, #12]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f003 fa47 	bl	8008e54 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	4953      	ldr	r1, [pc, #332]	; (8005b1c <mqtt_client_connect+0x4e8>)
 80059ce:	4618      	mov	r0, r3
 80059d0:	f002 f974 	bl	8007cbc <tcp_bind>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 80059da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f040 8084 	bne.w	8005aec <mqtt_client_connect+0x4b8>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68d8      	ldr	r0, [r3, #12]
 80059e8:	88fa      	ldrh	r2, [r7, #6]
 80059ea:	4b4d      	ldr	r3, [pc, #308]	; (8005b20 <mqtt_client_connect+0x4ec>)
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	f002 faed 	bl	8007fcc <tcp_connect>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 80059f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d177      	bne.n	8005af0 <mqtt_client_connect+0x4bc>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	4947      	ldr	r1, [pc, #284]	; (8005b24 <mqtt_client_connect+0x4f0>)
 8005a06:	4618      	mov	r0, r3
 8005a08:	f003 fa7a 	bl	8008f00 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	2300      	movs	r3, #0
 8005a22:	2200      	movs	r2, #0
 8005a24:	2101      	movs	r1, #1
 8005a26:	f7fe fec2 	bl	80047ae <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	33ec      	adds	r3, #236	; 0xec
 8005a2e:	2204      	movs	r2, #4
 8005a30:	493d      	ldr	r1, [pc, #244]	; (8005b28 <mqtt_client_connect+0x4f4>)
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe fe90 	bl	8004758 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	33ec      	adds	r3, #236	; 0xec
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe fe46 	bl	80046d0 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	33ec      	adds	r3, #236	; 0xec
 8005a48:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe fe3e 	bl	80046d0 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5c:	899b      	ldrh	r3, [r3, #12]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7fe fe44 	bl	80046ee <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	8afa      	ldrh	r2, [r7, #22]
 8005a72:	4619      	mov	r1, r3
 8005a74:	f7fe fe70 	bl	8004758 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8005a78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d015      	beq.n	8005ab0 <mqtt_client_connect+0x47c>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005a92:	b292      	uxth	r2, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	f7fe fe5f 	bl	8004758 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005aa8:	b292      	uxth	r2, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	f7fe fe54 	bl	8004758 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8005ab0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	da08      	bge.n	8005aca <mqtt_client_connect+0x496>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	8bfa      	ldrh	r2, [r7, #30]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f7fe fe47 	bl	8004758 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8005aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <mqtt_client_connect+0x4b4>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	8bba      	ldrh	r2, [r7, #28]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f7fe fe38 	bl	8004758 <mqtt_output_append_string>
  }
  return ERR_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e00c      	b.n	8005b06 <mqtt_client_connect+0x4d2>
    goto tcp_fail;
 8005aec:	bf00      	nop
 8005aee:	e000      	b.n	8005af2 <mqtt_client_connect+0x4be>
    goto tcp_fail;
 8005af0:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f002 f8d4 	bl	8007ca4 <tcp_abort>
  client->conn = NULL;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	60da      	str	r2, [r3, #12]
  return err;
 8005b02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3728      	adds	r7, #40	; 0x28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	080118bc 	.word	0x080118bc
 8005b14:	08011ea4 	.word	0x08011ea4
 8005b18:	08011934 	.word	0x08011934
 8005b1c:	08014ad8 	.word	0x08014ad8
 8005b20:	08005201 	.word	0x08005201
 8005b24:	0800518d 	.word	0x0800518d
 8005b28:	08012018 	.word	0x08012018

08005b2c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	4603      	mov	r3, r0
 8005b34:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	b21a      	sxth	r2, r3
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	0a1b      	lsrs	r3, r3, #8
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	b21b      	sxth	r3, r3
 8005b44:	4313      	orrs	r3, r2
 8005b46:	b21b      	sxth	r3, r3
 8005b48:	b29b      	uxth	r3, r3
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	061a      	lsls	r2, r3, #24
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	0e1b      	lsrs	r3, r3, #24
 8005b7a:	4313      	orrs	r3, r2
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005b92:	f000 f8d5 	bl	8005d40 <mem_init>
  memp_init();
 8005b96:	f000 fc03 	bl	80063a0 <memp_init>
  pbuf_init();
  netif_init();
 8005b9a:	f000 fcbb 	bl	8006514 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005b9e:	f007 ff71 	bl	800da84 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005ba2:	f001 fd8d 	bl	80076c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005ba6:	f007 feab 	bl	800d900 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005bbe:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <ptr_to_mem+0x20>)
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	4413      	add	r3, r2
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	2000009c 	.word	0x2000009c

08005bd8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a05      	ldr	r2, [pc, #20]	; (8005bf8 <mem_to_ptr+0x20>)
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	b29b      	uxth	r3, r3
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	2000009c 	.word	0x2000009c

08005bfc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005c04:	4b45      	ldr	r3, [pc, #276]	; (8005d1c <plug_holes+0x120>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d206      	bcs.n	8005c1c <plug_holes+0x20>
 8005c0e:	4b44      	ldr	r3, [pc, #272]	; (8005d20 <plug_holes+0x124>)
 8005c10:	f240 12df 	movw	r2, #479	; 0x1df
 8005c14:	4943      	ldr	r1, [pc, #268]	; (8005d24 <plug_holes+0x128>)
 8005c16:	4844      	ldr	r0, [pc, #272]	; (8005d28 <plug_holes+0x12c>)
 8005c18:	f00a fc08 	bl	801042c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005c1c:	4b43      	ldr	r3, [pc, #268]	; (8005d2c <plug_holes+0x130>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d306      	bcc.n	8005c34 <plug_holes+0x38>
 8005c26:	4b3e      	ldr	r3, [pc, #248]	; (8005d20 <plug_holes+0x124>)
 8005c28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005c2c:	4940      	ldr	r1, [pc, #256]	; (8005d30 <plug_holes+0x134>)
 8005c2e:	483e      	ldr	r0, [pc, #248]	; (8005d28 <plug_holes+0x12c>)
 8005c30:	f00a fbfc 	bl	801042c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	791b      	ldrb	r3, [r3, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d006      	beq.n	8005c4a <plug_holes+0x4e>
 8005c3c:	4b38      	ldr	r3, [pc, #224]	; (8005d20 <plug_holes+0x124>)
 8005c3e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005c42:	493c      	ldr	r1, [pc, #240]	; (8005d34 <plug_holes+0x138>)
 8005c44:	4838      	ldr	r0, [pc, #224]	; (8005d28 <plug_holes+0x12c>)
 8005c46:	f00a fbf1 	bl	801042c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c52:	d906      	bls.n	8005c62 <plug_holes+0x66>
 8005c54:	4b32      	ldr	r3, [pc, #200]	; (8005d20 <plug_holes+0x124>)
 8005c56:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005c5a:	4937      	ldr	r1, [pc, #220]	; (8005d38 <plug_holes+0x13c>)
 8005c5c:	4832      	ldr	r0, [pc, #200]	; (8005d28 <plug_holes+0x12c>)
 8005c5e:	f00a fbe5 	bl	801042c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff ffa4 	bl	8005bb4 <ptr_to_mem>
 8005c6c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d024      	beq.n	8005cc0 <plug_holes+0xc4>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	791b      	ldrb	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d120      	bne.n	8005cc0 <plug_holes+0xc4>
 8005c7e:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <plug_holes+0x130>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d01b      	beq.n	8005cc0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005c88:	4b2c      	ldr	r3, [pc, #176]	; (8005d3c <plug_holes+0x140>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d102      	bne.n	8005c98 <plug_holes+0x9c>
      lfree = mem;
 8005c92:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <plug_holes+0x140>)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	881a      	ldrh	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ca8:	d00a      	beq.n	8005cc0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff ff80 	bl	8005bb4 <ptr_to_mem>
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff ff8e 	bl	8005bd8 <mem_to_ptr>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	885b      	ldrh	r3, [r3, #2]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff ff75 	bl	8005bb4 <ptr_to_mem>
 8005cca:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d01f      	beq.n	8005d14 <plug_holes+0x118>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	791b      	ldrb	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d11b      	bne.n	8005d14 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005cdc:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <plug_holes+0x140>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d102      	bne.n	8005cec <plug_holes+0xf0>
      lfree = pmem;
 8005ce6:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <plug_holes+0x140>)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	881a      	ldrh	r2, [r3, #0]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005cfc:	d00a      	beq.n	8005d14 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff ff56 	bl	8005bb4 <ptr_to_mem>
 8005d08:	4604      	mov	r4, r0
 8005d0a:	68b8      	ldr	r0, [r7, #8]
 8005d0c:	f7ff ff64 	bl	8005bd8 <mem_to_ptr>
 8005d10:	4603      	mov	r3, r0
 8005d12:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd90      	pop	{r4, r7, pc}
 8005d1c:	2000009c 	.word	0x2000009c
 8005d20:	0801206c 	.word	0x0801206c
 8005d24:	0801209c 	.word	0x0801209c
 8005d28:	080120b4 	.word	0x080120b4
 8005d2c:	200000a0 	.word	0x200000a0
 8005d30:	080120dc 	.word	0x080120dc
 8005d34:	080120f8 	.word	0x080120f8
 8005d38:	08012114 	.word	0x08012114
 8005d3c:	200000a4 	.word	0x200000a4

08005d40 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005d46:	4b18      	ldr	r3, [pc, #96]	; (8005da8 <mem_init+0x68>)
 8005d48:	3303      	adds	r3, #3
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4b16      	ldr	r3, [pc, #88]	; (8005dac <mem_init+0x6c>)
 8005d52:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005d54:	4b15      	ldr	r3, [pc, #84]	; (8005dac <mem_init+0x6c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005d60:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005d6e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005d72:	f7ff ff1f 	bl	8005bb4 <ptr_to_mem>
 8005d76:	4602      	mov	r2, r0
 8005d78:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <mem_init+0x70>)
 8005d7a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <mem_init+0x70>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2201      	movs	r2, #1
 8005d82:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <mem_init+0x70>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005d8c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005d8e:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <mem_init+0x70>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005d96:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <mem_init+0x6c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a05      	ldr	r2, [pc, #20]	; (8005db4 <mem_init+0x74>)
 8005d9e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20003420 	.word	0x20003420
 8005dac:	2000009c 	.word	0x2000009c
 8005db0:	200000a0 	.word	0x200000a0
 8005db4:	200000a4 	.word	0x200000a4

08005db8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff ff09 	bl	8005bd8 <mem_to_ptr>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fef0 	bl	8005bb4 <ptr_to_mem>
 8005dd4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	885b      	ldrh	r3, [r3, #2]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff feea 	bl	8005bb4 <ptr_to_mem>
 8005de0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005dea:	d818      	bhi.n	8005e1e <mem_link_valid+0x66>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	885b      	ldrh	r3, [r3, #2]
 8005df0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005df4:	d813      	bhi.n	8005e1e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005dfa:	8afa      	ldrh	r2, [r7, #22]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d004      	beq.n	8005e0a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	8afa      	ldrh	r2, [r7, #22]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d109      	bne.n	8005e1e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005e0a:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <mem_link_valid+0x74>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d006      	beq.n	8005e22 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	885b      	ldrh	r3, [r3, #2]
 8005e18:	8afa      	ldrh	r2, [r7, #22]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d001      	beq.n	8005e22 <mem_link_valid+0x6a>
    return 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e000      	b.n	8005e24 <mem_link_valid+0x6c>
  }
  return 1;
 8005e22:	2301      	movs	r3, #1
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	200000a0 	.word	0x200000a0

08005e30 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d04c      	beq.n	8005ed8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005e48:	4b25      	ldr	r3, [pc, #148]	; (8005ee0 <mem_free+0xb0>)
 8005e4a:	f240 2273 	movw	r2, #627	; 0x273
 8005e4e:	4925      	ldr	r1, [pc, #148]	; (8005ee4 <mem_free+0xb4>)
 8005e50:	4825      	ldr	r0, [pc, #148]	; (8005ee8 <mem_free+0xb8>)
 8005e52:	f00a faeb 	bl	801042c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e56:	e040      	b.n	8005eda <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3b08      	subs	r3, #8
 8005e5c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005e5e:	4b23      	ldr	r3, [pc, #140]	; (8005eec <mem_free+0xbc>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d306      	bcc.n	8005e76 <mem_free+0x46>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f103 020c 	add.w	r2, r3, #12
 8005e6e:	4b20      	ldr	r3, [pc, #128]	; (8005ef0 <mem_free+0xc0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d907      	bls.n	8005e86 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005e76:	4b1a      	ldr	r3, [pc, #104]	; (8005ee0 <mem_free+0xb0>)
 8005e78:	f240 227f 	movw	r2, #639	; 0x27f
 8005e7c:	491d      	ldr	r1, [pc, #116]	; (8005ef4 <mem_free+0xc4>)
 8005e7e:	481a      	ldr	r0, [pc, #104]	; (8005ee8 <mem_free+0xb8>)
 8005e80:	f00a fad4 	bl	801042c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e84:	e029      	b.n	8005eda <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	791b      	ldrb	r3, [r3, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d107      	bne.n	8005e9e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005e8e:	4b14      	ldr	r3, [pc, #80]	; (8005ee0 <mem_free+0xb0>)
 8005e90:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005e94:	4918      	ldr	r1, [pc, #96]	; (8005ef8 <mem_free+0xc8>)
 8005e96:	4814      	ldr	r0, [pc, #80]	; (8005ee8 <mem_free+0xb8>)
 8005e98:	f00a fac8 	bl	801042c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e9c:	e01d      	b.n	8005eda <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff ff8a 	bl	8005db8 <mem_link_valid>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d107      	bne.n	8005eba <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <mem_free+0xb0>)
 8005eac:	f240 2295 	movw	r2, #661	; 0x295
 8005eb0:	4912      	ldr	r1, [pc, #72]	; (8005efc <mem_free+0xcc>)
 8005eb2:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <mem_free+0xb8>)
 8005eb4:	f00a faba 	bl	801042c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005eb8:	e00f      	b.n	8005eda <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <mem_free+0xd0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d202      	bcs.n	8005ed0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005eca:	4a0d      	ldr	r2, [pc, #52]	; (8005f00 <mem_free+0xd0>)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff fe93 	bl	8005bfc <plug_holes>
 8005ed6:	e000      	b.n	8005eda <mem_free+0xaa>
    return;
 8005ed8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	0801206c 	.word	0x0801206c
 8005ee4:	08012140 	.word	0x08012140
 8005ee8:	080120b4 	.word	0x080120b4
 8005eec:	2000009c 	.word	0x2000009c
 8005ef0:	200000a0 	.word	0x200000a0
 8005ef4:	08012164 	.word	0x08012164
 8005ef8:	08012180 	.word	0x08012180
 8005efc:	080121a8 	.word	0x080121a8
 8005f00:	200000a4 	.word	0x200000a4

08005f04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005f10:	887b      	ldrh	r3, [r7, #2]
 8005f12:	3303      	adds	r3, #3
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	f023 0303 	bic.w	r3, r3, #3
 8005f1a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005f1c:	8bfb      	ldrh	r3, [r7, #30]
 8005f1e:	2b0b      	cmp	r3, #11
 8005f20:	d801      	bhi.n	8005f26 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005f22:	230c      	movs	r3, #12
 8005f24:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005f26:	8bfb      	ldrh	r3, [r7, #30]
 8005f28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f2c:	d803      	bhi.n	8005f36 <mem_trim+0x32>
 8005f2e:	8bfa      	ldrh	r2, [r7, #30]
 8005f30:	887b      	ldrh	r3, [r7, #2]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d201      	bcs.n	8005f3a <mem_trim+0x36>
    return NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e0cc      	b.n	80060d4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005f3a:	4b68      	ldr	r3, [pc, #416]	; (80060dc <mem_trim+0x1d8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d304      	bcc.n	8005f4e <mem_trim+0x4a>
 8005f44:	4b66      	ldr	r3, [pc, #408]	; (80060e0 <mem_trim+0x1dc>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d306      	bcc.n	8005f5c <mem_trim+0x58>
 8005f4e:	4b65      	ldr	r3, [pc, #404]	; (80060e4 <mem_trim+0x1e0>)
 8005f50:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005f54:	4964      	ldr	r1, [pc, #400]	; (80060e8 <mem_trim+0x1e4>)
 8005f56:	4865      	ldr	r0, [pc, #404]	; (80060ec <mem_trim+0x1e8>)
 8005f58:	f00a fa68 	bl	801042c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005f5c:	4b5f      	ldr	r3, [pc, #380]	; (80060dc <mem_trim+0x1d8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d304      	bcc.n	8005f70 <mem_trim+0x6c>
 8005f66:	4b5e      	ldr	r3, [pc, #376]	; (80060e0 <mem_trim+0x1dc>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d301      	bcc.n	8005f74 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	e0af      	b.n	80060d4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3b08      	subs	r3, #8
 8005f78:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005f7a:	69b8      	ldr	r0, [r7, #24]
 8005f7c:	f7ff fe2c 	bl	8005bd8 <mem_to_ptr>
 8005f80:	4603      	mov	r3, r0
 8005f82:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	881a      	ldrh	r2, [r3, #0]
 8005f88:	8afb      	ldrh	r3, [r7, #22]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b08      	subs	r3, #8
 8005f90:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005f92:	8bfa      	ldrh	r2, [r7, #30]
 8005f94:	8abb      	ldrh	r3, [r7, #20]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d906      	bls.n	8005fa8 <mem_trim+0xa4>
 8005f9a:	4b52      	ldr	r3, [pc, #328]	; (80060e4 <mem_trim+0x1e0>)
 8005f9c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005fa0:	4953      	ldr	r1, [pc, #332]	; (80060f0 <mem_trim+0x1ec>)
 8005fa2:	4852      	ldr	r0, [pc, #328]	; (80060ec <mem_trim+0x1e8>)
 8005fa4:	f00a fa42 	bl	801042c <iprintf>
  if (newsize > size) {
 8005fa8:	8bfa      	ldrh	r2, [r7, #30]
 8005faa:	8abb      	ldrh	r3, [r7, #20]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d901      	bls.n	8005fb4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e08f      	b.n	80060d4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005fb4:	8bfa      	ldrh	r2, [r7, #30]
 8005fb6:	8abb      	ldrh	r3, [r7, #20]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d101      	bne.n	8005fc0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	e089      	b.n	80060d4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff fdf5 	bl	8005bb4 <ptr_to_mem>
 8005fca:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	791b      	ldrb	r3, [r3, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d13f      	bne.n	8006054 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005fdc:	d106      	bne.n	8005fec <mem_trim+0xe8>
 8005fde:	4b41      	ldr	r3, [pc, #260]	; (80060e4 <mem_trim+0x1e0>)
 8005fe0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005fe4:	4943      	ldr	r1, [pc, #268]	; (80060f4 <mem_trim+0x1f0>)
 8005fe6:	4841      	ldr	r0, [pc, #260]	; (80060ec <mem_trim+0x1e8>)
 8005fe8:	f00a fa20 	bl	801042c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005ff2:	8afa      	ldrh	r2, [r7, #22]
 8005ff4:	8bfb      	ldrh	r3, [r7, #30]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005ffe:	4b3e      	ldr	r3, [pc, #248]	; (80060f8 <mem_trim+0x1f4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	429a      	cmp	r2, r3
 8006006:	d106      	bne.n	8006016 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006008:	89fb      	ldrh	r3, [r7, #14]
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fdd2 	bl	8005bb4 <ptr_to_mem>
 8006010:	4602      	mov	r2, r0
 8006012:	4b39      	ldr	r3, [pc, #228]	; (80060f8 <mem_trim+0x1f4>)
 8006014:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006016:	89fb      	ldrh	r3, [r7, #14]
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff fdcb 	bl	8005bb4 <ptr_to_mem>
 800601e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2200      	movs	r2, #0
 8006024:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	89ba      	ldrh	r2, [r7, #12]
 800602a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	8afa      	ldrh	r2, [r7, #22]
 8006030:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	89fa      	ldrh	r2, [r7, #14]
 8006036:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006040:	d047      	beq.n	80060d2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff fdb4 	bl	8005bb4 <ptr_to_mem>
 800604c:	4602      	mov	r2, r0
 800604e:	89fb      	ldrh	r3, [r7, #14]
 8006050:	8053      	strh	r3, [r2, #2]
 8006052:	e03e      	b.n	80060d2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006054:	8bfb      	ldrh	r3, [r7, #30]
 8006056:	f103 0214 	add.w	r2, r3, #20
 800605a:	8abb      	ldrh	r3, [r7, #20]
 800605c:	429a      	cmp	r2, r3
 800605e:	d838      	bhi.n	80060d2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006060:	8afa      	ldrh	r2, [r7, #22]
 8006062:	8bfb      	ldrh	r3, [r7, #30]
 8006064:	4413      	add	r3, r2
 8006066:	b29b      	uxth	r3, r3
 8006068:	3308      	adds	r3, #8
 800606a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006074:	d106      	bne.n	8006084 <mem_trim+0x180>
 8006076:	4b1b      	ldr	r3, [pc, #108]	; (80060e4 <mem_trim+0x1e0>)
 8006078:	f240 3216 	movw	r2, #790	; 0x316
 800607c:	491d      	ldr	r1, [pc, #116]	; (80060f4 <mem_trim+0x1f0>)
 800607e:	481b      	ldr	r0, [pc, #108]	; (80060ec <mem_trim+0x1e8>)
 8006080:	f00a f9d4 	bl	801042c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006084:	89fb      	ldrh	r3, [r7, #14]
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff fd94 	bl	8005bb4 <ptr_to_mem>
 800608c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800608e:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <mem_trim+0x1f4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	429a      	cmp	r2, r3
 8006096:	d202      	bcs.n	800609e <mem_trim+0x19a>
      lfree = mem2;
 8006098:	4a17      	ldr	r2, [pc, #92]	; (80060f8 <mem_trim+0x1f4>)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2200      	movs	r2, #0
 80060a2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	881a      	ldrh	r2, [r3, #0]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	8afa      	ldrh	r2, [r7, #22]
 80060b0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	89fa      	ldrh	r2, [r7, #14]
 80060b6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80060c0:	d007      	beq.n	80060d2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff fd74 	bl	8005bb4 <ptr_to_mem>
 80060cc:	4602      	mov	r2, r0
 80060ce:	89fb      	ldrh	r3, [r7, #14]
 80060d0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80060d2:	687b      	ldr	r3, [r7, #4]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	2000009c 	.word	0x2000009c
 80060e0:	200000a0 	.word	0x200000a0
 80060e4:	0801206c 	.word	0x0801206c
 80060e8:	080121dc 	.word	0x080121dc
 80060ec:	080120b4 	.word	0x080120b4
 80060f0:	080121f4 	.word	0x080121f4
 80060f4:	08012214 	.word	0x08012214
 80060f8:	200000a4 	.word	0x200000a4

080060fc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006106:	88fb      	ldrh	r3, [r7, #6]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <mem_malloc+0x14>
    return NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	e0d9      	b.n	80062c4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	3303      	adds	r3, #3
 8006114:	b29b      	uxth	r3, r3
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800611c:	8bbb      	ldrh	r3, [r7, #28]
 800611e:	2b0b      	cmp	r3, #11
 8006120:	d801      	bhi.n	8006126 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006122:	230c      	movs	r3, #12
 8006124:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006126:	8bbb      	ldrh	r3, [r7, #28]
 8006128:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800612c:	d803      	bhi.n	8006136 <mem_malloc+0x3a>
 800612e:	8bba      	ldrh	r2, [r7, #28]
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	429a      	cmp	r2, r3
 8006134:	d201      	bcs.n	800613a <mem_malloc+0x3e>
    return NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	e0c4      	b.n	80062c4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800613a:	4b64      	ldr	r3, [pc, #400]	; (80062cc <mem_malloc+0x1d0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fd4a 	bl	8005bd8 <mem_to_ptr>
 8006144:	4603      	mov	r3, r0
 8006146:	83fb      	strh	r3, [r7, #30]
 8006148:	e0b4      	b.n	80062b4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800614a:	8bfb      	ldrh	r3, [r7, #30]
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff fd31 	bl	8005bb4 <ptr_to_mem>
 8006152:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	791b      	ldrb	r3, [r3, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f040 80a4 	bne.w	80062a6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	8bfb      	ldrh	r3, [r7, #30]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f1a3 0208 	sub.w	r2, r3, #8
 800616c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800616e:	429a      	cmp	r2, r3
 8006170:	f0c0 8099 	bcc.w	80062a6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	8bfb      	ldrh	r3, [r7, #30]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	f1a3 0208 	sub.w	r2, r3, #8
 8006182:	8bbb      	ldrh	r3, [r7, #28]
 8006184:	3314      	adds	r3, #20
 8006186:	429a      	cmp	r2, r3
 8006188:	d333      	bcc.n	80061f2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800618a:	8bfa      	ldrh	r2, [r7, #30]
 800618c:	8bbb      	ldrh	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	b29b      	uxth	r3, r3
 8006192:	3308      	adds	r3, #8
 8006194:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006196:	8a7b      	ldrh	r3, [r7, #18]
 8006198:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800619c:	d106      	bne.n	80061ac <mem_malloc+0xb0>
 800619e:	4b4c      	ldr	r3, [pc, #304]	; (80062d0 <mem_malloc+0x1d4>)
 80061a0:	f240 3287 	movw	r2, #903	; 0x387
 80061a4:	494b      	ldr	r1, [pc, #300]	; (80062d4 <mem_malloc+0x1d8>)
 80061a6:	484c      	ldr	r0, [pc, #304]	; (80062d8 <mem_malloc+0x1dc>)
 80061a8:	f00a f940 	bl	801042c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80061ac:	8a7b      	ldrh	r3, [r7, #18]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff fd00 	bl	8005bb4 <ptr_to_mem>
 80061b4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	881a      	ldrh	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8bfa      	ldrh	r2, [r7, #30]
 80061c8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	8a7a      	ldrh	r2, [r7, #18]
 80061ce:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2201      	movs	r2, #1
 80061d4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80061de:	d00b      	beq.n	80061f8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff fce5 	bl	8005bb4 <ptr_to_mem>
 80061ea:	4602      	mov	r2, r0
 80061ec:	8a7b      	ldrh	r3, [r7, #18]
 80061ee:	8053      	strh	r3, [r2, #2]
 80061f0:	e002      	b.n	80061f8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2201      	movs	r2, #1
 80061f6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80061f8:	4b34      	ldr	r3, [pc, #208]	; (80062cc <mem_malloc+0x1d0>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d127      	bne.n	8006252 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006202:	4b32      	ldr	r3, [pc, #200]	; (80062cc <mem_malloc+0x1d0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006208:	e005      	b.n	8006216 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff fcd0 	bl	8005bb4 <ptr_to_mem>
 8006214:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	791b      	ldrb	r3, [r3, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <mem_malloc+0x12c>
 800621e:	4b2f      	ldr	r3, [pc, #188]	; (80062dc <mem_malloc+0x1e0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	429a      	cmp	r2, r3
 8006226:	d1f0      	bne.n	800620a <mem_malloc+0x10e>
          }
          lfree = cur;
 8006228:	4a28      	ldr	r2, [pc, #160]	; (80062cc <mem_malloc+0x1d0>)
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800622e:	4b27      	ldr	r3, [pc, #156]	; (80062cc <mem_malloc+0x1d0>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b2a      	ldr	r3, [pc, #168]	; (80062dc <mem_malloc+0x1e0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d00b      	beq.n	8006252 <mem_malloc+0x156>
 800623a:	4b24      	ldr	r3, [pc, #144]	; (80062cc <mem_malloc+0x1d0>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	791b      	ldrb	r3, [r3, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d006      	beq.n	8006252 <mem_malloc+0x156>
 8006244:	4b22      	ldr	r3, [pc, #136]	; (80062d0 <mem_malloc+0x1d4>)
 8006246:	f240 32b5 	movw	r2, #949	; 0x3b5
 800624a:	4925      	ldr	r1, [pc, #148]	; (80062e0 <mem_malloc+0x1e4>)
 800624c:	4822      	ldr	r0, [pc, #136]	; (80062d8 <mem_malloc+0x1dc>)
 800624e:	f00a f8ed 	bl	801042c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006252:	8bba      	ldrh	r2, [r7, #28]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4413      	add	r3, r2
 8006258:	3308      	adds	r3, #8
 800625a:	4a20      	ldr	r2, [pc, #128]	; (80062dc <mem_malloc+0x1e0>)
 800625c:	6812      	ldr	r2, [r2, #0]
 800625e:	4293      	cmp	r3, r2
 8006260:	d906      	bls.n	8006270 <mem_malloc+0x174>
 8006262:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <mem_malloc+0x1d4>)
 8006264:	f240 32ba 	movw	r2, #954	; 0x3ba
 8006268:	491e      	ldr	r1, [pc, #120]	; (80062e4 <mem_malloc+0x1e8>)
 800626a:	481b      	ldr	r0, [pc, #108]	; (80062d8 <mem_malloc+0x1dc>)
 800626c:	f00a f8de 	bl	801042c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d006      	beq.n	8006288 <mem_malloc+0x18c>
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <mem_malloc+0x1d4>)
 800627c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8006280:	4919      	ldr	r1, [pc, #100]	; (80062e8 <mem_malloc+0x1ec>)
 8006282:	4815      	ldr	r0, [pc, #84]	; (80062d8 <mem_malloc+0x1dc>)
 8006284:	f00a f8d2 	bl	801042c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d006      	beq.n	80062a0 <mem_malloc+0x1a4>
 8006292:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <mem_malloc+0x1d4>)
 8006294:	f240 32be 	movw	r2, #958	; 0x3be
 8006298:	4914      	ldr	r1, [pc, #80]	; (80062ec <mem_malloc+0x1f0>)
 800629a:	480f      	ldr	r0, [pc, #60]	; (80062d8 <mem_malloc+0x1dc>)
 800629c:	f00a f8c6 	bl	801042c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	3308      	adds	r3, #8
 80062a4:	e00e      	b.n	80062c4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80062a6:	8bfb      	ldrh	r3, [r7, #30]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff fc83 	bl	8005bb4 <ptr_to_mem>
 80062ae:	4603      	mov	r3, r0
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80062b4:	8bfa      	ldrh	r2, [r7, #30]
 80062b6:	8bbb      	ldrh	r3, [r7, #28]
 80062b8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80062bc:	429a      	cmp	r2, r3
 80062be:	f4ff af44 	bcc.w	800614a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3720      	adds	r7, #32
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	200000a4 	.word	0x200000a4
 80062d0:	0801206c 	.word	0x0801206c
 80062d4:	08012214 	.word	0x08012214
 80062d8:	080120b4 	.word	0x080120b4
 80062dc:	200000a0 	.word	0x200000a0
 80062e0:	08012228 	.word	0x08012228
 80062e4:	08012244 	.word	0x08012244
 80062e8:	08012274 	.word	0x08012274
 80062ec:	080122a4 	.word	0x080122a4

080062f0 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	460a      	mov	r2, r1
 80062fa:	80fb      	strh	r3, [r7, #6]
 80062fc:	4613      	mov	r3, r2
 80062fe:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	88ba      	ldrh	r2, [r7, #4]
 8006304:	fb02 f303 	mul.w	r3, r2, r3
 8006308:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	b29b      	uxth	r3, r3
 800630e:	461a      	mov	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4293      	cmp	r3, r2
 8006314:	d001      	beq.n	800631a <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	e00e      	b.n	8006338 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	b29b      	uxth	r3, r3
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff feec 	bl	80060fc <mem_malloc>
 8006324:	60b8      	str	r0, [r7, #8]
  if (p) {
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	2100      	movs	r1, #0
 8006330:	68b8      	ldr	r0, [r7, #8]
 8006332:	f00a f872 	bl	801041a <memset>
  }
  return p;
 8006336:	68bb      	ldr	r3, [r7, #8]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	3303      	adds	r3, #3
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e011      	b.n	8006386 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4413      	add	r3, r2
 800637e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	885b      	ldrh	r3, [r3, #2]
 800638a:	461a      	mov	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4293      	cmp	r3, r2
 8006390:	dbe7      	blt.n	8006362 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006392:	bf00      	nop
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80063a6:	2300      	movs	r3, #0
 80063a8:	80fb      	strh	r3, [r7, #6]
 80063aa:	e009      	b.n	80063c0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80063ac:	88fb      	ldrh	r3, [r7, #6]
 80063ae:	4a08      	ldr	r2, [pc, #32]	; (80063d0 <memp_init+0x30>)
 80063b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff ffc3 	bl	8006340 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	3301      	adds	r3, #1
 80063be:	80fb      	strh	r3, [r7, #6]
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d9f2      	bls.n	80063ac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	08014a74 	.word	0x08014a74

080063d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d012      	beq.n	8006410 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d006      	beq.n	800640c <do_memp_malloc_pool+0x38>
 80063fe:	4b07      	ldr	r3, [pc, #28]	; (800641c <do_memp_malloc_pool+0x48>)
 8006400:	f240 1219 	movw	r2, #281	; 0x119
 8006404:	4906      	ldr	r1, [pc, #24]	; (8006420 <do_memp_malloc_pool+0x4c>)
 8006406:	4807      	ldr	r0, [pc, #28]	; (8006424 <do_memp_malloc_pool+0x50>)
 8006408:	f00a f810 	bl	801042c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	e000      	b.n	8006412 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	080122c8 	.word	0x080122c8
 8006420:	080122f8 	.word	0x080122f8
 8006424:	0801231c 	.word	0x0801231c

08006428 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	4603      	mov	r3, r0
 8006430:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d908      	bls.n	800644a <memp_malloc+0x22>
 8006438:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <memp_malloc+0x3c>)
 800643a:	f240 1257 	movw	r2, #343	; 0x157
 800643e:	490a      	ldr	r1, [pc, #40]	; (8006468 <memp_malloc+0x40>)
 8006440:	480a      	ldr	r0, [pc, #40]	; (800646c <memp_malloc+0x44>)
 8006442:	f009 fff3 	bl	801042c <iprintf>
 8006446:	2300      	movs	r3, #0
 8006448:	e008      	b.n	800645c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	4a08      	ldr	r2, [pc, #32]	; (8006470 <memp_malloc+0x48>)
 800644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff ffbe 	bl	80063d4 <do_memp_malloc_pool>
 8006458:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800645a:	68fb      	ldr	r3, [r7, #12]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	080122c8 	.word	0x080122c8
 8006468:	08012358 	.word	0x08012358
 800646c:	0801231c 	.word	0x0801231c
 8006470:	08014a74 	.word	0x08014a74

08006474 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d006      	beq.n	8006496 <do_memp_free_pool+0x22>
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <do_memp_free_pool+0x40>)
 800648a:	f240 126d 	movw	r2, #365	; 0x16d
 800648e:	490a      	ldr	r1, [pc, #40]	; (80064b8 <do_memp_free_pool+0x44>)
 8006490:	480a      	ldr	r0, [pc, #40]	; (80064bc <do_memp_free_pool+0x48>)
 8006492:	f009 ffcb 	bl	801042c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80064ac:	bf00      	nop
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	080122c8 	.word	0x080122c8
 80064b8:	08012378 	.word	0x08012378
 80064bc:	0801231c 	.word	0x0801231c

080064c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	6039      	str	r1, [r7, #0]
 80064ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d907      	bls.n	80064e2 <memp_free+0x22>
 80064d2:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <memp_free+0x44>)
 80064d4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80064d8:	490b      	ldr	r1, [pc, #44]	; (8006508 <memp_free+0x48>)
 80064da:	480c      	ldr	r0, [pc, #48]	; (800650c <memp_free+0x4c>)
 80064dc:	f009 ffa6 	bl	801042c <iprintf>
 80064e0:	e00c      	b.n	80064fc <memp_free+0x3c>

  if (mem == NULL) {
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	4a09      	ldr	r2, [pc, #36]	; (8006510 <memp_free+0x50>)
 80064ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff ffbe 	bl	8006474 <do_memp_free_pool>
 80064f8:	e000      	b.n	80064fc <memp_free+0x3c>
    return;
 80064fa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	080122c8 	.word	0x080122c8
 8006508:	08012398 	.word	0x08012398
 800650c:	0801231c 	.word	0x0801231c
 8006510:	08014a74 	.word	0x08014a74

08006514 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006518:	bf00      	nop
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
	...

08006524 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d108      	bne.n	800654a <netif_add+0x26>
 8006538:	4b57      	ldr	r3, [pc, #348]	; (8006698 <netif_add+0x174>)
 800653a:	f240 1227 	movw	r2, #295	; 0x127
 800653e:	4957      	ldr	r1, [pc, #348]	; (800669c <netif_add+0x178>)
 8006540:	4857      	ldr	r0, [pc, #348]	; (80066a0 <netif_add+0x17c>)
 8006542:	f009 ff73 	bl	801042c <iprintf>
 8006546:	2300      	movs	r3, #0
 8006548:	e0a2      	b.n	8006690 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	d108      	bne.n	8006562 <netif_add+0x3e>
 8006550:	4b51      	ldr	r3, [pc, #324]	; (8006698 <netif_add+0x174>)
 8006552:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006556:	4953      	ldr	r1, [pc, #332]	; (80066a4 <netif_add+0x180>)
 8006558:	4851      	ldr	r0, [pc, #324]	; (80066a0 <netif_add+0x17c>)
 800655a:	f009 ff67 	bl	801042c <iprintf>
 800655e:	2300      	movs	r3, #0
 8006560:	e096      	b.n	8006690 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006568:	4b4f      	ldr	r3, [pc, #316]	; (80066a8 <netif_add+0x184>)
 800656a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006572:	4b4d      	ldr	r3, [pc, #308]	; (80066a8 <netif_add+0x184>)
 8006574:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800657c:	4b4a      	ldr	r3, [pc, #296]	; (80066a8 <netif_add+0x184>)
 800657e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4a45      	ldr	r2, [pc, #276]	; (80066ac <netif_add+0x188>)
 8006596:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a3a      	ldr	r2, [r7, #32]
 80065b0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80065b2:	4b3f      	ldr	r3, [pc, #252]	; (80066b0 <netif_add+0x18c>)
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f913 	bl	80067f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	4798      	blx	r3
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <netif_add+0xba>
    return NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	e058      	b.n	8006690 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065e4:	2bff      	cmp	r3, #255	; 0xff
 80065e6:	d103      	bne.n	80065f0 <netif_add+0xcc>
        netif->num = 0;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80065f4:	4b2f      	ldr	r3, [pc, #188]	; (80066b4 <netif_add+0x190>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e02b      	b.n	8006654 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	429a      	cmp	r2, r3
 8006602:	d106      	bne.n	8006612 <netif_add+0xee>
 8006604:	4b24      	ldr	r3, [pc, #144]	; (8006698 <netif_add+0x174>)
 8006606:	f240 128b 	movw	r2, #395	; 0x18b
 800660a:	492b      	ldr	r1, [pc, #172]	; (80066b8 <netif_add+0x194>)
 800660c:	4824      	ldr	r0, [pc, #144]	; (80066a0 <netif_add+0x17c>)
 800660e:	f009 ff0d 	bl	801042c <iprintf>
        num_netifs++;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3301      	adds	r3, #1
 8006616:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2bff      	cmp	r3, #255	; 0xff
 800661c:	dd06      	ble.n	800662c <netif_add+0x108>
 800661e:	4b1e      	ldr	r3, [pc, #120]	; (8006698 <netif_add+0x174>)
 8006620:	f240 128d 	movw	r2, #397	; 0x18d
 8006624:	4925      	ldr	r1, [pc, #148]	; (80066bc <netif_add+0x198>)
 8006626:	481e      	ldr	r0, [pc, #120]	; (80066a0 <netif_add+0x17c>)
 8006628:	f009 ff00 	bl	801042c <iprintf>
        if (netif2->num == netif->num) {
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006638:	429a      	cmp	r2, r3
 800663a:	d108      	bne.n	800664e <netif_add+0x12a>
          netif->num++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006642:	3301      	adds	r3, #1
 8006644:	b2da      	uxtb	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800664c:	e005      	b.n	800665a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1d0      	bne.n	80065fc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1be      	bne.n	80065de <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006666:	2bfe      	cmp	r3, #254	; 0xfe
 8006668:	d103      	bne.n	8006672 <netif_add+0x14e>
    netif_num = 0;
 800666a:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <netif_add+0x18c>)
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	e006      	b.n	8006680 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006678:	3301      	adds	r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <netif_add+0x18c>)
 800667e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006680:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <netif_add+0x190>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006688:	4a0a      	ldr	r2, [pc, #40]	; (80066b4 <netif_add+0x190>)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800668e:	68fb      	ldr	r3, [r7, #12]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	080123b4 	.word	0x080123b4
 800669c:	08012448 	.word	0x08012448
 80066a0:	08012404 	.word	0x08012404
 80066a4:	08012464 	.word	0x08012464
 80066a8:	08014ad8 	.word	0x08014ad8
 80066ac:	08006a07 	.word	0x08006a07
 80066b0:	200000cc 	.word	0x200000cc
 80066b4:	2000693c 	.word	0x2000693c
 80066b8:	08012488 	.word	0x08012488
 80066bc:	0801249c 	.word	0x0801249c

080066c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f002 fddf 	bl	8009290 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f007 fb5f 	bl	800dd98 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80066da:	bf00      	nop
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <netif_do_set_ipaddr+0x20>
 80066f6:	4b1d      	ldr	r3, [pc, #116]	; (800676c <netif_do_set_ipaddr+0x88>)
 80066f8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80066fc:	491c      	ldr	r1, [pc, #112]	; (8006770 <netif_do_set_ipaddr+0x8c>)
 80066fe:	481d      	ldr	r0, [pc, #116]	; (8006774 <netif_do_set_ipaddr+0x90>)
 8006700:	f009 fe94 	bl	801042c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <netif_do_set_ipaddr+0x34>
 800670a:	4b18      	ldr	r3, [pc, #96]	; (800676c <netif_do_set_ipaddr+0x88>)
 800670c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006710:	4917      	ldr	r1, [pc, #92]	; (8006770 <netif_do_set_ipaddr+0x8c>)
 8006712:	4818      	ldr	r0, [pc, #96]	; (8006774 <netif_do_set_ipaddr+0x90>)
 8006714:	f009 fe8a 	bl	801042c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3304      	adds	r3, #4
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d01c      	beq.n	8006760 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3304      	adds	r3, #4
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006736:	f107 0314 	add.w	r3, r7, #20
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff ffbf 	bl	80066c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <netif_do_set_ipaddr+0x6a>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	e000      	b.n	8006750 <netif_do_set_ipaddr+0x6c>
 800674e:	2300      	movs	r3, #0
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006754:	2101      	movs	r1, #1
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f8d2 	bl	8006900 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	080123b4 	.word	0x080123b4
 8006770:	080124cc 	.word	0x080124cc
 8006774:	08012404 	.word	0x08012404

08006778 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3308      	adds	r3, #8
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d00a      	beq.n	80067a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <netif_do_set_netmask+0x26>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	e000      	b.n	80067a0 <netif_do_set_netmask+0x28>
 800679e:	2300      	movs	r3, #0
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	330c      	adds	r3, #12
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d00a      	beq.n	80067e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <netif_do_set_gw+0x26>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	e000      	b.n	80067de <netif_do_set_gw+0x28>
 80067dc:	2300      	movs	r3, #0
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80067e2:	2301      	movs	r3, #1
 80067e4:	e000      	b.n	80067e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006810:	4b1c      	ldr	r3, [pc, #112]	; (8006884 <netif_set_addr+0x90>)
 8006812:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800681a:	4b1a      	ldr	r3, [pc, #104]	; (8006884 <netif_set_addr+0x90>)
 800681c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006824:	4b17      	ldr	r3, [pc, #92]	; (8006884 <netif_set_addr+0x90>)
 8006826:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <netif_set_addr+0x42>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <netif_set_addr+0x46>
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <netif_set_addr+0x48>
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d006      	beq.n	8006852 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006844:	f107 0310 	add.w	r3, r7, #16
 8006848:	461a      	mov	r2, r3
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff ff49 	bl	80066e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff ff8e 	bl	8006778 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f7ff ffa8 	bl	80067b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d106      	bne.n	800687a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800686c:	f107 0310 	add.w	r3, r7, #16
 8006870:	461a      	mov	r2, r3
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7ff ff35 	bl	80066e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800687a:	bf00      	nop
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	08014ad8 	.word	0x08014ad8

08006888 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006890:	4a04      	ldr	r2, [pc, #16]	; (80068a4 <netif_set_default+0x1c>)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20006940 	.word	0x20006940

080068a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d107      	bne.n	80068c6 <netif_set_up+0x1e>
 80068b6:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <netif_set_up+0x4c>)
 80068b8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80068bc:	490e      	ldr	r1, [pc, #56]	; (80068f8 <netif_set_up+0x50>)
 80068be:	480f      	ldr	r0, [pc, #60]	; (80068fc <netif_set_up+0x54>)
 80068c0:	f009 fdb4 	bl	801042c <iprintf>
 80068c4:	e013      	b.n	80068ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10c      	bne.n	80068ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80068e6:	2103      	movs	r1, #3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f809 	bl	8006900 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	080123b4 	.word	0x080123b4
 80068f8:	0801253c 	.word	0x0801253c
 80068fc:	08012404 	.word	0x08012404

08006900 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <netif_issue_reports+0x20>
 8006912:	4b18      	ldr	r3, [pc, #96]	; (8006974 <netif_issue_reports+0x74>)
 8006914:	f240 326d 	movw	r2, #877	; 0x36d
 8006918:	4917      	ldr	r1, [pc, #92]	; (8006978 <netif_issue_reports+0x78>)
 800691a:	4818      	ldr	r0, [pc, #96]	; (800697c <netif_issue_reports+0x7c>)
 800691c:	f009 fd86 	bl	801042c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01e      	beq.n	800696c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006934:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006938:	2b00      	cmp	r3, #0
 800693a:	d017      	beq.n	800696c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d013      	beq.n	800696e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3304      	adds	r3, #4
 800694a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00e      	beq.n	800696e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3304      	adds	r3, #4
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f008 f981 	bl	800ec6c <etharp_request>
 800696a:	e000      	b.n	800696e <netif_issue_reports+0x6e>
    return;
 800696c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	080123b4 	.word	0x080123b4
 8006978:	08012558 	.word	0x08012558
 800697c:	08012404 	.word	0x08012404

08006980 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d107      	bne.n	800699e <netif_set_down+0x1e>
 800698e:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <netif_set_down+0x58>)
 8006990:	f240 329b 	movw	r2, #923	; 0x39b
 8006994:	4911      	ldr	r1, [pc, #68]	; (80069dc <netif_set_down+0x5c>)
 8006996:	4812      	ldr	r0, [pc, #72]	; (80069e0 <netif_set_down+0x60>)
 8006998:	f009 fd48 	bl	801042c <iprintf>
 800699c:	e019      	b.n	80069d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d012      	beq.n	80069d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f007 fd0b 	bl	800e3e8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	080123b4 	.word	0x080123b4
 80069dc:	0801257c 	.word	0x0801257c
 80069e0:	08012404 	.word	0x08012404

080069e4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	61da      	str	r2, [r3, #28]
  }
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006a12:	f06f 030b 	mvn.w	r3, #11
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d013      	beq.n	8006a5c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006a34:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <netif_get_by_index+0x48>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60fb      	str	r3, [r7, #12]
 8006a3a:	e00c      	b.n	8006a56 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a42:	3301      	adds	r3, #1
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	79fa      	ldrb	r2, [r7, #7]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d101      	bne.n	8006a50 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	e006      	b.n	8006a5e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1ef      	bne.n	8006a3c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	2000693c 	.word	0x2000693c

08006a70 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006a76:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <pbuf_free_ooseq+0x38>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <pbuf_free_ooseq+0x3c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	607b      	str	r3, [r7, #4]
 8006a82:	e00a      	b.n	8006a9a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f002 fc3d 	bl	800930c <tcp_free_ooseq>
      return;
 8006a92:	e005      	b.n	8006aa0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	607b      	str	r3, [r7, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1f1      	bne.n	8006a84 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20006944 	.word	0x20006944
 8006aac:	2000694c 	.word	0x2000694c

08006ab0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006ab4:	4b03      	ldr	r3, [pc, #12]	; (8006ac4 <pbuf_pool_is_empty+0x14>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006aba:	bf00      	nop
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	20006944 	.word	0x20006944

08006ac8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	80fb      	strh	r3, [r7, #6]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	88fa      	ldrh	r2, [r7, #6]
 8006aee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	88ba      	ldrh	r2, [r7, #4]
 8006af4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006af6:	8b3b      	ldrh	r3, [r7, #24]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	7f3a      	ldrb	r2, [r7, #28]
 8006b02:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2201      	movs	r2, #1
 8006b08:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	73da      	strb	r2, [r3, #15]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08c      	sub	sp, #48	; 0x30
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	4603      	mov	r3, r0
 8006b24:	71fb      	strb	r3, [r7, #7]
 8006b26:	460b      	mov	r3, r1
 8006b28:	80bb      	strh	r3, [r7, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006b32:	887b      	ldrh	r3, [r7, #2]
 8006b34:	2b41      	cmp	r3, #65	; 0x41
 8006b36:	d00b      	beq.n	8006b50 <pbuf_alloc+0x34>
 8006b38:	2b41      	cmp	r3, #65	; 0x41
 8006b3a:	dc02      	bgt.n	8006b42 <pbuf_alloc+0x26>
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d007      	beq.n	8006b50 <pbuf_alloc+0x34>
 8006b40:	e0c2      	b.n	8006cc8 <pbuf_alloc+0x1ac>
 8006b42:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006b46:	d00b      	beq.n	8006b60 <pbuf_alloc+0x44>
 8006b48:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006b4c:	d070      	beq.n	8006c30 <pbuf_alloc+0x114>
 8006b4e:	e0bb      	b.n	8006cc8 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006b50:	887a      	ldrh	r2, [r7, #2]
 8006b52:	88bb      	ldrh	r3, [r7, #4]
 8006b54:	4619      	mov	r1, r3
 8006b56:	2000      	movs	r0, #0
 8006b58:	f000 f8d2 	bl	8006d00 <pbuf_alloc_reference>
 8006b5c:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006b5e:	e0bd      	b.n	8006cdc <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006b68:	88bb      	ldrh	r3, [r7, #4]
 8006b6a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006b6c:	2008      	movs	r0, #8
 8006b6e:	f7ff fc5b 	bl	8006428 <memp_malloc>
 8006b72:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8006b7a:	f7ff ff99 	bl	8006ab0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <pbuf_alloc+0x6e>
            pbuf_free(p);
 8006b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b86:	f000 faa9 	bl	80070dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e0a7      	b.n	8006cde <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006b8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b90:	3303      	adds	r3, #3
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f023 0303 	bic.w	r3, r3, #3
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	8b7a      	ldrh	r2, [r7, #26]
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	bf28      	it	cs
 8006ba6:	4613      	movcs	r3, r2
 8006ba8:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006baa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bac:	3310      	adds	r3, #16
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	3303      	adds	r3, #3
 8006bb4:	f023 0303 	bic.w	r3, r3, #3
 8006bb8:	4618      	mov	r0, r3
 8006bba:	89f9      	ldrh	r1, [r7, #14]
 8006bbc:	8b7a      	ldrh	r2, [r7, #26]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	887b      	ldrh	r3, [r7, #2]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4601      	mov	r1, r0
 8006bca:	6938      	ldr	r0, [r7, #16]
 8006bcc:	f7ff ff7c 	bl	8006ac8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d006      	beq.n	8006bea <pbuf_alloc+0xce>
 8006bdc:	4b42      	ldr	r3, [pc, #264]	; (8006ce8 <pbuf_alloc+0x1cc>)
 8006bde:	f240 1201 	movw	r2, #257	; 0x101
 8006be2:	4942      	ldr	r1, [pc, #264]	; (8006cec <pbuf_alloc+0x1d0>)
 8006be4:	4842      	ldr	r0, [pc, #264]	; (8006cf0 <pbuf_alloc+0x1d4>)
 8006be6:	f009 fc21 	bl	801042c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006bea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bec:	3303      	adds	r3, #3
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006bf6:	d106      	bne.n	8006c06 <pbuf_alloc+0xea>
 8006bf8:	4b3b      	ldr	r3, [pc, #236]	; (8006ce8 <pbuf_alloc+0x1cc>)
 8006bfa:	f240 1203 	movw	r2, #259	; 0x103
 8006bfe:	493d      	ldr	r1, [pc, #244]	; (8006cf4 <pbuf_alloc+0x1d8>)
 8006c00:	483b      	ldr	r0, [pc, #236]	; (8006cf0 <pbuf_alloc+0x1d4>)
 8006c02:	f009 fc13 	bl	801042c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c10:	e002      	b.n	8006c18 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006c1c:	8b7a      	ldrh	r2, [r7, #26]
 8006c1e:	89fb      	ldrh	r3, [r7, #14]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006c28:	8b7b      	ldrh	r3, [r7, #26]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d19e      	bne.n	8006b6c <pbuf_alloc+0x50>
      break;
 8006c2e:	e055      	b.n	8006cdc <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006c30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c32:	3303      	adds	r3, #3
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	88bb      	ldrh	r3, [r7, #4]
 8006c3e:	3303      	adds	r3, #3
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	4413      	add	r3, r2
 8006c4a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006c4c:	8b3b      	ldrh	r3, [r7, #24]
 8006c4e:	3310      	adds	r3, #16
 8006c50:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006c52:	8b3a      	ldrh	r2, [r7, #24]
 8006c54:	88bb      	ldrh	r3, [r7, #4]
 8006c56:	3303      	adds	r3, #3
 8006c58:	f023 0303 	bic.w	r3, r3, #3
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d306      	bcc.n	8006c6e <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006c60:	8afa      	ldrh	r2, [r7, #22]
 8006c62:	88bb      	ldrh	r3, [r7, #4]
 8006c64:	3303      	adds	r3, #3
 8006c66:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d201      	bcs.n	8006c72 <pbuf_alloc+0x156>
        return NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e035      	b.n	8006cde <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006c72:	8afb      	ldrh	r3, [r7, #22]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff fa41 	bl	80060fc <mem_malloc>
 8006c7a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <pbuf_alloc+0x16a>
        return NULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	e02b      	b.n	8006cde <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006c86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c88:	3310      	adds	r3, #16
 8006c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c8c:	4413      	add	r3, r2
 8006c8e:	3303      	adds	r3, #3
 8006c90:	f023 0303 	bic.w	r3, r3, #3
 8006c94:	4618      	mov	r0, r3
 8006c96:	88b9      	ldrh	r1, [r7, #4]
 8006c98:	88ba      	ldrh	r2, [r7, #4]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	887b      	ldrh	r3, [r7, #2]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4601      	mov	r1, r0
 8006ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ca8:	f7ff ff0e 	bl	8006ac8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f003 0303 	and.w	r3, r3, #3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d010      	beq.n	8006cda <pbuf_alloc+0x1be>
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <pbuf_alloc+0x1cc>)
 8006cba:	f240 1223 	movw	r2, #291	; 0x123
 8006cbe:	490e      	ldr	r1, [pc, #56]	; (8006cf8 <pbuf_alloc+0x1dc>)
 8006cc0:	480b      	ldr	r0, [pc, #44]	; (8006cf0 <pbuf_alloc+0x1d4>)
 8006cc2:	f009 fbb3 	bl	801042c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006cc6:	e008      	b.n	8006cda <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006cc8:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <pbuf_alloc+0x1cc>)
 8006cca:	f240 1227 	movw	r2, #295	; 0x127
 8006cce:	490b      	ldr	r1, [pc, #44]	; (8006cfc <pbuf_alloc+0x1e0>)
 8006cd0:	4807      	ldr	r0, [pc, #28]	; (8006cf0 <pbuf_alloc+0x1d4>)
 8006cd2:	f009 fbab 	bl	801042c <iprintf>
      return NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e001      	b.n	8006cde <pbuf_alloc+0x1c2>
      break;
 8006cda:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3728      	adds	r7, #40	; 0x28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	080125e4 	.word	0x080125e4
 8006cec:	08012614 	.word	0x08012614
 8006cf0:	08012644 	.word	0x08012644
 8006cf4:	0801266c 	.word	0x0801266c
 8006cf8:	080126a0 	.word	0x080126a0
 8006cfc:	080126cc 	.word	0x080126cc

08006d00 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	807b      	strh	r3, [r7, #2]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006d10:	883b      	ldrh	r3, [r7, #0]
 8006d12:	2b41      	cmp	r3, #65	; 0x41
 8006d14:	d009      	beq.n	8006d2a <pbuf_alloc_reference+0x2a>
 8006d16:	883b      	ldrh	r3, [r7, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d006      	beq.n	8006d2a <pbuf_alloc_reference+0x2a>
 8006d1c:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <pbuf_alloc_reference+0x5c>)
 8006d1e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006d22:	490f      	ldr	r1, [pc, #60]	; (8006d60 <pbuf_alloc_reference+0x60>)
 8006d24:	480f      	ldr	r0, [pc, #60]	; (8006d64 <pbuf_alloc_reference+0x64>)
 8006d26:	f009 fb81 	bl	801042c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006d2a:	2007      	movs	r0, #7
 8006d2c:	f7ff fb7c 	bl	8006428 <memp_malloc>
 8006d30:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e00b      	b.n	8006d54 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006d3c:	8879      	ldrh	r1, [r7, #2]
 8006d3e:	887a      	ldrh	r2, [r7, #2]
 8006d40:	2300      	movs	r3, #0
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	883b      	ldrh	r3, [r7, #0]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff febb 	bl	8006ac8 <pbuf_init_alloced_pbuf>
  return p;
 8006d52:	68fb      	ldr	r3, [r7, #12]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	080125e4 	.word	0x080125e4
 8006d60:	080126e8 	.word	0x080126e8
 8006d64:	08012644 	.word	0x08012644

08006d68 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	4603      	mov	r3, r0
 8006d72:	73fb      	strb	r3, [r7, #15]
 8006d74:	460b      	mov	r3, r1
 8006d76:	81bb      	strh	r3, [r7, #12]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006d80:	8a7b      	ldrh	r3, [r7, #18]
 8006d82:	3303      	adds	r3, #3
 8006d84:	f023 0203 	bic.w	r2, r3, #3
 8006d88:	89bb      	ldrh	r3, [r7, #12]
 8006d8a:	441a      	add	r2, r3
 8006d8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d901      	bls.n	8006d96 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e018      	b.n	8006dc8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d007      	beq.n	8006dac <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006d9c:	8a7b      	ldrh	r3, [r7, #18]
 8006d9e:	3303      	adds	r3, #3
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	6a3a      	ldr	r2, [r7, #32]
 8006da6:	4413      	add	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	e001      	b.n	8006db0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	89b9      	ldrh	r1, [r7, #12]
 8006db4:	89ba      	ldrh	r2, [r7, #12]
 8006db6:	2302      	movs	r3, #2
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	897b      	ldrh	r3, [r7, #10]
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	6979      	ldr	r1, [r7, #20]
 8006dc2:	f7ff fe81 	bl	8006ac8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006dc6:	687b      	ldr	r3, [r7, #4]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <pbuf_realloc+0x20>
 8006de2:	4b3a      	ldr	r3, [pc, #232]	; (8006ecc <pbuf_realloc+0xfc>)
 8006de4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006de8:	4939      	ldr	r1, [pc, #228]	; (8006ed0 <pbuf_realloc+0x100>)
 8006dea:	483a      	ldr	r0, [pc, #232]	; (8006ed4 <pbuf_realloc+0x104>)
 8006dec:	f009 fb1e 	bl	801042c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	891b      	ldrh	r3, [r3, #8]
 8006df4:	887a      	ldrh	r2, [r7, #2]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d264      	bcs.n	8006ec4 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	891a      	ldrh	r2, [r3, #8]
 8006dfe:	887b      	ldrh	r3, [r7, #2]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006e04:	887b      	ldrh	r3, [r7, #2]
 8006e06:	817b      	strh	r3, [r7, #10]
  q = p;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006e0c:	e018      	b.n	8006e40 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	895b      	ldrh	r3, [r3, #10]
 8006e12:	897a      	ldrh	r2, [r7, #10]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	891a      	ldrh	r2, [r3, #8]
 8006e1c:	893b      	ldrh	r3, [r7, #8]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <pbuf_realloc+0x70>
 8006e32:	4b26      	ldr	r3, [pc, #152]	; (8006ecc <pbuf_realloc+0xfc>)
 8006e34:	f240 12af 	movw	r2, #431	; 0x1af
 8006e38:	4927      	ldr	r1, [pc, #156]	; (8006ed8 <pbuf_realloc+0x108>)
 8006e3a:	4826      	ldr	r0, [pc, #152]	; (8006ed4 <pbuf_realloc+0x104>)
 8006e3c:	f009 faf6 	bl	801042c <iprintf>
  while (rem_len > q->len) {
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	895b      	ldrh	r3, [r3, #10]
 8006e44:	897a      	ldrh	r2, [r7, #10]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d8e1      	bhi.n	8006e0e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	7b1b      	ldrb	r3, [r3, #12]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d122      	bne.n	8006e9c <pbuf_realloc+0xcc>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	895b      	ldrh	r3, [r3, #10]
 8006e5a:	897a      	ldrh	r2, [r7, #10]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d01d      	beq.n	8006e9c <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	7b5b      	ldrb	r3, [r3, #13]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d117      	bne.n	8006e9c <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	461a      	mov	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	897b      	ldrh	r3, [r7, #10]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4619      	mov	r1, r3
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7ff f83f 	bl	8005f04 <mem_trim>
 8006e86:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <pbuf_realloc+0xcc>
 8006e8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <pbuf_realloc+0xfc>)
 8006e90:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006e94:	4911      	ldr	r1, [pc, #68]	; (8006edc <pbuf_realloc+0x10c>)
 8006e96:	480f      	ldr	r0, [pc, #60]	; (8006ed4 <pbuf_realloc+0x104>)
 8006e98:	f009 fac8 	bl	801042c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	897a      	ldrh	r2, [r7, #10]
 8006ea0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	895a      	ldrh	r2, [r3, #10]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d004      	beq.n	8006ebc <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 f910 	bl	80070dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	e000      	b.n	8006ec6 <pbuf_realloc+0xf6>
    return;
 8006ec4:	bf00      	nop

}
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	080125e4 	.word	0x080125e4
 8006ed0:	080126fc 	.word	0x080126fc
 8006ed4:	08012644 	.word	0x08012644
 8006ed8:	08012714 	.word	0x08012714
 8006edc:	0801272c 	.word	0x0801272c

08006ee0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	4613      	mov	r3, r2
 8006eec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <pbuf_add_header_impl+0x22>
 8006ef4:	4b2b      	ldr	r3, [pc, #172]	; (8006fa4 <pbuf_add_header_impl+0xc4>)
 8006ef6:	f240 12df 	movw	r2, #479	; 0x1df
 8006efa:	492b      	ldr	r1, [pc, #172]	; (8006fa8 <pbuf_add_header_impl+0xc8>)
 8006efc:	482b      	ldr	r0, [pc, #172]	; (8006fac <pbuf_add_header_impl+0xcc>)
 8006efe:	f009 fa95 	bl	801042c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <pbuf_add_header_impl+0x30>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0e:	d301      	bcc.n	8006f14 <pbuf_add_header_impl+0x34>
    return 1;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e043      	b.n	8006f9c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <pbuf_add_header_impl+0x3e>
    return 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e03e      	b.n	8006f9c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	891a      	ldrh	r2, [r3, #8]
 8006f26:	8a7b      	ldrh	r3, [r7, #18]
 8006f28:	4413      	add	r3, r2
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	8a7a      	ldrh	r2, [r7, #18]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d901      	bls.n	8006f36 <pbuf_add_header_impl+0x56>
    return 1;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e032      	b.n	8006f9c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	7b1b      	ldrb	r3, [r3, #12]
 8006f3a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006f3c:	8a3b      	ldrh	r3, [r7, #16]
 8006f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	425b      	negs	r3, r3
 8006f4e:	4413      	add	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3310      	adds	r3, #16
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d20d      	bcs.n	8006f78 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e01d      	b.n	8006f9c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d006      	beq.n	8006f74 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	425b      	negs	r3, r3
 8006f6e:	4413      	add	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	e001      	b.n	8006f78 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e011      	b.n	8006f9c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	895a      	ldrh	r2, [r3, #10]
 8006f82:	8a7b      	ldrh	r3, [r7, #18]
 8006f84:	4413      	add	r3, r2
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	891a      	ldrh	r2, [r3, #8]
 8006f90:	8a7b      	ldrh	r3, [r7, #18]
 8006f92:	4413      	add	r3, r2
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	811a      	strh	r2, [r3, #8]


  return 0;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	080125e4 	.word	0x080125e4
 8006fa8:	08012748 	.word	0x08012748
 8006fac:	08012644 	.word	0x08012644

08006fb0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006fba:	2200      	movs	r2, #0
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff ff8e 	bl	8006ee0 <pbuf_add_header_impl>
 8006fc4:	4603      	mov	r3, r0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d106      	bne.n	8006fee <pbuf_remove_header+0x1e>
 8006fe0:	4b20      	ldr	r3, [pc, #128]	; (8007064 <pbuf_remove_header+0x94>)
 8006fe2:	f240 224b 	movw	r2, #587	; 0x24b
 8006fe6:	4920      	ldr	r1, [pc, #128]	; (8007068 <pbuf_remove_header+0x98>)
 8006fe8:	4820      	ldr	r0, [pc, #128]	; (800706c <pbuf_remove_header+0x9c>)
 8006fea:	f009 fa1f 	bl	801042c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <pbuf_remove_header+0x2c>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffa:	d301      	bcc.n	8007000 <pbuf_remove_header+0x30>
    return 1;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e02c      	b.n	800705a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <pbuf_remove_header+0x3a>
    return 0;
 8007006:	2300      	movs	r3, #0
 8007008:	e027      	b.n	800705a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	895b      	ldrh	r3, [r3, #10]
 8007012:	89fa      	ldrh	r2, [r7, #14]
 8007014:	429a      	cmp	r2, r3
 8007016:	d908      	bls.n	800702a <pbuf_remove_header+0x5a>
 8007018:	4b12      	ldr	r3, [pc, #72]	; (8007064 <pbuf_remove_header+0x94>)
 800701a:	f240 2255 	movw	r2, #597	; 0x255
 800701e:	4914      	ldr	r1, [pc, #80]	; (8007070 <pbuf_remove_header+0xa0>)
 8007020:	4812      	ldr	r0, [pc, #72]	; (800706c <pbuf_remove_header+0x9c>)
 8007022:	f009 fa03 	bl	801042c <iprintf>
 8007026:	2301      	movs	r3, #1
 8007028:	e017      	b.n	800705a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	441a      	add	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	895a      	ldrh	r2, [r3, #10]
 8007040:	89fb      	ldrh	r3, [r7, #14]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	b29a      	uxth	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	891a      	ldrh	r2, [r3, #8]
 800704e:	89fb      	ldrh	r3, [r7, #14]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	b29a      	uxth	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	080125e4 	.word	0x080125e4
 8007068:	08012748 	.word	0x08012748
 800706c:	08012644 	.word	0x08012644
 8007070:	08012754 	.word	0x08012754

08007074 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	807b      	strh	r3, [r7, #2]
 8007080:	4613      	mov	r3, r2
 8007082:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007084:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007088:	2b00      	cmp	r3, #0
 800708a:	da08      	bge.n	800709e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800708c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007090:	425b      	negs	r3, r3
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff ff9b 	bl	8006fd0 <pbuf_remove_header>
 800709a:	4603      	mov	r3, r0
 800709c:	e007      	b.n	80070ae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800709e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070a2:	787a      	ldrb	r2, [r7, #1]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff ff1a 	bl	8006ee0 <pbuf_add_header_impl>
 80070ac:	4603      	mov	r3, r0
  }
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	460b      	mov	r3, r1
 80070c0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80070c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070c6:	2201      	movs	r2, #1
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff ffd2 	bl	8007074 <pbuf_header_impl>
 80070d0:	4603      	mov	r3, r0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10b      	bne.n	8007102 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <pbuf_free+0x22>
 80070f0:	4b38      	ldr	r3, [pc, #224]	; (80071d4 <pbuf_free+0xf8>)
 80070f2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80070f6:	4938      	ldr	r1, [pc, #224]	; (80071d8 <pbuf_free+0xfc>)
 80070f8:	4838      	ldr	r0, [pc, #224]	; (80071dc <pbuf_free+0x100>)
 80070fa:	f009 f997 	bl	801042c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	e063      	b.n	80071ca <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007106:	e05c      	b.n	80071c2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	7b9b      	ldrb	r3, [r3, #14]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d106      	bne.n	800711e <pbuf_free+0x42>
 8007110:	4b30      	ldr	r3, [pc, #192]	; (80071d4 <pbuf_free+0xf8>)
 8007112:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007116:	4932      	ldr	r1, [pc, #200]	; (80071e0 <pbuf_free+0x104>)
 8007118:	4830      	ldr	r0, [pc, #192]	; (80071dc <pbuf_free+0x100>)
 800711a:	f009 f987 	bl	801042c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	7b9b      	ldrb	r3, [r3, #14]
 8007122:	3b01      	subs	r3, #1
 8007124:	b2da      	uxtb	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	739a      	strb	r2, [r3, #14]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7b9b      	ldrb	r3, [r3, #14]
 800712e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007130:	7dbb      	ldrb	r3, [r7, #22]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d143      	bne.n	80071be <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	7b1b      	ldrb	r3, [r3, #12]
 8007140:	f003 030f 	and.w	r3, r3, #15
 8007144:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	7b5b      	ldrb	r3, [r3, #13]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d011      	beq.n	8007176 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <pbuf_free+0x90>
 800715e:	4b1d      	ldr	r3, [pc, #116]	; (80071d4 <pbuf_free+0xf8>)
 8007160:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007164:	491f      	ldr	r1, [pc, #124]	; (80071e4 <pbuf_free+0x108>)
 8007166:	481d      	ldr	r0, [pc, #116]	; (80071dc <pbuf_free+0x100>)
 8007168:	f009 f960 	bl	801042c <iprintf>
        pc->custom_free_function(p);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
 8007174:	e01d      	b.n	80071b2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d104      	bne.n	8007186 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	2008      	movs	r0, #8
 8007180:	f7ff f99e 	bl	80064c0 <memp_free>
 8007184:	e015      	b.n	80071b2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d104      	bne.n	8007196 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	2007      	movs	r0, #7
 8007190:	f7ff f996 	bl	80064c0 <memp_free>
 8007194:	e00d      	b.n	80071b2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <pbuf_free+0xc8>
          mem_free(p);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7fe fe47 	bl	8005e30 <mem_free>
 80071a2:	e006      	b.n	80071b2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <pbuf_free+0xf8>)
 80071a6:	f240 320f 	movw	r2, #783	; 0x30f
 80071aa:	490f      	ldr	r1, [pc, #60]	; (80071e8 <pbuf_free+0x10c>)
 80071ac:	480b      	ldr	r0, [pc, #44]	; (80071dc <pbuf_free+0x100>)
 80071ae:	f009 f93d 	bl	801042c <iprintf>
        }
      }
      count++;
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	3301      	adds	r3, #1
 80071b6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	607b      	str	r3, [r7, #4]
 80071bc:	e001      	b.n	80071c2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d19f      	bne.n	8007108 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	080125e4 	.word	0x080125e4
 80071d8:	08012748 	.word	0x08012748
 80071dc:	08012644 	.word	0x08012644
 80071e0:	08012774 	.word	0x08012774
 80071e4:	0801278c 	.word	0x0801278c
 80071e8:	080127b0 	.word	0x080127b0

080071ec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80071f8:	e005      	b.n	8007206 <pbuf_clen+0x1a>
    ++len;
 80071fa:	89fb      	ldrh	r3, [r7, #14]
 80071fc:	3301      	adds	r3, #1
 80071fe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1f6      	bne.n	80071fa <pbuf_clen+0xe>
  }
  return len;
 800720c:	89fb      	ldrh	r3, [r7, #14]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d010      	beq.n	800724c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7b9b      	ldrb	r3, [r3, #14]
 800722e:	3301      	adds	r3, #1
 8007230:	b2da      	uxtb	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	7b9b      	ldrb	r3, [r3, #14]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <pbuf_ref+0x30>
 800723e:	4b05      	ldr	r3, [pc, #20]	; (8007254 <pbuf_ref+0x38>)
 8007240:	f240 3242 	movw	r2, #834	; 0x342
 8007244:	4904      	ldr	r1, [pc, #16]	; (8007258 <pbuf_ref+0x3c>)
 8007246:	4805      	ldr	r0, [pc, #20]	; (800725c <pbuf_ref+0x40>)
 8007248:	f009 f8f0 	bl	801042c <iprintf>
  }
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	080125e4 	.word	0x080125e4
 8007258:	080127c4 	.word	0x080127c4
 800725c:	08012644 	.word	0x08012644

08007260 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <pbuf_cat+0x16>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d107      	bne.n	8007286 <pbuf_cat+0x26>
 8007276:	4b20      	ldr	r3, [pc, #128]	; (80072f8 <pbuf_cat+0x98>)
 8007278:	f240 325a 	movw	r2, #858	; 0x35a
 800727c:	491f      	ldr	r1, [pc, #124]	; (80072fc <pbuf_cat+0x9c>)
 800727e:	4820      	ldr	r0, [pc, #128]	; (8007300 <pbuf_cat+0xa0>)
 8007280:	f009 f8d4 	bl	801042c <iprintf>
 8007284:	e034      	b.n	80072f0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e00a      	b.n	80072a2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	891a      	ldrh	r2, [r3, #8]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	891b      	ldrh	r3, [r3, #8]
 8007294:	4413      	add	r3, r2
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f0      	bne.n	800728c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	891a      	ldrh	r2, [r3, #8]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	895b      	ldrh	r3, [r3, #10]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d006      	beq.n	80072c4 <pbuf_cat+0x64>
 80072b6:	4b10      	ldr	r3, [pc, #64]	; (80072f8 <pbuf_cat+0x98>)
 80072b8:	f240 3262 	movw	r2, #866	; 0x362
 80072bc:	4911      	ldr	r1, [pc, #68]	; (8007304 <pbuf_cat+0xa4>)
 80072be:	4810      	ldr	r0, [pc, #64]	; (8007300 <pbuf_cat+0xa0>)
 80072c0:	f009 f8b4 	bl	801042c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d006      	beq.n	80072da <pbuf_cat+0x7a>
 80072cc:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <pbuf_cat+0x98>)
 80072ce:	f240 3263 	movw	r2, #867	; 0x363
 80072d2:	490d      	ldr	r1, [pc, #52]	; (8007308 <pbuf_cat+0xa8>)
 80072d4:	480a      	ldr	r0, [pc, #40]	; (8007300 <pbuf_cat+0xa0>)
 80072d6:	f009 f8a9 	bl	801042c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	891a      	ldrh	r2, [r3, #8]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	891b      	ldrh	r3, [r3, #8]
 80072e2:	4413      	add	r3, r2
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	080125e4 	.word	0x080125e4
 80072fc:	080127d8 	.word	0x080127d8
 8007300:	08012644 	.word	0x08012644
 8007304:	08012810 	.word	0x08012810
 8007308:	08012840 	.word	0x08012840

0800730c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d008      	beq.n	8007336 <pbuf_copy+0x2a>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <pbuf_copy+0x2a>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	891a      	ldrh	r2, [r3, #8]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	891b      	ldrh	r3, [r3, #8]
 8007332:	429a      	cmp	r2, r3
 8007334:	d209      	bcs.n	800734a <pbuf_copy+0x3e>
 8007336:	4b57      	ldr	r3, [pc, #348]	; (8007494 <pbuf_copy+0x188>)
 8007338:	f240 32ca 	movw	r2, #970	; 0x3ca
 800733c:	4956      	ldr	r1, [pc, #344]	; (8007498 <pbuf_copy+0x18c>)
 800733e:	4857      	ldr	r0, [pc, #348]	; (800749c <pbuf_copy+0x190>)
 8007340:	f009 f874 	bl	801042c <iprintf>
 8007344:	f06f 030f 	mvn.w	r3, #15
 8007348:	e09f      	b.n	800748a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	895b      	ldrh	r3, [r3, #10]
 800734e:	461a      	mov	r2, r3
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	1ad2      	subs	r2, r2, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	895b      	ldrh	r3, [r3, #10]
 8007358:	4619      	mov	r1, r3
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1acb      	subs	r3, r1, r3
 800735e:	429a      	cmp	r2, r3
 8007360:	d306      	bcc.n	8007370 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	895b      	ldrh	r3, [r3, #10]
 8007366:	461a      	mov	r2, r3
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e005      	b.n	800737c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	895b      	ldrh	r3, [r3, #10]
 8007374:	461a      	mov	r2, r3
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	18d0      	adds	r0, r2, r3
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	4413      	add	r3, r2
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4619      	mov	r1, r3
 8007390:	f009 f81f 	bl	80103d2 <memcpy>
    offset_to += len;
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	895b      	ldrh	r3, [r3, #10]
 80073a8:	461a      	mov	r2, r3
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d906      	bls.n	80073be <pbuf_copy+0xb2>
 80073b0:	4b38      	ldr	r3, [pc, #224]	; (8007494 <pbuf_copy+0x188>)
 80073b2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80073b6:	493a      	ldr	r1, [pc, #232]	; (80074a0 <pbuf_copy+0x194>)
 80073b8:	4838      	ldr	r0, [pc, #224]	; (800749c <pbuf_copy+0x190>)
 80073ba:	f009 f837 	bl	801042c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	895b      	ldrh	r3, [r3, #10]
 80073c2:	461a      	mov	r2, r3
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d906      	bls.n	80073d8 <pbuf_copy+0xcc>
 80073ca:	4b32      	ldr	r3, [pc, #200]	; (8007494 <pbuf_copy+0x188>)
 80073cc:	f240 32da 	movw	r2, #986	; 0x3da
 80073d0:	4934      	ldr	r1, [pc, #208]	; (80074a4 <pbuf_copy+0x198>)
 80073d2:	4832      	ldr	r0, [pc, #200]	; (800749c <pbuf_copy+0x190>)
 80073d4:	f009 f82a 	bl	801042c <iprintf>
    if (offset_from >= p_from->len) {
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	895b      	ldrh	r3, [r3, #10]
 80073dc:	461a      	mov	r2, r3
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d304      	bcc.n	80073ee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	895b      	ldrh	r3, [r3, #10]
 80073f2:	461a      	mov	r2, r3
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d114      	bne.n	8007424 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10c      	bne.n	8007424 <pbuf_copy+0x118>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d009      	beq.n	8007424 <pbuf_copy+0x118>
 8007410:	4b20      	ldr	r3, [pc, #128]	; (8007494 <pbuf_copy+0x188>)
 8007412:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007416:	4924      	ldr	r1, [pc, #144]	; (80074a8 <pbuf_copy+0x19c>)
 8007418:	4820      	ldr	r0, [pc, #128]	; (800749c <pbuf_copy+0x190>)
 800741a:	f009 f807 	bl	801042c <iprintf>
 800741e:	f06f 030f 	mvn.w	r3, #15
 8007422:	e032      	b.n	800748a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d013      	beq.n	8007452 <pbuf_copy+0x146>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	895a      	ldrh	r2, [r3, #10]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	891b      	ldrh	r3, [r3, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	d10d      	bne.n	8007452 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d009      	beq.n	8007452 <pbuf_copy+0x146>
 800743e:	4b15      	ldr	r3, [pc, #84]	; (8007494 <pbuf_copy+0x188>)
 8007440:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8007444:	4919      	ldr	r1, [pc, #100]	; (80074ac <pbuf_copy+0x1a0>)
 8007446:	4815      	ldr	r0, [pc, #84]	; (800749c <pbuf_copy+0x190>)
 8007448:	f008 fff0 	bl	801042c <iprintf>
 800744c:	f06f 0305 	mvn.w	r3, #5
 8007450:	e01b      	b.n	800748a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d013      	beq.n	8007480 <pbuf_copy+0x174>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	895a      	ldrh	r2, [r3, #10]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	891b      	ldrh	r3, [r3, #8]
 8007460:	429a      	cmp	r2, r3
 8007462:	d10d      	bne.n	8007480 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d009      	beq.n	8007480 <pbuf_copy+0x174>
 800746c:	4b09      	ldr	r3, [pc, #36]	; (8007494 <pbuf_copy+0x188>)
 800746e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007472:	490e      	ldr	r1, [pc, #56]	; (80074ac <pbuf_copy+0x1a0>)
 8007474:	4809      	ldr	r0, [pc, #36]	; (800749c <pbuf_copy+0x190>)
 8007476:	f008 ffd9 	bl	801042c <iprintf>
 800747a:	f06f 0305 	mvn.w	r3, #5
 800747e:	e004      	b.n	800748a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f47f af61 	bne.w	800734a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	080125e4 	.word	0x080125e4
 8007498:	0801288c 	.word	0x0801288c
 800749c:	08012644 	.word	0x08012644
 80074a0:	080128bc 	.word	0x080128bc
 80074a4:	080128d4 	.word	0x080128d4
 80074a8:	080128f0 	.word	0x080128f0
 80074ac:	08012900 	.word	0x08012900

080074b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4611      	mov	r1, r2
 80074bc:	461a      	mov	r2, r3
 80074be:	460b      	mov	r3, r1
 80074c0:	80fb      	strh	r3, [r7, #6]
 80074c2:	4613      	mov	r3, r2
 80074c4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d108      	bne.n	80074e6 <pbuf_copy_partial+0x36>
 80074d4:	4b2b      	ldr	r3, [pc, #172]	; (8007584 <pbuf_copy_partial+0xd4>)
 80074d6:	f240 420a 	movw	r2, #1034	; 0x40a
 80074da:	492b      	ldr	r1, [pc, #172]	; (8007588 <pbuf_copy_partial+0xd8>)
 80074dc:	482b      	ldr	r0, [pc, #172]	; (800758c <pbuf_copy_partial+0xdc>)
 80074de:	f008 ffa5 	bl	801042c <iprintf>
 80074e2:	2300      	movs	r3, #0
 80074e4:	e04a      	b.n	800757c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d108      	bne.n	80074fe <pbuf_copy_partial+0x4e>
 80074ec:	4b25      	ldr	r3, [pc, #148]	; (8007584 <pbuf_copy_partial+0xd4>)
 80074ee:	f240 420b 	movw	r2, #1035	; 0x40b
 80074f2:	4927      	ldr	r1, [pc, #156]	; (8007590 <pbuf_copy_partial+0xe0>)
 80074f4:	4825      	ldr	r0, [pc, #148]	; (800758c <pbuf_copy_partial+0xdc>)
 80074f6:	f008 ff99 	bl	801042c <iprintf>
 80074fa:	2300      	movs	r3, #0
 80074fc:	e03e      	b.n	800757c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	e034      	b.n	800756e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007504:	88bb      	ldrh	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <pbuf_copy_partial+0x70>
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	895b      	ldrh	r3, [r3, #10]
 800750e:	88ba      	ldrh	r2, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	d305      	bcc.n	8007520 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	895b      	ldrh	r3, [r3, #10]
 8007518:	88ba      	ldrh	r2, [r7, #4]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	80bb      	strh	r3, [r7, #4]
 800751e:	e023      	b.n	8007568 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	895a      	ldrh	r2, [r3, #10]
 8007524:	88bb      	ldrh	r3, [r7, #4]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800752a:	8b3a      	ldrh	r2, [r7, #24]
 800752c:	88fb      	ldrh	r3, [r7, #6]
 800752e:	429a      	cmp	r2, r3
 8007530:	d901      	bls.n	8007536 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007532:	88fb      	ldrh	r3, [r7, #6]
 8007534:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007536:	8b7b      	ldrh	r3, [r7, #26]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	18d0      	adds	r0, r2, r3
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	88bb      	ldrh	r3, [r7, #4]
 8007542:	4413      	add	r3, r2
 8007544:	8b3a      	ldrh	r2, [r7, #24]
 8007546:	4619      	mov	r1, r3
 8007548:	f008 ff43 	bl	80103d2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800754c:	8afa      	ldrh	r2, [r7, #22]
 800754e:	8b3b      	ldrh	r3, [r7, #24]
 8007550:	4413      	add	r3, r2
 8007552:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007554:	8b7a      	ldrh	r2, [r7, #26]
 8007556:	8b3b      	ldrh	r3, [r7, #24]
 8007558:	4413      	add	r3, r2
 800755a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800755c:	88fa      	ldrh	r2, [r7, #6]
 800755e:	8b3b      	ldrh	r3, [r7, #24]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <pbuf_copy_partial+0xca>
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1c4      	bne.n	8007504 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800757a:	8afb      	ldrh	r3, [r7, #22]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3720      	adds	r7, #32
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	080125e4 	.word	0x080125e4
 8007588:	0801292c 	.word	0x0801292c
 800758c:	08012644 	.word	0x08012644
 8007590:	0801294c 	.word	0x0801294c

08007594 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	460b      	mov	r3, r1
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80075a2:	897b      	ldrh	r3, [r7, #10]
 80075a4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80075aa:	e007      	b.n	80075bc <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	895b      	ldrh	r3, [r3, #10]
 80075b0:	8afa      	ldrh	r2, [r7, #22]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d004      	beq.n	80075cc <pbuf_skip_const+0x38>
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	895b      	ldrh	r3, [r3, #10]
 80075c6:	8afa      	ldrh	r2, [r7, #22]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d2ef      	bcs.n	80075ac <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	8afa      	ldrh	r2, [r7, #22]
 80075d6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80075d8:	693b      	ldr	r3, [r7, #16]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
	...

080075e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	603a      	str	r2, [r7, #0]
 80075f2:	71fb      	strb	r3, [r7, #7]
 80075f4:	460b      	mov	r3, r1
 80075f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	8919      	ldrh	r1, [r3, #8]
 80075fc:	88ba      	ldrh	r2, [r7, #4]
 80075fe:	79fb      	ldrb	r3, [r7, #7]
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fa8b 	bl	8006b1c <pbuf_alloc>
 8007606:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <pbuf_clone+0x2a>
    return NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	e011      	b.n	8007636 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f7ff fe79 	bl	800730c <pbuf_copy>
 800761a:	4603      	mov	r3, r0
 800761c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800761e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d006      	beq.n	8007634 <pbuf_clone+0x4c>
 8007626:	4b06      	ldr	r3, [pc, #24]	; (8007640 <pbuf_clone+0x58>)
 8007628:	f240 5224 	movw	r2, #1316	; 0x524
 800762c:	4905      	ldr	r1, [pc, #20]	; (8007644 <pbuf_clone+0x5c>)
 800762e:	4806      	ldr	r0, [pc, #24]	; (8007648 <pbuf_clone+0x60>)
 8007630:	f008 fefc 	bl	801042c <iprintf>
  return q;
 8007634:	68fb      	ldr	r3, [r7, #12]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	080125e4 	.word	0x080125e4
 8007644:	08012a58 	.word	0x08012a58
 8007648:	08012644 	.word	0x08012644

0800764c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8007658:	887b      	ldrh	r3, [r7, #2]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f80c 	bl	800767a <pbuf_try_get_at>
 8007662:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	db02      	blt.n	8007670 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	e000      	b.n	8007672 <pbuf_get_at+0x26>
  }
  return 0;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8007686:	f107 020a 	add.w	r2, r7, #10
 800768a:	887b      	ldrh	r3, [r7, #2]
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff ff80 	bl	8007594 <pbuf_skip_const>
 8007694:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00a      	beq.n	80076b2 <pbuf_try_get_at+0x38>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	895a      	ldrh	r2, [r3, #10]
 80076a0:	897b      	ldrh	r3, [r7, #10]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d905      	bls.n	80076b2 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	897a      	ldrh	r2, [r7, #10]
 80076ac:	4413      	add	r3, r2
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	e001      	b.n	80076b6 <pbuf_try_get_at+0x3c>
  }
  return -1;
 80076b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80076c4:	f008 ff2e 	bl	8010524 <rand>
 80076c8:	4603      	mov	r3, r0
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	4b01      	ldr	r3, [pc, #4]	; (80076e0 <tcp_init+0x20>)
 80076da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80076dc:	bf00      	nop
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	2000000a 	.word	0x2000000a

080076e4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	7d1b      	ldrb	r3, [r3, #20]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d105      	bne.n	8007700 <tcp_free+0x1c>
 80076f4:	4b06      	ldr	r3, [pc, #24]	; (8007710 <tcp_free+0x2c>)
 80076f6:	22d4      	movs	r2, #212	; 0xd4
 80076f8:	4906      	ldr	r1, [pc, #24]	; (8007714 <tcp_free+0x30>)
 80076fa:	4807      	ldr	r0, [pc, #28]	; (8007718 <tcp_free+0x34>)
 80076fc:	f008 fe96 	bl	801042c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	2001      	movs	r0, #1
 8007704:	f7fe fedc 	bl	80064c0 <memp_free>
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	08012ae4 	.word	0x08012ae4
 8007714:	08012b14 	.word	0x08012b14
 8007718:	08012b28 	.word	0x08012b28

0800771c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7d1b      	ldrb	r3, [r3, #20]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d105      	bne.n	8007738 <tcp_free_listen+0x1c>
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <tcp_free_listen+0x2c>)
 800772e:	22df      	movs	r2, #223	; 0xdf
 8007730:	4906      	ldr	r1, [pc, #24]	; (800774c <tcp_free_listen+0x30>)
 8007732:	4807      	ldr	r0, [pc, #28]	; (8007750 <tcp_free_listen+0x34>)
 8007734:	f008 fe7a 	bl	801042c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007738:	6879      	ldr	r1, [r7, #4]
 800773a:	2002      	movs	r0, #2
 800773c:	f7fe fec0 	bl	80064c0 <memp_free>
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	08012ae4 	.word	0x08012ae4
 800774c:	08012b50 	.word	0x08012b50
 8007750:	08012b28 	.word	0x08012b28

08007754 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007758:	f001 f88e 	bl	8008878 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800775c:	4b07      	ldr	r3, [pc, #28]	; (800777c <tcp_tmr+0x28>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	3301      	adds	r3, #1
 8007762:	b2da      	uxtb	r2, r3
 8007764:	4b05      	ldr	r3, [pc, #20]	; (800777c <tcp_tmr+0x28>)
 8007766:	701a      	strb	r2, [r3, #0]
 8007768:	4b04      	ldr	r3, [pc, #16]	; (800777c <tcp_tmr+0x28>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007774:	f000 fd42 	bl	80081fc <tcp_slowtmr>
  }
}
 8007778:	bf00      	nop
 800777a:	bd80      	pop	{r7, pc}
 800777c:	200000cd 	.word	0x200000cd

08007780 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <tcp_remove_listener+0x1c>
 8007790:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <tcp_remove_listener+0x48>)
 8007792:	22ff      	movs	r2, #255	; 0xff
 8007794:	490d      	ldr	r1, [pc, #52]	; (80077cc <tcp_remove_listener+0x4c>)
 8007796:	480e      	ldr	r0, [pc, #56]	; (80077d0 <tcp_remove_listener+0x50>)
 8007798:	f008 fe48 	bl	801042c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	e00a      	b.n	80077b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d102      	bne.n	80077b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1f1      	bne.n	80077a2 <tcp_remove_listener+0x22>
    }
  }
}
 80077be:	bf00      	nop
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	08012ae4 	.word	0x08012ae4
 80077cc:	08012b6c 	.word	0x08012b6c
 80077d0:	08012b28 	.word	0x08012b28

080077d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d106      	bne.n	80077f0 <tcp_listen_closed+0x1c>
 80077e2:	4b14      	ldr	r3, [pc, #80]	; (8007834 <tcp_listen_closed+0x60>)
 80077e4:	f240 1211 	movw	r2, #273	; 0x111
 80077e8:	4913      	ldr	r1, [pc, #76]	; (8007838 <tcp_listen_closed+0x64>)
 80077ea:	4814      	ldr	r0, [pc, #80]	; (800783c <tcp_listen_closed+0x68>)
 80077ec:	f008 fe1e 	bl	801042c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	7d1b      	ldrb	r3, [r3, #20]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d006      	beq.n	8007806 <tcp_listen_closed+0x32>
 80077f8:	4b0e      	ldr	r3, [pc, #56]	; (8007834 <tcp_listen_closed+0x60>)
 80077fa:	f44f 7289 	mov.w	r2, #274	; 0x112
 80077fe:	4910      	ldr	r1, [pc, #64]	; (8007840 <tcp_listen_closed+0x6c>)
 8007800:	480e      	ldr	r0, [pc, #56]	; (800783c <tcp_listen_closed+0x68>)
 8007802:	f008 fe13 	bl	801042c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007806:	2301      	movs	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	e00b      	b.n	8007824 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800780c:	4a0d      	ldr	r2, [pc, #52]	; (8007844 <tcp_listen_closed+0x70>)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6879      	ldr	r1, [r7, #4]
 8007818:	4618      	mov	r0, r3
 800781a:	f7ff ffb1 	bl	8007780 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3301      	adds	r3, #1
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b03      	cmp	r3, #3
 8007828:	d9f0      	bls.n	800780c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	08012ae4 	.word	0x08012ae4
 8007838:	08012b94 	.word	0x08012b94
 800783c:	08012b28 	.word	0x08012b28
 8007840:	08012ba0 	.word	0x08012ba0
 8007844:	08014ab0 	.word	0x08014ab0

08007848 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007848:	b5b0      	push	{r4, r5, r7, lr}
 800784a:	b088      	sub	sp, #32
 800784c:	af04      	add	r7, sp, #16
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <tcp_close_shutdown+0x20>
 800785a:	4b61      	ldr	r3, [pc, #388]	; (80079e0 <tcp_close_shutdown+0x198>)
 800785c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007860:	4960      	ldr	r1, [pc, #384]	; (80079e4 <tcp_close_shutdown+0x19c>)
 8007862:	4861      	ldr	r0, [pc, #388]	; (80079e8 <tcp_close_shutdown+0x1a0>)
 8007864:	f008 fde2 	bl	801042c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d066      	beq.n	800793c <tcp_close_shutdown+0xf4>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	7d1b      	ldrb	r3, [r3, #20]
 8007872:	2b04      	cmp	r3, #4
 8007874:	d003      	beq.n	800787e <tcp_close_shutdown+0x36>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7d1b      	ldrb	r3, [r3, #20]
 800787a:	2b07      	cmp	r3, #7
 800787c:	d15e      	bne.n	800793c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <tcp_close_shutdown+0x48>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800788e:	d055      	beq.n	800793c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8b5b      	ldrh	r3, [r3, #26]
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b00      	cmp	r3, #0
 800789a:	d106      	bne.n	80078aa <tcp_close_shutdown+0x62>
 800789c:	4b50      	ldr	r3, [pc, #320]	; (80079e0 <tcp_close_shutdown+0x198>)
 800789e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80078a2:	4952      	ldr	r1, [pc, #328]	; (80079ec <tcp_close_shutdown+0x1a4>)
 80078a4:	4850      	ldr	r0, [pc, #320]	; (80079e8 <tcp_close_shutdown+0x1a0>)
 80078a6:	f008 fdc1 	bl	801042c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80078b2:	687d      	ldr	r5, [r7, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3304      	adds	r3, #4
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	8ad2      	ldrh	r2, [r2, #22]
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	8b09      	ldrh	r1, [r1, #24]
 80078c0:	9102      	str	r1, [sp, #8]
 80078c2:	9201      	str	r2, [sp, #4]
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	462b      	mov	r3, r5
 80078c8:	4622      	mov	r2, r4
 80078ca:	4601      	mov	r1, r0
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f005 fd95 	bl	800d3fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 fb66 	bl	8008fa4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80078d8:	4b45      	ldr	r3, [pc, #276]	; (80079f0 <tcp_close_shutdown+0x1a8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d105      	bne.n	80078ee <tcp_close_shutdown+0xa6>
 80078e2:	4b43      	ldr	r3, [pc, #268]	; (80079f0 <tcp_close_shutdown+0x1a8>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	4a41      	ldr	r2, [pc, #260]	; (80079f0 <tcp_close_shutdown+0x1a8>)
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	e013      	b.n	8007916 <tcp_close_shutdown+0xce>
 80078ee:	4b40      	ldr	r3, [pc, #256]	; (80079f0 <tcp_close_shutdown+0x1a8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	e00c      	b.n	8007910 <tcp_close_shutdown+0xc8>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d104      	bne.n	800790a <tcp_close_shutdown+0xc2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	60da      	str	r2, [r3, #12]
 8007908:	e005      	b.n	8007916 <tcp_close_shutdown+0xce>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1ef      	bne.n	80078f6 <tcp_close_shutdown+0xae>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	60da      	str	r2, [r3, #12]
 800791c:	4b35      	ldr	r3, [pc, #212]	; (80079f4 <tcp_close_shutdown+0x1ac>)
 800791e:	2201      	movs	r2, #1
 8007920:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007922:	4b35      	ldr	r3, [pc, #212]	; (80079f8 <tcp_close_shutdown+0x1b0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	429a      	cmp	r2, r3
 800792a:	d102      	bne.n	8007932 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800792c:	f003 fff8 	bl	800b920 <tcp_trigger_input_pcb_close>
 8007930:	e002      	b.n	8007938 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff fed6 	bl	80076e4 <tcp_free>
      }
      return ERR_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	e04d      	b.n	80079d8 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	7d1b      	ldrb	r3, [r3, #20]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d02d      	beq.n	80079a0 <tcp_close_shutdown+0x158>
 8007944:	2b02      	cmp	r3, #2
 8007946:	d036      	beq.n	80079b6 <tcp_close_shutdown+0x16e>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d13f      	bne.n	80079cc <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8adb      	ldrh	r3, [r3, #22]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d021      	beq.n	8007998 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007954:	4b29      	ldr	r3, [pc, #164]	; (80079fc <tcp_close_shutdown+0x1b4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	429a      	cmp	r2, r3
 800795c:	d105      	bne.n	800796a <tcp_close_shutdown+0x122>
 800795e:	4b27      	ldr	r3, [pc, #156]	; (80079fc <tcp_close_shutdown+0x1b4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	4a25      	ldr	r2, [pc, #148]	; (80079fc <tcp_close_shutdown+0x1b4>)
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	e013      	b.n	8007992 <tcp_close_shutdown+0x14a>
 800796a:	4b24      	ldr	r3, [pc, #144]	; (80079fc <tcp_close_shutdown+0x1b4>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60bb      	str	r3, [r7, #8]
 8007970:	e00c      	b.n	800798c <tcp_close_shutdown+0x144>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	429a      	cmp	r2, r3
 800797a:	d104      	bne.n	8007986 <tcp_close_shutdown+0x13e>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	60da      	str	r2, [r3, #12]
 8007984:	e005      	b.n	8007992 <tcp_close_shutdown+0x14a>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	60bb      	str	r3, [r7, #8]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1ef      	bne.n	8007972 <tcp_close_shutdown+0x12a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff fea3 	bl	80076e4 <tcp_free>
      break;
 800799e:	e01a      	b.n	80079d6 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff ff17 	bl	80077d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	4815      	ldr	r0, [pc, #84]	; (8007a00 <tcp_close_shutdown+0x1b8>)
 80079aa:	f001 fb4b 	bl	8009044 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff feb4 	bl	800771c <tcp_free_listen>
      break;
 80079b4:	e00f      	b.n	80079d6 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	480d      	ldr	r0, [pc, #52]	; (80079f0 <tcp_close_shutdown+0x1a8>)
 80079ba:	f001 fb43 	bl	8009044 <tcp_pcb_remove>
 80079be:	4b0d      	ldr	r3, [pc, #52]	; (80079f4 <tcp_close_shutdown+0x1ac>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fe8d 	bl	80076e4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80079ca:	e004      	b.n	80079d6 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f819 	bl	8007a04 <tcp_close_shutdown_fin>
 80079d2:	4603      	mov	r3, r0
 80079d4:	e000      	b.n	80079d8 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bdb0      	pop	{r4, r5, r7, pc}
 80079e0:	08012ae4 	.word	0x08012ae4
 80079e4:	08012bb8 	.word	0x08012bb8
 80079e8:	08012b28 	.word	0x08012b28
 80079ec:	08012bd8 	.word	0x08012bd8
 80079f0:	2000694c 	.word	0x2000694c
 80079f4:	20006948 	.word	0x20006948
 80079f8:	20006960 	.word	0x20006960
 80079fc:	20006958 	.word	0x20006958
 8007a00:	20006954 	.word	0x20006954

08007a04 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d106      	bne.n	8007a20 <tcp_close_shutdown_fin+0x1c>
 8007a12:	4b2c      	ldr	r3, [pc, #176]	; (8007ac4 <tcp_close_shutdown_fin+0xc0>)
 8007a14:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007a18:	492b      	ldr	r1, [pc, #172]	; (8007ac8 <tcp_close_shutdown_fin+0xc4>)
 8007a1a:	482c      	ldr	r0, [pc, #176]	; (8007acc <tcp_close_shutdown_fin+0xc8>)
 8007a1c:	f008 fd06 	bl	801042c <iprintf>

  switch (pcb->state) {
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	7d1b      	ldrb	r3, [r3, #20]
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d010      	beq.n	8007a4a <tcp_close_shutdown_fin+0x46>
 8007a28:	2b07      	cmp	r3, #7
 8007a2a:	d01b      	beq.n	8007a64 <tcp_close_shutdown_fin+0x60>
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d126      	bne.n	8007a7e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f004 fde1 	bl	800c5f8 <tcp_send_fin>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d11f      	bne.n	8007a82 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2205      	movs	r2, #5
 8007a46:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007a48:	e01b      	b.n	8007a82 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f004 fdd4 	bl	800c5f8 <tcp_send_fin>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d114      	bne.n	8007a86 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2205      	movs	r2, #5
 8007a60:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007a62:	e010      	b.n	8007a86 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f004 fdc7 	bl	800c5f8 <tcp_send_fin>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d109      	bne.n	8007a8a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2209      	movs	r2, #9
 8007a7a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007a7c:	e005      	b.n	8007a8a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e01c      	b.n	8007abc <tcp_close_shutdown_fin+0xb8>
      break;
 8007a82:	bf00      	nop
 8007a84:	e002      	b.n	8007a8c <tcp_close_shutdown_fin+0x88>
      break;
 8007a86:	bf00      	nop
 8007a88:	e000      	b.n	8007a8c <tcp_close_shutdown_fin+0x88>
      break;
 8007a8a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d103      	bne.n	8007a9c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f004 feed 	bl	800c874 <tcp_output>
 8007a9a:	e00d      	b.n	8007ab8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8007a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa4:	d108      	bne.n	8007ab8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	8b5b      	ldrh	r3, [r3, #26]
 8007aaa:	f043 0308 	orr.w	r3, r3, #8
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	e001      	b.n	8007abc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8007ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	08012ae4 	.word	0x08012ae4
 8007ac8:	08012b94 	.word	0x08012b94
 8007acc:	08012b28 	.word	0x08012b28

08007ad0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <tcp_close+0x22>
 8007ade:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <tcp_close+0x4c>)
 8007ae0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007ae4:	490e      	ldr	r1, [pc, #56]	; (8007b20 <tcp_close+0x50>)
 8007ae6:	480f      	ldr	r0, [pc, #60]	; (8007b24 <tcp_close+0x54>)
 8007ae8:	f008 fca0 	bl	801042c <iprintf>
 8007aec:	f06f 030f 	mvn.w	r3, #15
 8007af0:	e00f      	b.n	8007b12 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	7d1b      	ldrb	r3, [r3, #20]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d006      	beq.n	8007b08 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	8b5b      	ldrh	r3, [r3, #26]
 8007afe:	f043 0310 	orr.w	r3, r3, #16
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007b08:	2101      	movs	r1, #1
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff fe9c 	bl	8007848 <tcp_close_shutdown>
 8007b10:	4603      	mov	r3, r0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	08012ae4 	.word	0x08012ae4
 8007b20:	08012bf4 	.word	0x08012bf4
 8007b24:	08012b28 	.word	0x08012b28

08007b28 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08e      	sub	sp, #56	; 0x38
 8007b2c:	af04      	add	r7, sp, #16
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d107      	bne.n	8007b48 <tcp_abandon+0x20>
 8007b38:	4b52      	ldr	r3, [pc, #328]	; (8007c84 <tcp_abandon+0x15c>)
 8007b3a:	f240 223d 	movw	r2, #573	; 0x23d
 8007b3e:	4952      	ldr	r1, [pc, #328]	; (8007c88 <tcp_abandon+0x160>)
 8007b40:	4852      	ldr	r0, [pc, #328]	; (8007c8c <tcp_abandon+0x164>)
 8007b42:	f008 fc73 	bl	801042c <iprintf>
 8007b46:	e099      	b.n	8007c7c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7d1b      	ldrb	r3, [r3, #20]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d106      	bne.n	8007b5e <tcp_abandon+0x36>
 8007b50:	4b4c      	ldr	r3, [pc, #304]	; (8007c84 <tcp_abandon+0x15c>)
 8007b52:	f240 2241 	movw	r2, #577	; 0x241
 8007b56:	494e      	ldr	r1, [pc, #312]	; (8007c90 <tcp_abandon+0x168>)
 8007b58:	484c      	ldr	r0, [pc, #304]	; (8007c8c <tcp_abandon+0x164>)
 8007b5a:	f008 fc67 	bl	801042c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	7d1b      	ldrb	r3, [r3, #20]
 8007b62:	2b0a      	cmp	r3, #10
 8007b64:	d107      	bne.n	8007b76 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	484a      	ldr	r0, [pc, #296]	; (8007c94 <tcp_abandon+0x16c>)
 8007b6a:	f001 fa6b 	bl	8009044 <tcp_pcb_remove>
    tcp_free(pcb);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7ff fdb8 	bl	80076e4 <tcp_free>
 8007b74:	e082      	b.n	8007c7c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b82:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b90:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	7d1b      	ldrb	r3, [r3, #20]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d126      	bne.n	8007bee <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	8adb      	ldrh	r3, [r3, #22]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d02e      	beq.n	8007c06 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007ba8:	4b3b      	ldr	r3, [pc, #236]	; (8007c98 <tcp_abandon+0x170>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d105      	bne.n	8007bbe <tcp_abandon+0x96>
 8007bb2:	4b39      	ldr	r3, [pc, #228]	; (8007c98 <tcp_abandon+0x170>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	4a37      	ldr	r2, [pc, #220]	; (8007c98 <tcp_abandon+0x170>)
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	e013      	b.n	8007be6 <tcp_abandon+0xbe>
 8007bbe:	4b36      	ldr	r3, [pc, #216]	; (8007c98 <tcp_abandon+0x170>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	61fb      	str	r3, [r7, #28]
 8007bc4:	e00c      	b.n	8007be0 <tcp_abandon+0xb8>
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d104      	bne.n	8007bda <tcp_abandon+0xb2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	60da      	str	r2, [r3, #12]
 8007bd8:	e005      	b.n	8007be6 <tcp_abandon+0xbe>
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	61fb      	str	r3, [r7, #28]
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1ef      	bne.n	8007bc6 <tcp_abandon+0x9e>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	60da      	str	r2, [r3, #12]
 8007bec:	e00b      	b.n	8007c06 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	8adb      	ldrh	r3, [r3, #22]
 8007bf6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4828      	ldr	r0, [pc, #160]	; (8007c9c <tcp_abandon+0x174>)
 8007bfc:	f001 fa22 	bl	8009044 <tcp_pcb_remove>
 8007c00:	4b27      	ldr	r3, [pc, #156]	; (8007ca0 <tcp_abandon+0x178>)
 8007c02:	2201      	movs	r2, #1
 8007c04:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 ff10 	bl	8008a38 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d004      	beq.n	8007c2a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 ff07 	bl	8008a38 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d004      	beq.n	8007c3c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fefe 	bl	8008a38 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00e      	beq.n	8007c60 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	8b12      	ldrh	r2, [r2, #24]
 8007c4c:	9202      	str	r2, [sp, #8]
 8007c4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007c50:	9201      	str	r2, [sp, #4]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	460b      	mov	r3, r1
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	69b9      	ldr	r1, [r7, #24]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f005 fbce 	bl	800d3fc <tcp_rst>
    }
    last_state = pcb->state;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	7d1b      	ldrb	r3, [r3, #20]
 8007c64:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff fd3c 	bl	80076e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d004      	beq.n	8007c7c <tcp_abandon+0x154>
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f06f 010c 	mvn.w	r1, #12
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	4798      	blx	r3
  }
}
 8007c7c:	3728      	adds	r7, #40	; 0x28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	08012ae4 	.word	0x08012ae4
 8007c88:	08012c28 	.word	0x08012c28
 8007c8c:	08012b28 	.word	0x08012b28
 8007c90:	08012c44 	.word	0x08012c44
 8007c94:	2000695c 	.word	0x2000695c
 8007c98:	20006958 	.word	0x20006958
 8007c9c:	2000694c 	.word	0x2000694c
 8007ca0:	20006948 	.word	0x20006948

08007ca4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007cac:	2101      	movs	r1, #1
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7ff ff3a 	bl	8007b28 <tcp_abandon>
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007cca:	2304      	movs	r3, #4
 8007ccc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007cd4:	4b3e      	ldr	r3, [pc, #248]	; (8007dd0 <tcp_bind+0x114>)
 8007cd6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <tcp_bind+0x36>
 8007cde:	4b3d      	ldr	r3, [pc, #244]	; (8007dd4 <tcp_bind+0x118>)
 8007ce0:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007ce4:	493c      	ldr	r1, [pc, #240]	; (8007dd8 <tcp_bind+0x11c>)
 8007ce6:	483d      	ldr	r0, [pc, #244]	; (8007ddc <tcp_bind+0x120>)
 8007ce8:	f008 fba0 	bl	801042c <iprintf>
 8007cec:	f06f 030f 	mvn.w	r3, #15
 8007cf0:	e06a      	b.n	8007dc8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	7d1b      	ldrb	r3, [r3, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <tcp_bind+0x52>
 8007cfa:	4b36      	ldr	r3, [pc, #216]	; (8007dd4 <tcp_bind+0x118>)
 8007cfc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007d00:	4937      	ldr	r1, [pc, #220]	; (8007de0 <tcp_bind+0x124>)
 8007d02:	4836      	ldr	r0, [pc, #216]	; (8007ddc <tcp_bind+0x120>)
 8007d04:	f008 fb92 	bl	801042c <iprintf>
 8007d08:	f06f 0305 	mvn.w	r3, #5
 8007d0c:	e05c      	b.n	8007dc8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d109      	bne.n	8007d28 <tcp_bind+0x6c>
    port = tcp_new_port();
 8007d14:	f000 f914 	bl	8007f40 <tcp_new_port>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007d1c:	88fb      	ldrh	r3, [r7, #6]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d135      	bne.n	8007d8e <tcp_bind+0xd2>
      return ERR_BUF;
 8007d22:	f06f 0301 	mvn.w	r3, #1
 8007d26:	e04f      	b.n	8007dc8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007d28:	2300      	movs	r3, #0
 8007d2a:	61fb      	str	r3, [r7, #28]
 8007d2c:	e02b      	b.n	8007d86 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007d2e:	4a2d      	ldr	r2, [pc, #180]	; (8007de4 <tcp_bind+0x128>)
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	61bb      	str	r3, [r7, #24]
 8007d3a:	e01e      	b.n	8007d7a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	8adb      	ldrh	r3, [r3, #22]
 8007d40:	88fa      	ldrh	r2, [r7, #6]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d116      	bne.n	8007d74 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007d46:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d010      	beq.n	8007d6e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00c      	beq.n	8007d6e <tcp_bind+0xb2>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d102      	bne.n	8007d74 <tcp_bind+0xb8>
              return ERR_USE;
 8007d6e:	f06f 0307 	mvn.w	r3, #7
 8007d72:	e029      	b.n	8007dc8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	61bb      	str	r3, [r7, #24]
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1dd      	bne.n	8007d3c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	3301      	adds	r3, #1
 8007d84:	61fb      	str	r3, [r7, #28]
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	dbcf      	blt.n	8007d2e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00c      	beq.n	8007dae <tcp_bind+0xf2>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d008      	beq.n	8007dae <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <tcp_bind+0xec>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	e000      	b.n	8007daa <tcp_bind+0xee>
 8007da8:	2300      	movs	r3, #0
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	88fa      	ldrh	r2, [r7, #6]
 8007db2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007db4:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <tcp_bind+0x12c>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	60da      	str	r2, [r3, #12]
 8007dbc:	4a0a      	ldr	r2, [pc, #40]	; (8007de8 <tcp_bind+0x12c>)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	f005 fcdd 	bl	800d780 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3720      	adds	r7, #32
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	08014ad8 	.word	0x08014ad8
 8007dd4:	08012ae4 	.word	0x08012ae4
 8007dd8:	08012c78 	.word	0x08012c78
 8007ddc:	08012b28 	.word	0x08012b28
 8007de0:	08012c90 	.word	0x08012c90
 8007de4:	08014ab0 	.word	0x08014ab0
 8007de8:	20006958 	.word	0x20006958

08007dec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d106      	bne.n	8007e08 <tcp_update_rcv_ann_wnd+0x1c>
 8007dfa:	4b25      	ldr	r3, [pc, #148]	; (8007e90 <tcp_update_rcv_ann_wnd+0xa4>)
 8007dfc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007e00:	4924      	ldr	r1, [pc, #144]	; (8007e94 <tcp_update_rcv_ann_wnd+0xa8>)
 8007e02:	4825      	ldr	r0, [pc, #148]	; (8007e98 <tcp_update_rcv_ann_wnd+0xac>)
 8007e04:	f008 fb12 	bl	801042c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007e10:	4413      	add	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007e1c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007e20:	bf28      	it	cs
 8007e22:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007e26:	b292      	uxth	r2, r2
 8007e28:	4413      	add	r3, r2
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	db08      	blt.n	8007e44 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	e020      	b.n	8007e86 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	dd03      	ble.n	8007e5a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e58:	e014      	b.n	8007e84 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e6c:	d306      	bcc.n	8007e7c <tcp_update_rcv_ann_wnd+0x90>
 8007e6e:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <tcp_update_rcv_ann_wnd+0xa4>)
 8007e70:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007e74:	4909      	ldr	r1, [pc, #36]	; (8007e9c <tcp_update_rcv_ann_wnd+0xb0>)
 8007e76:	4808      	ldr	r0, [pc, #32]	; (8007e98 <tcp_update_rcv_ann_wnd+0xac>)
 8007e78:	f008 fad8 	bl	801042c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007e84:	2300      	movs	r3, #0
  }
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	08012ae4 	.word	0x08012ae4
 8007e94:	08012d40 	.word	0x08012d40
 8007e98:	08012b28 	.word	0x08012b28
 8007e9c:	08012d64 	.word	0x08012d64

08007ea0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d107      	bne.n	8007ec2 <tcp_recved+0x22>
 8007eb2:	4b1f      	ldr	r3, [pc, #124]	; (8007f30 <tcp_recved+0x90>)
 8007eb4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007eb8:	491e      	ldr	r1, [pc, #120]	; (8007f34 <tcp_recved+0x94>)
 8007eba:	481f      	ldr	r0, [pc, #124]	; (8007f38 <tcp_recved+0x98>)
 8007ebc:	f008 fab6 	bl	801042c <iprintf>
 8007ec0:	e032      	b.n	8007f28 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	7d1b      	ldrb	r3, [r3, #20]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d106      	bne.n	8007ed8 <tcp_recved+0x38>
 8007eca:	4b19      	ldr	r3, [pc, #100]	; (8007f30 <tcp_recved+0x90>)
 8007ecc:	f240 32d3 	movw	r2, #979	; 0x3d3
 8007ed0:	491a      	ldr	r1, [pc, #104]	; (8007f3c <tcp_recved+0x9c>)
 8007ed2:	4819      	ldr	r0, [pc, #100]	; (8007f38 <tcp_recved+0x98>)
 8007ed4:	f008 faaa 	bl	801042c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007edc:	887b      	ldrh	r3, [r7, #2]
 8007ede:	4413      	add	r3, r2
 8007ee0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007ee2:	89fb      	ldrh	r3, [r7, #14]
 8007ee4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007ee8:	d804      	bhi.n	8007ef4 <tcp_recved+0x54>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eee:	89fa      	ldrh	r2, [r7, #14]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d204      	bcs.n	8007efe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007efa:	851a      	strh	r2, [r3, #40]	; 0x28
 8007efc:	e002      	b.n	8007f04 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	89fa      	ldrh	r2, [r7, #14]
 8007f02:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff ff71 	bl	8007dec <tcp_update_rcv_ann_wnd>
 8007f0a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007f12:	d309      	bcc.n	8007f28 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	8b5b      	ldrh	r3, [r3, #26]
 8007f18:	f043 0302 	orr.w	r3, r3, #2
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f004 fca6 	bl	800c874 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	08012ae4 	.word	0x08012ae4
 8007f34:	08012d80 	.word	0x08012d80
 8007f38:	08012b28 	.word	0x08012b28
 8007f3c:	08012d98 	.word	0x08012d98

08007f40 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007f4a:	4b1e      	ldr	r3, [pc, #120]	; (8007fc4 <tcp_new_port+0x84>)
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	4b1c      	ldr	r3, [pc, #112]	; (8007fc4 <tcp_new_port+0x84>)
 8007f54:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007f56:	4b1b      	ldr	r3, [pc, #108]	; (8007fc4 <tcp_new_port+0x84>)
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d103      	bne.n	8007f6a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007f62:	4b18      	ldr	r3, [pc, #96]	; (8007fc4 <tcp_new_port+0x84>)
 8007f64:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007f68:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	71fb      	strb	r3, [r7, #7]
 8007f6e:	e01e      	b.n	8007fae <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	4a15      	ldr	r2, [pc, #84]	; (8007fc8 <tcp_new_port+0x88>)
 8007f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	e011      	b.n	8007fa2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	8ada      	ldrh	r2, [r3, #22]
 8007f82:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <tcp_new_port+0x84>)
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d108      	bne.n	8007f9c <tcp_new_port+0x5c>
        n++;
 8007f8a:	88bb      	ldrh	r3, [r7, #4]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007f90:	88bb      	ldrh	r3, [r7, #4]
 8007f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f96:	d3d8      	bcc.n	8007f4a <tcp_new_port+0xa>
          return 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e00d      	b.n	8007fb8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1ea      	bne.n	8007f7e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007fa8:	79fb      	ldrb	r3, [r7, #7]
 8007faa:	3301      	adds	r3, #1
 8007fac:	71fb      	strb	r3, [r7, #7]
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d9dd      	bls.n	8007f70 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007fb4:	4b03      	ldr	r3, [pc, #12]	; (8007fc4 <tcp_new_port+0x84>)
 8007fb6:	881b      	ldrh	r3, [r3, #0]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	2000000a 	.word	0x2000000a
 8007fc8:	08014ab0 	.word	0x08014ab0

08007fcc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	; 0x28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	603b      	str	r3, [r7, #0]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <tcp_connect+0x2e>
 8007fe6:	4b7d      	ldr	r3, [pc, #500]	; (80081dc <tcp_connect+0x210>)
 8007fe8:	f240 4235 	movw	r2, #1077	; 0x435
 8007fec:	497c      	ldr	r1, [pc, #496]	; (80081e0 <tcp_connect+0x214>)
 8007fee:	487d      	ldr	r0, [pc, #500]	; (80081e4 <tcp_connect+0x218>)
 8007ff0:	f008 fa1c 	bl	801042c <iprintf>
 8007ff4:	f06f 030f 	mvn.w	r3, #15
 8007ff8:	e0ec      	b.n	80081d4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d109      	bne.n	8008014 <tcp_connect+0x48>
 8008000:	4b76      	ldr	r3, [pc, #472]	; (80081dc <tcp_connect+0x210>)
 8008002:	f240 4236 	movw	r2, #1078	; 0x436
 8008006:	4978      	ldr	r1, [pc, #480]	; (80081e8 <tcp_connect+0x21c>)
 8008008:	4876      	ldr	r0, [pc, #472]	; (80081e4 <tcp_connect+0x218>)
 800800a:	f008 fa0f 	bl	801042c <iprintf>
 800800e:	f06f 030f 	mvn.w	r3, #15
 8008012:	e0df      	b.n	80081d4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	7d1b      	ldrb	r3, [r3, #20]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d009      	beq.n	8008030 <tcp_connect+0x64>
 800801c:	4b6f      	ldr	r3, [pc, #444]	; (80081dc <tcp_connect+0x210>)
 800801e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8008022:	4972      	ldr	r1, [pc, #456]	; (80081ec <tcp_connect+0x220>)
 8008024:	486f      	ldr	r0, [pc, #444]	; (80081e4 <tcp_connect+0x218>)
 8008026:	f008 fa01 	bl	801042c <iprintf>
 800802a:	f06f 0309 	mvn.w	r3, #9
 800802e:	e0d1      	b.n	80081d4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <tcp_connect+0x70>
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	e000      	b.n	800803e <tcp_connect+0x72>
 800803c:	2300      	movs	r3, #0
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	88fa      	ldrh	r2, [r7, #6]
 8008046:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	7a1b      	ldrb	r3, [r3, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d006      	beq.n	800805e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	7a1b      	ldrb	r3, [r3, #8]
 8008054:	4618      	mov	r0, r3
 8008056:	f7fe fce5 	bl	8006a24 <netif_get_by_index>
 800805a:	6278      	str	r0, [r7, #36]	; 0x24
 800805c:	e005      	b.n	800806a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3304      	adds	r3, #4
 8008062:	4618      	mov	r0, r3
 8008064:	f006 ffa2 	bl	800efac <ip4_route>
 8008068:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	2b00      	cmp	r3, #0
 800806e:	d102      	bne.n	8008076 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8008070:	f06f 0303 	mvn.w	r3, #3
 8008074:	e0ae      	b.n	80081d4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <tcp_connect+0xb8>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d111      	bne.n	80080a8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <tcp_connect+0xc4>
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	3304      	adds	r3, #4
 800808e:	e000      	b.n	8008092 <tcp_connect+0xc6>
 8008090:	2300      	movs	r3, #0
 8008092:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <tcp_connect+0xd4>
      return ERR_RTE;
 800809a:	f06f 0303 	mvn.w	r3, #3
 800809e:	e099      	b.n	80081d4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8adb      	ldrh	r3, [r3, #22]
 80080ac:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8adb      	ldrh	r3, [r3, #22]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10c      	bne.n	80080d0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80080b6:	f7ff ff43 	bl	8007f40 <tcp_new_port>
 80080ba:	4603      	mov	r3, r0
 80080bc:	461a      	mov	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8adb      	ldrh	r3, [r3, #22]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <tcp_connect+0x104>
      return ERR_BUF;
 80080ca:	f06f 0301 	mvn.w	r3, #1
 80080ce:	e081      	b.n	80081d4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f001 f84b 	bl	800916c <tcp_next_iss>
 80080d6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	1e5a      	subs	r2, r3, #1
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	1e5a      	subs	r2, r3, #1
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	1e5a      	subs	r2, r3, #1
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008102:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800811a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008124:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3304      	adds	r3, #4
 800812e:	461a      	mov	r2, r3
 8008130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008132:	f001 f841 	bl	80091b8 <tcp_eff_send_mss_netif>
 8008136:	4603      	mov	r3, r0
 8008138:	461a      	mov	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800814e:	2102      	movs	r1, #2
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f004 faa1 	bl	800c698 <tcp_enqueue_flags>
 8008156:	4603      	mov	r3, r0
 8008158:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800815a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d136      	bne.n	80081d0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2202      	movs	r2, #2
 8008166:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8008168:	8b7b      	ldrh	r3, [r7, #26]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d021      	beq.n	80081b2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800816e:	4b20      	ldr	r3, [pc, #128]	; (80081f0 <tcp_connect+0x224>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	429a      	cmp	r2, r3
 8008176:	d105      	bne.n	8008184 <tcp_connect+0x1b8>
 8008178:	4b1d      	ldr	r3, [pc, #116]	; (80081f0 <tcp_connect+0x224>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <tcp_connect+0x224>)
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	e013      	b.n	80081ac <tcp_connect+0x1e0>
 8008184:	4b1a      	ldr	r3, [pc, #104]	; (80081f0 <tcp_connect+0x224>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	623b      	str	r3, [r7, #32]
 800818a:	e00c      	b.n	80081a6 <tcp_connect+0x1da>
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	429a      	cmp	r2, r3
 8008194:	d104      	bne.n	80081a0 <tcp_connect+0x1d4>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	60da      	str	r2, [r3, #12]
 800819e:	e005      	b.n	80081ac <tcp_connect+0x1e0>
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	623b      	str	r3, [r7, #32]
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1ef      	bne.n	800818c <tcp_connect+0x1c0>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80081b2:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <tcp_connect+0x228>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	60da      	str	r2, [r3, #12]
 80081ba:	4a0e      	ldr	r2, [pc, #56]	; (80081f4 <tcp_connect+0x228>)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	f005 fade 	bl	800d780 <tcp_timer_needed>
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <tcp_connect+0x22c>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f004 fb52 	bl	800c874 <tcp_output>
  }
  return ret;
 80081d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3728      	adds	r7, #40	; 0x28
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	08012ae4 	.word	0x08012ae4
 80081e0:	08012dc0 	.word	0x08012dc0
 80081e4:	08012b28 	.word	0x08012b28
 80081e8:	08012ddc 	.word	0x08012ddc
 80081ec:	08012df8 	.word	0x08012df8
 80081f0:	20006958 	.word	0x20006958
 80081f4:	2000694c 	.word	0x2000694c
 80081f8:	20006948 	.word	0x20006948

080081fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80081fc:	b5b0      	push	{r4, r5, r7, lr}
 80081fe:	b090      	sub	sp, #64	; 0x40
 8008200:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008208:	4b94      	ldr	r3, [pc, #592]	; (800845c <tcp_slowtmr+0x260>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3301      	adds	r3, #1
 800820e:	4a93      	ldr	r2, [pc, #588]	; (800845c <tcp_slowtmr+0x260>)
 8008210:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008212:	4b93      	ldr	r3, [pc, #588]	; (8008460 <tcp_slowtmr+0x264>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	3301      	adds	r3, #1
 8008218:	b2da      	uxtb	r2, r3
 800821a:	4b91      	ldr	r3, [pc, #580]	; (8008460 <tcp_slowtmr+0x264>)
 800821c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800821e:	2300      	movs	r3, #0
 8008220:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008222:	4b90      	ldr	r3, [pc, #576]	; (8008464 <tcp_slowtmr+0x268>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008228:	e29f      	b.n	800876a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	7d1b      	ldrb	r3, [r3, #20]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <tcp_slowtmr+0x44>
 8008232:	4b8d      	ldr	r3, [pc, #564]	; (8008468 <tcp_slowtmr+0x26c>)
 8008234:	f240 42be 	movw	r2, #1214	; 0x4be
 8008238:	498c      	ldr	r1, [pc, #560]	; (800846c <tcp_slowtmr+0x270>)
 800823a:	488d      	ldr	r0, [pc, #564]	; (8008470 <tcp_slowtmr+0x274>)
 800823c:	f008 f8f6 	bl	801042c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008242:	7d1b      	ldrb	r3, [r3, #20]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d106      	bne.n	8008256 <tcp_slowtmr+0x5a>
 8008248:	4b87      	ldr	r3, [pc, #540]	; (8008468 <tcp_slowtmr+0x26c>)
 800824a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800824e:	4989      	ldr	r1, [pc, #548]	; (8008474 <tcp_slowtmr+0x278>)
 8008250:	4887      	ldr	r0, [pc, #540]	; (8008470 <tcp_slowtmr+0x274>)
 8008252:	f008 f8eb 	bl	801042c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	7d1b      	ldrb	r3, [r3, #20]
 800825a:	2b0a      	cmp	r3, #10
 800825c:	d106      	bne.n	800826c <tcp_slowtmr+0x70>
 800825e:	4b82      	ldr	r3, [pc, #520]	; (8008468 <tcp_slowtmr+0x26c>)
 8008260:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008264:	4984      	ldr	r1, [pc, #528]	; (8008478 <tcp_slowtmr+0x27c>)
 8008266:	4882      	ldr	r0, [pc, #520]	; (8008470 <tcp_slowtmr+0x274>)
 8008268:	f008 f8e0 	bl	801042c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826e:	7f9a      	ldrb	r2, [r3, #30]
 8008270:	4b7b      	ldr	r3, [pc, #492]	; (8008460 <tcp_slowtmr+0x264>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	429a      	cmp	r2, r3
 8008276:	d105      	bne.n	8008284 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008282:	e272      	b.n	800876a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008284:	4b76      	ldr	r3, [pc, #472]	; (8008460 <tcp_slowtmr+0x264>)
 8008286:	781a      	ldrb	r2, [r3, #0]
 8008288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	7d1b      	ldrb	r3, [r3, #20]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d10a      	bne.n	80082b6 <tcp_slowtmr+0xba>
 80082a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d905      	bls.n	80082b6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80082aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082ae:	3301      	adds	r3, #1
 80082b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082b4:	e11e      	b.n	80084f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082bc:	2b0b      	cmp	r3, #11
 80082be:	d905      	bls.n	80082cc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80082c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082c4:	3301      	adds	r3, #1
 80082c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082ca:	e113      	b.n	80084f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80082cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d075      	beq.n	80083c2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d006      	beq.n	80082ec <tcp_slowtmr+0xf0>
 80082de:	4b62      	ldr	r3, [pc, #392]	; (8008468 <tcp_slowtmr+0x26c>)
 80082e0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80082e4:	4965      	ldr	r1, [pc, #404]	; (800847c <tcp_slowtmr+0x280>)
 80082e6:	4862      	ldr	r0, [pc, #392]	; (8008470 <tcp_slowtmr+0x274>)
 80082e8:	f008 f8a0 	bl	801042c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d106      	bne.n	8008302 <tcp_slowtmr+0x106>
 80082f4:	4b5c      	ldr	r3, [pc, #368]	; (8008468 <tcp_slowtmr+0x26c>)
 80082f6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80082fa:	4961      	ldr	r1, [pc, #388]	; (8008480 <tcp_slowtmr+0x284>)
 80082fc:	485c      	ldr	r0, [pc, #368]	; (8008470 <tcp_slowtmr+0x274>)
 80082fe:	f008 f895 	bl	801042c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008308:	2b0b      	cmp	r3, #11
 800830a:	d905      	bls.n	8008318 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800830c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008310:	3301      	adds	r3, #1
 8008312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008316:	e0ed      	b.n	80084f4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800831e:	3b01      	subs	r3, #1
 8008320:	4a58      	ldr	r2, [pc, #352]	; (8008484 <tcp_slowtmr+0x288>)
 8008322:	5cd3      	ldrb	r3, [r2, r3]
 8008324:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800832c:	7c7a      	ldrb	r2, [r7, #17]
 800832e:	429a      	cmp	r2, r3
 8008330:	d907      	bls.n	8008342 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008338:	3301      	adds	r3, #1
 800833a:	b2da      	uxtb	r2, r3
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008348:	7c7a      	ldrb	r2, [r7, #17]
 800834a:	429a      	cmp	r2, r3
 800834c:	f200 80d2 	bhi.w	80084f4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008350:	2301      	movs	r3, #1
 8008352:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800835a:	2b00      	cmp	r3, #0
 800835c:	d108      	bne.n	8008370 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800835e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008360:	f005 f940 	bl	800d5e4 <tcp_zero_window_probe>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d014      	beq.n	8008394 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800836a:	2300      	movs	r3, #0
 800836c:	623b      	str	r3, [r7, #32]
 800836e:	e011      	b.n	8008394 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008372:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008376:	4619      	mov	r1, r3
 8008378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800837a:	f003 fff5 	bl	800c368 <tcp_split_unsent_seg>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d107      	bne.n	8008394 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008386:	f004 fa75 	bl	800c874 <tcp_output>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 80ac 	beq.w	80084f4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80083a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80083aa:	2b06      	cmp	r3, #6
 80083ac:	f200 80a2 	bhi.w	80084f4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80083b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80083b6:	3301      	adds	r3, #1
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80083c0:	e098      	b.n	80084f4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	db0f      	blt.n	80083ec <tcp_slowtmr+0x1f0>
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80083d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d008      	beq.n	80083ec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80083da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	3301      	adds	r3, #1
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	b21a      	sxth	r2, r3
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80083f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80083f8:	429a      	cmp	r2, r3
 80083fa:	db7b      	blt.n	80084f4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80083fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083fe:	f004 fd31 	bl	800ce64 <tcp_rexmit_rto_prepare>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d007      	beq.n	8008418 <tcp_slowtmr+0x21c>
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840c:	2b00      	cmp	r3, #0
 800840e:	d171      	bne.n	80084f4 <tcp_slowtmr+0x2f8>
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d06d      	beq.n	80084f4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	7d1b      	ldrb	r3, [r3, #20]
 800841c:	2b02      	cmp	r3, #2
 800841e:	d03a      	beq.n	8008496 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008426:	2b0c      	cmp	r3, #12
 8008428:	bf28      	it	cs
 800842a:	230c      	movcs	r3, #12
 800842c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008434:	10db      	asrs	r3, r3, #3
 8008436:	b21b      	sxth	r3, r3
 8008438:	461a      	mov	r2, r3
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008440:	4413      	add	r3, r2
 8008442:	7efa      	ldrb	r2, [r7, #27]
 8008444:	4910      	ldr	r1, [pc, #64]	; (8008488 <tcp_slowtmr+0x28c>)
 8008446:	5c8a      	ldrb	r2, [r1, r2]
 8008448:	4093      	lsls	r3, r2
 800844a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008452:	4293      	cmp	r3, r2
 8008454:	dc1a      	bgt.n	800848c <tcp_slowtmr+0x290>
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	b21a      	sxth	r2, r3
 800845a:	e019      	b.n	8008490 <tcp_slowtmr+0x294>
 800845c:	20006950 	.word	0x20006950
 8008460:	200000ce 	.word	0x200000ce
 8008464:	2000694c 	.word	0x2000694c
 8008468:	08012ae4 	.word	0x08012ae4
 800846c:	08012e28 	.word	0x08012e28
 8008470:	08012b28 	.word	0x08012b28
 8008474:	08012e54 	.word	0x08012e54
 8008478:	08012e80 	.word	0x08012e80
 800847c:	08012eb0 	.word	0x08012eb0
 8008480:	08012ee4 	.word	0x08012ee4
 8008484:	08014aa8 	.word	0x08014aa8
 8008488:	08014a98 	.word	0x08014a98
 800848c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008492:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008498:	2200      	movs	r2, #0
 800849a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80084a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80084a8:	4293      	cmp	r3, r2
 80084aa:	bf28      	it	cs
 80084ac:	4613      	movcs	r3, r2
 80084ae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80084b0:	8a7b      	ldrh	r3, [r7, #18]
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d206      	bcs.n	80084dc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80084dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084de:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80084ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084f0:	f004 fd28 	bl	800cf44 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	7d1b      	ldrb	r3, [r3, #20]
 80084f8:	2b06      	cmp	r3, #6
 80084fa:	d111      	bne.n	8008520 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	8b5b      	ldrh	r3, [r3, #26]
 8008500:	f003 0310 	and.w	r3, r3, #16
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008508:	4b9d      	ldr	r3, [pc, #628]	; (8008780 <tcp_slowtmr+0x584>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b28      	cmp	r3, #40	; 0x28
 8008514:	d904      	bls.n	8008520 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800851a:	3301      	adds	r3, #1
 800851c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	7a5b      	ldrb	r3, [r3, #9]
 8008524:	f003 0308 	and.w	r3, r3, #8
 8008528:	2b00      	cmp	r3, #0
 800852a:	d04c      	beq.n	80085c6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800852c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008530:	2b04      	cmp	r3, #4
 8008532:	d003      	beq.n	800853c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008536:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008538:	2b07      	cmp	r3, #7
 800853a:	d144      	bne.n	80085c6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800853c:	4b90      	ldr	r3, [pc, #576]	; (8008780 <tcp_slowtmr+0x584>)
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800854c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8008550:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008554:	498b      	ldr	r1, [pc, #556]	; (8008784 <tcp_slowtmr+0x588>)
 8008556:	fba1 1303 	umull	r1, r3, r1, r3
 800855a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800855c:	429a      	cmp	r2, r3
 800855e:	d90a      	bls.n	8008576 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008564:	3301      	adds	r3, #1
 8008566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800856a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800856e:	3301      	adds	r3, #1
 8008570:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008574:	e027      	b.n	80085c6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008576:	4b82      	ldr	r3, [pc, #520]	; (8008780 <tcp_slowtmr+0x584>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800858c:	4618      	mov	r0, r3
 800858e:	4b7e      	ldr	r3, [pc, #504]	; (8008788 <tcp_slowtmr+0x58c>)
 8008590:	fb03 f300 	mul.w	r3, r3, r0
 8008594:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008596:	497b      	ldr	r1, [pc, #492]	; (8008784 <tcp_slowtmr+0x588>)
 8008598:	fba1 1303 	umull	r1, r3, r1, r3
 800859c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800859e:	429a      	cmp	r2, r3
 80085a0:	d911      	bls.n	80085c6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80085a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085a4:	f004 ffde 	bl	800d564 <tcp_keepalive>
 80085a8:	4603      	mov	r3, r0
 80085aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80085ae:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d107      	bne.n	80085c6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80085bc:	3301      	adds	r3, #1
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80085c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d011      	beq.n	80085f2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80085ce:	4b6c      	ldr	r3, [pc, #432]	; (8008780 <tcp_slowtmr+0x584>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	1ad2      	subs	r2, r2, r3
 80085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085da:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80085de:	4619      	mov	r1, r3
 80085e0:	460b      	mov	r3, r1
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	440b      	add	r3, r1
 80085e6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d302      	bcc.n	80085f2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80085ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085ee:	f000 fe8d 	bl	800930c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80085f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f4:	7d1b      	ldrb	r3, [r3, #20]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d10b      	bne.n	8008612 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80085fa:	4b61      	ldr	r3, [pc, #388]	; (8008780 <tcp_slowtmr+0x584>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	2b28      	cmp	r3, #40	; 0x28
 8008606:	d904      	bls.n	8008612 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800860c:	3301      	adds	r3, #1
 800860e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	7d1b      	ldrb	r3, [r3, #20]
 8008616:	2b09      	cmp	r3, #9
 8008618:	d10b      	bne.n	8008632 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800861a:	4b59      	ldr	r3, [pc, #356]	; (8008780 <tcp_slowtmr+0x584>)
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2bf0      	cmp	r3, #240	; 0xf0
 8008626:	d904      	bls.n	8008632 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800862c:	3301      	adds	r3, #1
 800862e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008636:	2b00      	cmp	r3, #0
 8008638:	d060      	beq.n	80086fc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008640:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008644:	f000 fcae 	bl	8008fa4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	d010      	beq.n	8008670 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800864e:	4b4f      	ldr	r3, [pc, #316]	; (800878c <tcp_slowtmr+0x590>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008654:	429a      	cmp	r2, r3
 8008656:	d106      	bne.n	8008666 <tcp_slowtmr+0x46a>
 8008658:	4b4d      	ldr	r3, [pc, #308]	; (8008790 <tcp_slowtmr+0x594>)
 800865a:	f240 526d 	movw	r2, #1389	; 0x56d
 800865e:	494d      	ldr	r1, [pc, #308]	; (8008794 <tcp_slowtmr+0x598>)
 8008660:	484d      	ldr	r0, [pc, #308]	; (8008798 <tcp_slowtmr+0x59c>)
 8008662:	f007 fee3 	bl	801042c <iprintf>
        prev->next = pcb->next;
 8008666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	60da      	str	r2, [r3, #12]
 800866e:	e00f      	b.n	8008690 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008670:	4b46      	ldr	r3, [pc, #280]	; (800878c <tcp_slowtmr+0x590>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008676:	429a      	cmp	r2, r3
 8008678:	d006      	beq.n	8008688 <tcp_slowtmr+0x48c>
 800867a:	4b45      	ldr	r3, [pc, #276]	; (8008790 <tcp_slowtmr+0x594>)
 800867c:	f240 5271 	movw	r2, #1393	; 0x571
 8008680:	4946      	ldr	r1, [pc, #280]	; (800879c <tcp_slowtmr+0x5a0>)
 8008682:	4845      	ldr	r0, [pc, #276]	; (8008798 <tcp_slowtmr+0x59c>)
 8008684:	f007 fed2 	bl	801042c <iprintf>
        tcp_active_pcbs = pcb->next;
 8008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	4a3f      	ldr	r2, [pc, #252]	; (800878c <tcp_slowtmr+0x590>)
 800868e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008690:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008694:	2b00      	cmp	r3, #0
 8008696:	d013      	beq.n	80086c0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80086a0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	3304      	adds	r3, #4
 80086a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a8:	8ad2      	ldrh	r2, [r2, #22]
 80086aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086ac:	8b09      	ldrh	r1, [r1, #24]
 80086ae:	9102      	str	r1, [sp, #8]
 80086b0:	9201      	str	r2, [sp, #4]
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	462b      	mov	r3, r5
 80086b6:	4622      	mov	r2, r4
 80086b8:	4601      	mov	r1, r0
 80086ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086bc:	f004 fe9e 	bl	800d3fc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80086c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80086c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c8:	7d1b      	ldrb	r3, [r3, #20]
 80086ca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ce:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80086d6:	6838      	ldr	r0, [r7, #0]
 80086d8:	f7ff f804 	bl	80076e4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80086dc:	4b30      	ldr	r3, [pc, #192]	; (80087a0 <tcp_slowtmr+0x5a4>)
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <tcp_slowtmr+0x4f6>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f06f 010c 	mvn.w	r1, #12
 80086ee:	68b8      	ldr	r0, [r7, #8]
 80086f0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80086f2:	4b2b      	ldr	r3, [pc, #172]	; (80087a0 <tcp_slowtmr+0x5a4>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d037      	beq.n	800876a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80086fa:	e590      	b.n	800821e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	7f1b      	ldrb	r3, [r3, #28]
 800870a:	3301      	adds	r3, #1
 800870c:	b2da      	uxtb	r2, r3
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	7f1a      	ldrb	r2, [r3, #28]
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	7f5b      	ldrb	r3, [r3, #29]
 800871a:	429a      	cmp	r2, r3
 800871c:	d325      	bcc.n	800876a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	2200      	movs	r2, #0
 8008722:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008724:	4b1e      	ldr	r3, [pc, #120]	; (80087a0 <tcp_slowtmr+0x5a4>)
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <tcp_slowtmr+0x550>
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800873a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800873c:	6912      	ldr	r2, [r2, #16]
 800873e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008740:	4610      	mov	r0, r2
 8008742:	4798      	blx	r3
 8008744:	4603      	mov	r3, r0
 8008746:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800874a:	e002      	b.n	8008752 <tcp_slowtmr+0x556>
 800874c:	2300      	movs	r3, #0
 800874e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008752:	4b13      	ldr	r3, [pc, #76]	; (80087a0 <tcp_slowtmr+0x5a4>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d000      	beq.n	800875c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800875a:	e560      	b.n	800821e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800875c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008760:	2b00      	cmp	r3, #0
 8008762:	d102      	bne.n	800876a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008766:	f004 f885 	bl	800c874 <tcp_output>
  while (pcb != NULL) {
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	f47f ad5c 	bne.w	800822a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008776:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <tcp_slowtmr+0x5a8>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800877c:	e067      	b.n	800884e <tcp_slowtmr+0x652>
 800877e:	bf00      	nop
 8008780:	20006950 	.word	0x20006950
 8008784:	10624dd3 	.word	0x10624dd3
 8008788:	000124f8 	.word	0x000124f8
 800878c:	2000694c 	.word	0x2000694c
 8008790:	08012ae4 	.word	0x08012ae4
 8008794:	08012f1c 	.word	0x08012f1c
 8008798:	08012b28 	.word	0x08012b28
 800879c:	08012f48 	.word	0x08012f48
 80087a0:	20006948 	.word	0x20006948
 80087a4:	2000695c 	.word	0x2000695c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	7d1b      	ldrb	r3, [r3, #20]
 80087ac:	2b0a      	cmp	r3, #10
 80087ae:	d006      	beq.n	80087be <tcp_slowtmr+0x5c2>
 80087b0:	4b2a      	ldr	r3, [pc, #168]	; (800885c <tcp_slowtmr+0x660>)
 80087b2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80087b6:	492a      	ldr	r1, [pc, #168]	; (8008860 <tcp_slowtmr+0x664>)
 80087b8:	482a      	ldr	r0, [pc, #168]	; (8008864 <tcp_slowtmr+0x668>)
 80087ba:	f007 fe37 	bl	801042c <iprintf>
    pcb_remove = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80087c4:	4b28      	ldr	r3, [pc, #160]	; (8008868 <tcp_slowtmr+0x66c>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2bf0      	cmp	r3, #240	; 0xf0
 80087d0:	d904      	bls.n	80087dc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80087d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087d6:	3301      	adds	r3, #1
 80087d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80087dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d02f      	beq.n	8008844 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80087e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087e6:	f000 fbdd 	bl	8008fa4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d010      	beq.n	8008812 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80087f0:	4b1e      	ldr	r3, [pc, #120]	; (800886c <tcp_slowtmr+0x670>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d106      	bne.n	8008808 <tcp_slowtmr+0x60c>
 80087fa:	4b18      	ldr	r3, [pc, #96]	; (800885c <tcp_slowtmr+0x660>)
 80087fc:	f240 52af 	movw	r2, #1455	; 0x5af
 8008800:	491b      	ldr	r1, [pc, #108]	; (8008870 <tcp_slowtmr+0x674>)
 8008802:	4818      	ldr	r0, [pc, #96]	; (8008864 <tcp_slowtmr+0x668>)
 8008804:	f007 fe12 	bl	801042c <iprintf>
        prev->next = pcb->next;
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	68da      	ldr	r2, [r3, #12]
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	60da      	str	r2, [r3, #12]
 8008810:	e00f      	b.n	8008832 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008812:	4b16      	ldr	r3, [pc, #88]	; (800886c <tcp_slowtmr+0x670>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008818:	429a      	cmp	r2, r3
 800881a:	d006      	beq.n	800882a <tcp_slowtmr+0x62e>
 800881c:	4b0f      	ldr	r3, [pc, #60]	; (800885c <tcp_slowtmr+0x660>)
 800881e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008822:	4914      	ldr	r1, [pc, #80]	; (8008874 <tcp_slowtmr+0x678>)
 8008824:	480f      	ldr	r0, [pc, #60]	; (8008864 <tcp_slowtmr+0x668>)
 8008826:	f007 fe01 	bl	801042c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	4a0f      	ldr	r2, [pc, #60]	; (800886c <tcp_slowtmr+0x670>)
 8008830:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800883c:	69f8      	ldr	r0, [r7, #28]
 800883e:	f7fe ff51 	bl	80076e4 <tcp_free>
 8008842:	e004      	b.n	800884e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1a9      	bne.n	80087a8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008854:	bf00      	nop
 8008856:	3730      	adds	r7, #48	; 0x30
 8008858:	46bd      	mov	sp, r7
 800885a:	bdb0      	pop	{r4, r5, r7, pc}
 800885c:	08012ae4 	.word	0x08012ae4
 8008860:	08012f74 	.word	0x08012f74
 8008864:	08012b28 	.word	0x08012b28
 8008868:	20006950 	.word	0x20006950
 800886c:	2000695c 	.word	0x2000695c
 8008870:	08012fa4 	.word	0x08012fa4
 8008874:	08012fcc 	.word	0x08012fcc

08008878 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800887e:	4b2d      	ldr	r3, [pc, #180]	; (8008934 <tcp_fasttmr+0xbc>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	3301      	adds	r3, #1
 8008884:	b2da      	uxtb	r2, r3
 8008886:	4b2b      	ldr	r3, [pc, #172]	; (8008934 <tcp_fasttmr+0xbc>)
 8008888:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800888a:	4b2b      	ldr	r3, [pc, #172]	; (8008938 <tcp_fasttmr+0xc0>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008890:	e048      	b.n	8008924 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	7f9a      	ldrb	r2, [r3, #30]
 8008896:	4b27      	ldr	r3, [pc, #156]	; (8008934 <tcp_fasttmr+0xbc>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	429a      	cmp	r2, r3
 800889c:	d03f      	beq.n	800891e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800889e:	4b25      	ldr	r3, [pc, #148]	; (8008934 <tcp_fasttmr+0xbc>)
 80088a0:	781a      	ldrb	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	8b5b      	ldrh	r3, [r3, #26]
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d010      	beq.n	80088d4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	8b5b      	ldrh	r3, [r3, #26]
 80088b6:	f043 0302 	orr.w	r3, r3, #2
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f003 ffd7 	bl	800c874 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	8b5b      	ldrh	r3, [r3, #26]
 80088ca:	f023 0303 	bic.w	r3, r3, #3
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	8b5b      	ldrh	r3, [r3, #26]
 80088d8:	f003 0308 	and.w	r3, r3, #8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d009      	beq.n	80088f4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	8b5b      	ldrh	r3, [r3, #26]
 80088e4:	f023 0308 	bic.w	r3, r3, #8
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff f888 	bl	8007a04 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008902:	4b0e      	ldr	r3, [pc, #56]	; (800893c <tcp_fasttmr+0xc4>)
 8008904:	2200      	movs	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f819 	bl	8008940 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800890e:	4b0b      	ldr	r3, [pc, #44]	; (800893c <tcp_fasttmr+0xc4>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d000      	beq.n	8008918 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008916:	e7b8      	b.n	800888a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	607b      	str	r3, [r7, #4]
 800891c:	e002      	b.n	8008924 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1b3      	bne.n	8008892 <tcp_fasttmr+0x1a>
    }
  }
}
 800892a:	bf00      	nop
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	200000ce 	.word	0x200000ce
 8008938:	2000694c 	.word	0x2000694c
 800893c:	20006948 	.word	0x20006948

08008940 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008940:	b590      	push	{r4, r7, lr}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d109      	bne.n	8008962 <tcp_process_refused_data+0x22>
 800894e:	4b37      	ldr	r3, [pc, #220]	; (8008a2c <tcp_process_refused_data+0xec>)
 8008950:	f240 6209 	movw	r2, #1545	; 0x609
 8008954:	4936      	ldr	r1, [pc, #216]	; (8008a30 <tcp_process_refused_data+0xf0>)
 8008956:	4837      	ldr	r0, [pc, #220]	; (8008a34 <tcp_process_refused_data+0xf4>)
 8008958:	f007 fd68 	bl	801042c <iprintf>
 800895c:	f06f 030f 	mvn.w	r3, #15
 8008960:	e060      	b.n	8008a24 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008966:	7b5b      	ldrb	r3, [r3, #13]
 8008968:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800896e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00b      	beq.n	8008998 <tcp_process_refused_data+0x58>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6918      	ldr	r0, [r3, #16]
 800898a:	2300      	movs	r3, #0
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	47a0      	blx	r4
 8008992:	4603      	mov	r3, r0
 8008994:	73fb      	strb	r3, [r7, #15]
 8008996:	e007      	b.n	80089a8 <tcp_process_refused_data+0x68>
 8008998:	2300      	movs	r3, #0
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	2000      	movs	r0, #0
 80089a0:	f000 f8a2 	bl	8008ae8 <tcp_recv_null>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80089a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d12a      	bne.n	8008a06 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	f003 0320 	and.w	r3, r3, #32
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d033      	beq.n	8008a22 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80089c2:	d005      	beq.n	80089d0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c8:	3301      	adds	r3, #1
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00b      	beq.n	80089f2 <tcp_process_refused_data+0xb2>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6918      	ldr	r0, [r3, #16]
 80089e4:	2300      	movs	r3, #0
 80089e6:	2200      	movs	r2, #0
 80089e8:	6879      	ldr	r1, [r7, #4]
 80089ea:	47a0      	blx	r4
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]
 80089f0:	e001      	b.n	80089f6 <tcp_process_refused_data+0xb6>
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80089f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089fa:	f113 0f0d 	cmn.w	r3, #13
 80089fe:	d110      	bne.n	8008a22 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008a00:	f06f 030c 	mvn.w	r3, #12
 8008a04:	e00e      	b.n	8008a24 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a0a:	f113 0f0d 	cmn.w	r3, #13
 8008a0e:	d102      	bne.n	8008a16 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008a10:	f06f 030c 	mvn.w	r3, #12
 8008a14:	e006      	b.n	8008a24 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008a1c:	f06f 0304 	mvn.w	r3, #4
 8008a20:	e000      	b.n	8008a24 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd90      	pop	{r4, r7, pc}
 8008a2c:	08012ae4 	.word	0x08012ae4
 8008a30:	08012ff4 	.word	0x08012ff4
 8008a34:	08012b28 	.word	0x08012b28

08008a38 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008a40:	e007      	b.n	8008a52 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f809 	bl	8008a60 <tcp_seg_free>
    seg = next;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1f4      	bne.n	8008a42 <tcp_segs_free+0xa>
  }
}
 8008a58:	bf00      	nop
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00c      	beq.n	8008a88 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d004      	beq.n	8008a80 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe fb2e 	bl	80070dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	2003      	movs	r0, #3
 8008a84:	f7fd fd1c 	bl	80064c0 <memp_free>
  }
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <tcp_seg_copy+0x1c>
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <tcp_seg_copy+0x4c>)
 8008aa0:	f240 6282 	movw	r2, #1666	; 0x682
 8008aa4:	490e      	ldr	r1, [pc, #56]	; (8008ae0 <tcp_seg_copy+0x50>)
 8008aa6:	480f      	ldr	r0, [pc, #60]	; (8008ae4 <tcp_seg_copy+0x54>)
 8008aa8:	f007 fcc0 	bl	801042c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008aac:	2003      	movs	r0, #3
 8008aae:	f7fd fcbb 	bl	8006428 <memp_malloc>
 8008ab2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <tcp_seg_copy+0x2e>
    return NULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e00a      	b.n	8008ad4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008abe:	2210      	movs	r2, #16
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f007 fc85 	bl	80103d2 <memcpy>
  pbuf_ref(cseg->p);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe fba5 	bl	800721c <pbuf_ref>
  return cseg;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	08012ae4 	.word	0x08012ae4
 8008ae0:	08013038 	.word	0x08013038
 8008ae4:	08012b28 	.word	0x08012b28

08008ae8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d109      	bne.n	8008b10 <tcp_recv_null+0x28>
 8008afc:	4b12      	ldr	r3, [pc, #72]	; (8008b48 <tcp_recv_null+0x60>)
 8008afe:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008b02:	4912      	ldr	r1, [pc, #72]	; (8008b4c <tcp_recv_null+0x64>)
 8008b04:	4812      	ldr	r0, [pc, #72]	; (8008b50 <tcp_recv_null+0x68>)
 8008b06:	f007 fc91 	bl	801042c <iprintf>
 8008b0a:	f06f 030f 	mvn.w	r3, #15
 8008b0e:	e016      	b.n	8008b3e <tcp_recv_null+0x56>

  if (p != NULL) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d009      	beq.n	8008b2a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	891b      	ldrh	r3, [r3, #8]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	68b8      	ldr	r0, [r7, #8]
 8008b1e:	f7ff f9bf 	bl	8007ea0 <tcp_recved>
    pbuf_free(p);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7fe fada 	bl	80070dc <pbuf_free>
 8008b28:	e008      	b.n	8008b3c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d104      	bne.n	8008b3c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008b32:	68b8      	ldr	r0, [r7, #8]
 8008b34:	f7fe ffcc 	bl	8007ad0 <tcp_close>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	e000      	b.n	8008b3e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	08012ae4 	.word	0x08012ae4
 8008b4c:	08013054 	.word	0x08013054
 8008b50:	08012b28 	.word	0x08012b28

08008b54 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	db01      	blt.n	8008b6a <tcp_kill_prio+0x16>
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	e000      	b.n	8008b6c <tcp_kill_prio+0x18>
 8008b6a:	237f      	movs	r3, #127	; 0x7f
 8008b6c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008b6e:	7afb      	ldrb	r3, [r7, #11]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d034      	beq.n	8008bde <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008b74:	7afb      	ldrb	r3, [r7, #11]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b82:	4b19      	ldr	r3, [pc, #100]	; (8008be8 <tcp_kill_prio+0x94>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	e01f      	b.n	8008bca <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	7d5b      	ldrb	r3, [r3, #21]
 8008b8e:	7afa      	ldrb	r2, [r7, #11]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d80c      	bhi.n	8008bae <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008b98:	7afa      	ldrb	r2, [r7, #11]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d112      	bne.n	8008bc4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008b9e:	4b13      	ldr	r3, [pc, #76]	; (8008bec <tcp_kill_prio+0x98>)
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d80a      	bhi.n	8008bc4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008bae:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <tcp_kill_prio+0x98>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	7d5b      	ldrb	r3, [r3, #21]
 8008bc2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	617b      	str	r3, [r7, #20]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1dc      	bne.n	8008b8a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d004      	beq.n	8008be0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008bd6:	6938      	ldr	r0, [r7, #16]
 8008bd8:	f7ff f864 	bl	8007ca4 <tcp_abort>
 8008bdc:	e000      	b.n	8008be0 <tcp_kill_prio+0x8c>
    return;
 8008bde:	bf00      	nop
  }
}
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	2000694c 	.word	0x2000694c
 8008bec:	20006950 	.word	0x20006950

08008bf0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d009      	beq.n	8008c14 <tcp_kill_state+0x24>
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	2b09      	cmp	r3, #9
 8008c04:	d006      	beq.n	8008c14 <tcp_kill_state+0x24>
 8008c06:	4b1a      	ldr	r3, [pc, #104]	; (8008c70 <tcp_kill_state+0x80>)
 8008c08:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008c0c:	4919      	ldr	r1, [pc, #100]	; (8008c74 <tcp_kill_state+0x84>)
 8008c0e:	481a      	ldr	r0, [pc, #104]	; (8008c78 <tcp_kill_state+0x88>)
 8008c10:	f007 fc0c 	bl	801042c <iprintf>

  inactivity = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c1c:	4b17      	ldr	r3, [pc, #92]	; (8008c7c <tcp_kill_state+0x8c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	e017      	b.n	8008c54 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	7d1b      	ldrb	r3, [r3, #20]
 8008c28:	79fa      	ldrb	r2, [r7, #7]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d10f      	bne.n	8008c4e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008c2e:	4b14      	ldr	r3, [pc, #80]	; (8008c80 <tcp_kill_state+0x90>)
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d807      	bhi.n	8008c4e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008c3e:	4b10      	ldr	r3, [pc, #64]	; (8008c80 <tcp_kill_state+0x90>)
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e4      	bne.n	8008c24 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008c60:	2100      	movs	r1, #0
 8008c62:	6938      	ldr	r0, [r7, #16]
 8008c64:	f7fe ff60 	bl	8007b28 <tcp_abandon>
  }
}
 8008c68:	bf00      	nop
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	08012ae4 	.word	0x08012ae4
 8008c74:	08013070 	.word	0x08013070
 8008c78:	08012b28 	.word	0x08012b28
 8008c7c:	2000694c 	.word	0x2000694c
 8008c80:	20006950 	.word	0x20006950

08008c84 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c92:	4b12      	ldr	r3, [pc, #72]	; (8008cdc <tcp_kill_timewait+0x58>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	e012      	b.n	8008cc0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008c9a:	4b11      	ldr	r3, [pc, #68]	; (8008ce0 <tcp_kill_timewait+0x5c>)
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d807      	bhi.n	8008cba <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008caa:	4b0d      	ldr	r3, [pc, #52]	; (8008ce0 <tcp_kill_timewait+0x5c>)
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e9      	bne.n	8008c9a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008ccc:	68b8      	ldr	r0, [r7, #8]
 8008cce:	f7fe ffe9 	bl	8007ca4 <tcp_abort>
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	2000695c 	.word	0x2000695c
 8008ce0:	20006950 	.word	0x20006950

08008ce4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008cea:	4b10      	ldr	r3, [pc, #64]	; (8008d2c <tcp_handle_closepend+0x48>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008cf0:	e014      	b.n	8008d1c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	8b5b      	ldrh	r3, [r3, #26]
 8008cfc:	f003 0308 	and.w	r3, r3, #8
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	8b5b      	ldrh	r3, [r3, #26]
 8008d08:	f023 0308 	bic.w	r3, r3, #8
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fe fe76 	bl	8007a04 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1e7      	bne.n	8008cf2 <tcp_handle_closepend+0xe>
  }
}
 8008d22:	bf00      	nop
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	2000694c 	.word	0x2000694c

08008d30 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	f7fd fb74 	bl	8006428 <memp_malloc>
 8008d40:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d126      	bne.n	8008d96 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008d48:	f7ff ffcc 	bl	8008ce4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008d4c:	f7ff ff9a 	bl	8008c84 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d50:	2001      	movs	r0, #1
 8008d52:	f7fd fb69 	bl	8006428 <memp_malloc>
 8008d56:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d11b      	bne.n	8008d96 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008d5e:	2009      	movs	r0, #9
 8008d60:	f7ff ff46 	bl	8008bf0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d64:	2001      	movs	r0, #1
 8008d66:	f7fd fb5f 	bl	8006428 <memp_malloc>
 8008d6a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d111      	bne.n	8008d96 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008d72:	2008      	movs	r0, #8
 8008d74:	f7ff ff3c 	bl	8008bf0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d78:	2001      	movs	r0, #1
 8008d7a:	f7fd fb55 	bl	8006428 <memp_malloc>
 8008d7e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d107      	bne.n	8008d96 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7ff fee3 	bl	8008b54 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d8e:	2001      	movs	r0, #1
 8008d90:	f7fd fb4a 	bl	8006428 <memp_malloc>
 8008d94:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d03f      	beq.n	8008e1c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008d9c:	229c      	movs	r2, #156	; 0x9c
 8008d9e:	2100      	movs	r1, #0
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f007 fb3a 	bl	801041a <memset>
    pcb->prio = prio;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	79fa      	ldrb	r2, [r7, #7]
 8008daa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008db2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	22ff      	movs	r2, #255	; 0xff
 8008dca:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008dd2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2206      	movs	r2, #6
 8008dd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2206      	movs	r2, #6
 8008de0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008de8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008df2:	4b0d      	ldr	r3, [pc, #52]	; (8008e28 <tcp_alloc+0xf8>)
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008dfa:	4b0c      	ldr	r3, [pc, #48]	; (8008e2c <tcp_alloc+0xfc>)
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008e08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4a08      	ldr	r2, [pc, #32]	; (8008e30 <tcp_alloc+0x100>)
 8008e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4a07      	ldr	r2, [pc, #28]	; (8008e34 <tcp_alloc+0x104>)
 8008e18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20006950 	.word	0x20006950
 8008e2c:	200000ce 	.word	0x200000ce
 8008e30:	08008ae9 	.word	0x08008ae9
 8008e34:	006ddd00 	.word	0x006ddd00

08008e38 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008e42:	2040      	movs	r0, #64	; 0x40
 8008e44:	f7ff ff74 	bl	8008d30 <tcp_alloc>
 8008e48:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	611a      	str	r2, [r3, #16]
  }
}
 8008e6a:	bf00      	nop
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
	...

08008e78 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00e      	beq.n	8008ea6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	7d1b      	ldrb	r3, [r3, #20]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d106      	bne.n	8008e9e <tcp_recv+0x26>
 8008e90:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <tcp_recv+0x38>)
 8008e92:	f240 72df 	movw	r2, #2015	; 0x7df
 8008e96:	4907      	ldr	r1, [pc, #28]	; (8008eb4 <tcp_recv+0x3c>)
 8008e98:	4807      	ldr	r0, [pc, #28]	; (8008eb8 <tcp_recv+0x40>)
 8008e9a:	f007 fac7 	bl	801042c <iprintf>
    pcb->recv = recv;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	08012ae4 	.word	0x08012ae4
 8008eb4:	08013080 	.word	0x08013080
 8008eb8:	08012b28 	.word	0x08012b28

08008ebc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00e      	beq.n	8008eea <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	7d1b      	ldrb	r3, [r3, #20]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d106      	bne.n	8008ee2 <tcp_sent+0x26>
 8008ed4:	4b07      	ldr	r3, [pc, #28]	; (8008ef4 <tcp_sent+0x38>)
 8008ed6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008eda:	4907      	ldr	r1, [pc, #28]	; (8008ef8 <tcp_sent+0x3c>)
 8008edc:	4807      	ldr	r0, [pc, #28]	; (8008efc <tcp_sent+0x40>)
 8008ede:	f007 faa5 	bl	801042c <iprintf>
    pcb->sent = sent;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	08012ae4 	.word	0x08012ae4
 8008ef8:	080130a8 	.word	0x080130a8
 8008efc:	08012b28 	.word	0x08012b28

08008f00 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00e      	beq.n	8008f2e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	7d1b      	ldrb	r3, [r3, #20]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d106      	bne.n	8008f26 <tcp_err+0x26>
 8008f18:	4b07      	ldr	r3, [pc, #28]	; (8008f38 <tcp_err+0x38>)
 8008f1a:	f640 020d 	movw	r2, #2061	; 0x80d
 8008f1e:	4907      	ldr	r1, [pc, #28]	; (8008f3c <tcp_err+0x3c>)
 8008f20:	4807      	ldr	r0, [pc, #28]	; (8008f40 <tcp_err+0x40>)
 8008f22:	f007 fa83 	bl	801042c <iprintf>
    pcb->errf = err;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008f2e:	bf00      	nop
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	08012ae4 	.word	0x08012ae4
 8008f3c:	080130d0 	.word	0x080130d0
 8008f40:	08012b28 	.word	0x08012b28

08008f44 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d107      	bne.n	8008f68 <tcp_poll+0x24>
 8008f58:	4b0e      	ldr	r3, [pc, #56]	; (8008f94 <tcp_poll+0x50>)
 8008f5a:	f640 023d 	movw	r2, #2109	; 0x83d
 8008f5e:	490e      	ldr	r1, [pc, #56]	; (8008f98 <tcp_poll+0x54>)
 8008f60:	480e      	ldr	r0, [pc, #56]	; (8008f9c <tcp_poll+0x58>)
 8008f62:	f007 fa63 	bl	801042c <iprintf>
 8008f66:	e011      	b.n	8008f8c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	7d1b      	ldrb	r3, [r3, #20]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d106      	bne.n	8008f7e <tcp_poll+0x3a>
 8008f70:	4b08      	ldr	r3, [pc, #32]	; (8008f94 <tcp_poll+0x50>)
 8008f72:	f640 023e 	movw	r2, #2110	; 0x83e
 8008f76:	490a      	ldr	r1, [pc, #40]	; (8008fa0 <tcp_poll+0x5c>)
 8008f78:	4808      	ldr	r0, [pc, #32]	; (8008f9c <tcp_poll+0x58>)
 8008f7a:	f007 fa57 	bl	801042c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	79fa      	ldrb	r2, [r7, #7]
 8008f8a:	775a      	strb	r2, [r3, #29]
}
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	08012ae4 	.word	0x08012ae4
 8008f98:	080130f8 	.word	0x080130f8
 8008f9c:	08012b28 	.word	0x08012b28
 8008fa0:	08013110 	.word	0x08013110

08008fa4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d107      	bne.n	8008fc2 <tcp_pcb_purge+0x1e>
 8008fb2:	4b21      	ldr	r3, [pc, #132]	; (8009038 <tcp_pcb_purge+0x94>)
 8008fb4:	f640 0251 	movw	r2, #2129	; 0x851
 8008fb8:	4920      	ldr	r1, [pc, #128]	; (800903c <tcp_pcb_purge+0x98>)
 8008fba:	4821      	ldr	r0, [pc, #132]	; (8009040 <tcp_pcb_purge+0x9c>)
 8008fbc:	f007 fa36 	bl	801042c <iprintf>
 8008fc0:	e037      	b.n	8009032 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	7d1b      	ldrb	r3, [r3, #20]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d033      	beq.n	8009032 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008fce:	2b0a      	cmp	r3, #10
 8008fd0:	d02f      	beq.n	8009032 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d02b      	beq.n	8009032 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d007      	beq.n	8008ff2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe f878 	bl	80070dc <pbuf_free>
      pcb->refused_data = NULL;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f986 	bl	800930c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009006:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff fd13 	bl	8008a38 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff fd0e 	bl	8008a38 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	66da      	str	r2, [r3, #108]	; 0x6c
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	08012ae4 	.word	0x08012ae4
 800903c:	08013130 	.word	0x08013130
 8009040:	08012b28 	.word	0x08012b28

08009044 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d106      	bne.n	8009062 <tcp_pcb_remove+0x1e>
 8009054:	4b3e      	ldr	r3, [pc, #248]	; (8009150 <tcp_pcb_remove+0x10c>)
 8009056:	f640 0283 	movw	r2, #2179	; 0x883
 800905a:	493e      	ldr	r1, [pc, #248]	; (8009154 <tcp_pcb_remove+0x110>)
 800905c:	483e      	ldr	r0, [pc, #248]	; (8009158 <tcp_pcb_remove+0x114>)
 800905e:	f007 f9e5 	bl	801042c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d106      	bne.n	8009076 <tcp_pcb_remove+0x32>
 8009068:	4b39      	ldr	r3, [pc, #228]	; (8009150 <tcp_pcb_remove+0x10c>)
 800906a:	f640 0284 	movw	r2, #2180	; 0x884
 800906e:	493b      	ldr	r1, [pc, #236]	; (800915c <tcp_pcb_remove+0x118>)
 8009070:	4839      	ldr	r0, [pc, #228]	; (8009158 <tcp_pcb_remove+0x114>)
 8009072:	f007 f9db 	bl	801042c <iprintf>

  TCP_RMV(pcblist, pcb);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	429a      	cmp	r2, r3
 800907e:	d105      	bne.n	800908c <tcp_pcb_remove+0x48>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68da      	ldr	r2, [r3, #12]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	e013      	b.n	80090b4 <tcp_pcb_remove+0x70>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	e00c      	b.n	80090ae <tcp_pcb_remove+0x6a>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	429a      	cmp	r2, r3
 800909c:	d104      	bne.n	80090a8 <tcp_pcb_remove+0x64>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	60da      	str	r2, [r3, #12]
 80090a6:	e005      	b.n	80090b4 <tcp_pcb_remove+0x70>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	60fb      	str	r3, [r7, #12]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1ef      	bne.n	8009094 <tcp_pcb_remove+0x50>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80090ba:	6838      	ldr	r0, [r7, #0]
 80090bc:	f7ff ff72 	bl	8008fa4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	7d1b      	ldrb	r3, [r3, #20]
 80090c4:	2b0a      	cmp	r3, #10
 80090c6:	d013      	beq.n	80090f0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d00f      	beq.n	80090f0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	8b5b      	ldrh	r3, [r3, #26]
 80090d4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d009      	beq.n	80090f0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	8b5b      	ldrh	r3, [r3, #26]
 80090e0:	f043 0302 	orr.w	r3, r3, #2
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80090ea:	6838      	ldr	r0, [r7, #0]
 80090ec:	f003 fbc2 	bl	800c874 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	7d1b      	ldrb	r3, [r3, #20]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d020      	beq.n	800913a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d006      	beq.n	800910e <tcp_pcb_remove+0xca>
 8009100:	4b13      	ldr	r3, [pc, #76]	; (8009150 <tcp_pcb_remove+0x10c>)
 8009102:	f640 0293 	movw	r2, #2195	; 0x893
 8009106:	4916      	ldr	r1, [pc, #88]	; (8009160 <tcp_pcb_remove+0x11c>)
 8009108:	4813      	ldr	r0, [pc, #76]	; (8009158 <tcp_pcb_remove+0x114>)
 800910a:	f007 f98f 	bl	801042c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009112:	2b00      	cmp	r3, #0
 8009114:	d006      	beq.n	8009124 <tcp_pcb_remove+0xe0>
 8009116:	4b0e      	ldr	r3, [pc, #56]	; (8009150 <tcp_pcb_remove+0x10c>)
 8009118:	f640 0294 	movw	r2, #2196	; 0x894
 800911c:	4911      	ldr	r1, [pc, #68]	; (8009164 <tcp_pcb_remove+0x120>)
 800911e:	480e      	ldr	r0, [pc, #56]	; (8009158 <tcp_pcb_remove+0x114>)
 8009120:	f007 f984 	bl	801042c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009128:	2b00      	cmp	r3, #0
 800912a:	d006      	beq.n	800913a <tcp_pcb_remove+0xf6>
 800912c:	4b08      	ldr	r3, [pc, #32]	; (8009150 <tcp_pcb_remove+0x10c>)
 800912e:	f640 0296 	movw	r2, #2198	; 0x896
 8009132:	490d      	ldr	r1, [pc, #52]	; (8009168 <tcp_pcb_remove+0x124>)
 8009134:	4808      	ldr	r0, [pc, #32]	; (8009158 <tcp_pcb_remove+0x114>)
 8009136:	f007 f979 	bl	801042c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2200      	movs	r2, #0
 800913e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009146:	bf00      	nop
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	08012ae4 	.word	0x08012ae4
 8009154:	0801314c 	.word	0x0801314c
 8009158:	08012b28 	.word	0x08012b28
 800915c:	08013168 	.word	0x08013168
 8009160:	08013188 	.word	0x08013188
 8009164:	080131a0 	.word	0x080131a0
 8009168:	080131bc 	.word	0x080131bc

0800916c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <tcp_next_iss+0x1c>
 800917a:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <tcp_next_iss+0x38>)
 800917c:	f640 02af 	movw	r2, #2223	; 0x8af
 8009180:	4909      	ldr	r1, [pc, #36]	; (80091a8 <tcp_next_iss+0x3c>)
 8009182:	480a      	ldr	r0, [pc, #40]	; (80091ac <tcp_next_iss+0x40>)
 8009184:	f007 f952 	bl	801042c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009188:	4b09      	ldr	r3, [pc, #36]	; (80091b0 <tcp_next_iss+0x44>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <tcp_next_iss+0x48>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4413      	add	r3, r2
 8009192:	4a07      	ldr	r2, [pc, #28]	; (80091b0 <tcp_next_iss+0x44>)
 8009194:	6013      	str	r3, [r2, #0]
  return iss;
 8009196:	4b06      	ldr	r3, [pc, #24]	; (80091b0 <tcp_next_iss+0x44>)
 8009198:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	08012ae4 	.word	0x08012ae4
 80091a8:	080131d4 	.word	0x080131d4
 80091ac:	08012b28 	.word	0x08012b28
 80091b0:	2000000c 	.word	0x2000000c
 80091b4:	20006950 	.word	0x20006950

080091b8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d106      	bne.n	80091da <tcp_eff_send_mss_netif+0x22>
 80091cc:	4b14      	ldr	r3, [pc, #80]	; (8009220 <tcp_eff_send_mss_netif+0x68>)
 80091ce:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80091d2:	4914      	ldr	r1, [pc, #80]	; (8009224 <tcp_eff_send_mss_netif+0x6c>)
 80091d4:	4814      	ldr	r0, [pc, #80]	; (8009228 <tcp_eff_send_mss_netif+0x70>)
 80091d6:	f007 f929 	bl	801042c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80091e0:	89fb      	ldrh	r3, [r7, #14]
 80091e2:	e019      	b.n	8009218 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80091e8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80091ea:	8afb      	ldrh	r3, [r7, #22]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d012      	beq.n	8009216 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80091f0:	2328      	movs	r3, #40	; 0x28
 80091f2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80091f4:	8afa      	ldrh	r2, [r7, #22]
 80091f6:	8abb      	ldrh	r3, [r7, #20]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d904      	bls.n	8009206 <tcp_eff_send_mss_netif+0x4e>
 80091fc:	8afa      	ldrh	r2, [r7, #22]
 80091fe:	8abb      	ldrh	r3, [r7, #20]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	b29b      	uxth	r3, r3
 8009204:	e000      	b.n	8009208 <tcp_eff_send_mss_netif+0x50>
 8009206:	2300      	movs	r3, #0
 8009208:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800920a:	8a7a      	ldrh	r2, [r7, #18]
 800920c:	89fb      	ldrh	r3, [r7, #14]
 800920e:	4293      	cmp	r3, r2
 8009210:	bf28      	it	cs
 8009212:	4613      	movcs	r3, r2
 8009214:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009216:	89fb      	ldrh	r3, [r7, #14]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	08012ae4 	.word	0x08012ae4
 8009224:	080131f0 	.word	0x080131f0
 8009228:	08012b28 	.word	0x08012b28

0800922c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d119      	bne.n	8009274 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009240:	4b10      	ldr	r3, [pc, #64]	; (8009284 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009242:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009246:	4910      	ldr	r1, [pc, #64]	; (8009288 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009248:	4810      	ldr	r0, [pc, #64]	; (800928c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800924a:	f007 f8ef 	bl	801042c <iprintf>

  while (pcb != NULL) {
 800924e:	e011      	b.n	8009274 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	429a      	cmp	r2, r3
 800925a:	d108      	bne.n	800926e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f7fe fd1e 	bl	8007ca4 <tcp_abort>
      pcb = next;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	e002      	b.n	8009274 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1ea      	bne.n	8009250 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800927a:	bf00      	nop
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	08012ae4 	.word	0x08012ae4
 8009288:	08013218 	.word	0x08013218
 800928c:	08012b28 	.word	0x08012b28

08009290 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d02a      	beq.n	80092f6 <tcp_netif_ip_addr_changed+0x66>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d026      	beq.n	80092f6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80092a8:	4b15      	ldr	r3, [pc, #84]	; (8009300 <tcp_netif_ip_addr_changed+0x70>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7ff ffbc 	bl	800922c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80092b4:	4b13      	ldr	r3, [pc, #76]	; (8009304 <tcp_netif_ip_addr_changed+0x74>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff ffb6 	bl	800922c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d017      	beq.n	80092f6 <tcp_netif_ip_addr_changed+0x66>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d013      	beq.n	80092f6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80092ce:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <tcp_netif_ip_addr_changed+0x78>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e00c      	b.n	80092f0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d103      	bne.n	80092ea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1ef      	bne.n	80092d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80092f6:	bf00      	nop
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	2000694c 	.word	0x2000694c
 8009304:	20006958 	.word	0x20006958
 8009308:	20006954 	.word	0x20006954

0800930c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009318:	2b00      	cmp	r3, #0
 800931a:	d007      	beq.n	800932c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff fb89 	bl	8008a38 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800932c:	bf00      	nop
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009334:	b590      	push	{r4, r7, lr}
 8009336:	b08d      	sub	sp, #52	; 0x34
 8009338:	af04      	add	r7, sp, #16
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d105      	bne.n	8009350 <tcp_input+0x1c>
 8009344:	4b9b      	ldr	r3, [pc, #620]	; (80095b4 <tcp_input+0x280>)
 8009346:	2283      	movs	r2, #131	; 0x83
 8009348:	499b      	ldr	r1, [pc, #620]	; (80095b8 <tcp_input+0x284>)
 800934a:	489c      	ldr	r0, [pc, #624]	; (80095bc <tcp_input+0x288>)
 800934c:	f007 f86e 	bl	801042c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	4a9a      	ldr	r2, [pc, #616]	; (80095c0 <tcp_input+0x28c>)
 8009356:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	895b      	ldrh	r3, [r3, #10]
 800935c:	2b13      	cmp	r3, #19
 800935e:	f240 83c4 	bls.w	8009aea <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009362:	4b98      	ldr	r3, [pc, #608]	; (80095c4 <tcp_input+0x290>)
 8009364:	695a      	ldr	r2, [r3, #20]
 8009366:	4b97      	ldr	r3, [pc, #604]	; (80095c4 <tcp_input+0x290>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4619      	mov	r1, r3
 800936c:	4610      	mov	r0, r2
 800936e:	f006 f8b1 	bl	800f4d4 <ip4_addr_isbroadcast_u32>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	f040 83ba 	bne.w	8009aee <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800937a:	4b92      	ldr	r3, [pc, #584]	; (80095c4 <tcp_input+0x290>)
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009382:	2be0      	cmp	r3, #224	; 0xe0
 8009384:	f000 83b3 	beq.w	8009aee <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009388:	4b8d      	ldr	r3, [pc, #564]	; (80095c0 <tcp_input+0x28c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	899b      	ldrh	r3, [r3, #12]
 800938e:	b29b      	uxth	r3, r3
 8009390:	4618      	mov	r0, r3
 8009392:	f7fc fbcb 	bl	8005b2c <lwip_htons>
 8009396:	4603      	mov	r3, r0
 8009398:	0b1b      	lsrs	r3, r3, #12
 800939a:	b29b      	uxth	r3, r3
 800939c:	b2db      	uxtb	r3, r3
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80093a2:	7cbb      	ldrb	r3, [r7, #18]
 80093a4:	2b13      	cmp	r3, #19
 80093a6:	f240 83a2 	bls.w	8009aee <tcp_input+0x7ba>
 80093aa:	7cbb      	ldrb	r3, [r7, #18]
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	891b      	ldrh	r3, [r3, #8]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	f200 839b 	bhi.w	8009aee <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80093b8:	7cbb      	ldrb	r3, [r7, #18]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	3b14      	subs	r3, #20
 80093be:	b29a      	uxth	r2, r3
 80093c0:	4b81      	ldr	r3, [pc, #516]	; (80095c8 <tcp_input+0x294>)
 80093c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80093c4:	4b81      	ldr	r3, [pc, #516]	; (80095cc <tcp_input+0x298>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	895a      	ldrh	r2, [r3, #10]
 80093ce:	7cbb      	ldrb	r3, [r7, #18]
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d309      	bcc.n	80093ea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80093d6:	4b7c      	ldr	r3, [pc, #496]	; (80095c8 <tcp_input+0x294>)
 80093d8:	881a      	ldrh	r2, [r3, #0]
 80093da:	4b7d      	ldr	r3, [pc, #500]	; (80095d0 <tcp_input+0x29c>)
 80093dc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80093de:	7cbb      	ldrb	r3, [r7, #18]
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7fd fdf4 	bl	8006fd0 <pbuf_remove_header>
 80093e8:	e04e      	b.n	8009488 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d105      	bne.n	80093fe <tcp_input+0xca>
 80093f2:	4b70      	ldr	r3, [pc, #448]	; (80095b4 <tcp_input+0x280>)
 80093f4:	22c2      	movs	r2, #194	; 0xc2
 80093f6:	4977      	ldr	r1, [pc, #476]	; (80095d4 <tcp_input+0x2a0>)
 80093f8:	4870      	ldr	r0, [pc, #448]	; (80095bc <tcp_input+0x288>)
 80093fa:	f007 f817 	bl	801042c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80093fe:	2114      	movs	r1, #20
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7fd fde5 	bl	8006fd0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	895a      	ldrh	r2, [r3, #10]
 800940a:	4b71      	ldr	r3, [pc, #452]	; (80095d0 <tcp_input+0x29c>)
 800940c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800940e:	4b6e      	ldr	r3, [pc, #440]	; (80095c8 <tcp_input+0x294>)
 8009410:	881a      	ldrh	r2, [r3, #0]
 8009412:	4b6f      	ldr	r3, [pc, #444]	; (80095d0 <tcp_input+0x29c>)
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800941a:	4b6d      	ldr	r3, [pc, #436]	; (80095d0 <tcp_input+0x29c>)
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7fd fdd5 	bl	8006fd0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	895b      	ldrh	r3, [r3, #10]
 800942c:	8a3a      	ldrh	r2, [r7, #16]
 800942e:	429a      	cmp	r2, r3
 8009430:	f200 835f 	bhi.w	8009af2 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	4a64      	ldr	r2, [pc, #400]	; (80095cc <tcp_input+0x298>)
 800943c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	8a3a      	ldrh	r2, [r7, #16]
 8009444:	4611      	mov	r1, r2
 8009446:	4618      	mov	r0, r3
 8009448:	f7fd fdc2 	bl	8006fd0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	891a      	ldrh	r2, [r3, #8]
 8009450:	8a3b      	ldrh	r3, [r7, #16]
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	b29a      	uxth	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	895b      	ldrh	r3, [r3, #10]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d005      	beq.n	800946e <tcp_input+0x13a>
 8009462:	4b54      	ldr	r3, [pc, #336]	; (80095b4 <tcp_input+0x280>)
 8009464:	22df      	movs	r2, #223	; 0xdf
 8009466:	495c      	ldr	r1, [pc, #368]	; (80095d8 <tcp_input+0x2a4>)
 8009468:	4854      	ldr	r0, [pc, #336]	; (80095bc <tcp_input+0x288>)
 800946a:	f006 ffdf 	bl	801042c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	891a      	ldrh	r2, [r3, #8]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	891b      	ldrh	r3, [r3, #8]
 8009478:	429a      	cmp	r2, r3
 800947a:	d005      	beq.n	8009488 <tcp_input+0x154>
 800947c:	4b4d      	ldr	r3, [pc, #308]	; (80095b4 <tcp_input+0x280>)
 800947e:	22e0      	movs	r2, #224	; 0xe0
 8009480:	4956      	ldr	r1, [pc, #344]	; (80095dc <tcp_input+0x2a8>)
 8009482:	484e      	ldr	r0, [pc, #312]	; (80095bc <tcp_input+0x288>)
 8009484:	f006 ffd2 	bl	801042c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009488:	4b4d      	ldr	r3, [pc, #308]	; (80095c0 <tcp_input+0x28c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	b29a      	uxth	r2, r3
 8009490:	4b4b      	ldr	r3, [pc, #300]	; (80095c0 <tcp_input+0x28c>)
 8009492:	681c      	ldr	r4, [r3, #0]
 8009494:	4610      	mov	r0, r2
 8009496:	f7fc fb49 	bl	8005b2c <lwip_htons>
 800949a:	4603      	mov	r3, r0
 800949c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800949e:	4b48      	ldr	r3, [pc, #288]	; (80095c0 <tcp_input+0x28c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	885b      	ldrh	r3, [r3, #2]
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	4b46      	ldr	r3, [pc, #280]	; (80095c0 <tcp_input+0x28c>)
 80094a8:	681c      	ldr	r4, [r3, #0]
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7fc fb3e 	bl	8005b2c <lwip_htons>
 80094b0:	4603      	mov	r3, r0
 80094b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80094b4:	4b42      	ldr	r3, [pc, #264]	; (80095c0 <tcp_input+0x28c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	4b41      	ldr	r3, [pc, #260]	; (80095c0 <tcp_input+0x28c>)
 80094bc:	681c      	ldr	r4, [r3, #0]
 80094be:	4610      	mov	r0, r2
 80094c0:	f7fc fb49 	bl	8005b56 <lwip_htonl>
 80094c4:	4603      	mov	r3, r0
 80094c6:	6063      	str	r3, [r4, #4]
 80094c8:	6863      	ldr	r3, [r4, #4]
 80094ca:	4a45      	ldr	r2, [pc, #276]	; (80095e0 <tcp_input+0x2ac>)
 80094cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80094ce:	4b3c      	ldr	r3, [pc, #240]	; (80095c0 <tcp_input+0x28c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	4b3a      	ldr	r3, [pc, #232]	; (80095c0 <tcp_input+0x28c>)
 80094d6:	681c      	ldr	r4, [r3, #0]
 80094d8:	4610      	mov	r0, r2
 80094da:	f7fc fb3c 	bl	8005b56 <lwip_htonl>
 80094de:	4603      	mov	r3, r0
 80094e0:	60a3      	str	r3, [r4, #8]
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	4a3f      	ldr	r2, [pc, #252]	; (80095e4 <tcp_input+0x2b0>)
 80094e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80094e8:	4b35      	ldr	r3, [pc, #212]	; (80095c0 <tcp_input+0x28c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	89db      	ldrh	r3, [r3, #14]
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	4b33      	ldr	r3, [pc, #204]	; (80095c0 <tcp_input+0x28c>)
 80094f2:	681c      	ldr	r4, [r3, #0]
 80094f4:	4610      	mov	r0, r2
 80094f6:	f7fc fb19 	bl	8005b2c <lwip_htons>
 80094fa:	4603      	mov	r3, r0
 80094fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80094fe:	4b30      	ldr	r3, [pc, #192]	; (80095c0 <tcp_input+0x28c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	899b      	ldrh	r3, [r3, #12]
 8009504:	b29b      	uxth	r3, r3
 8009506:	4618      	mov	r0, r3
 8009508:	f7fc fb10 	bl	8005b2c <lwip_htons>
 800950c:	4603      	mov	r3, r0
 800950e:	b2db      	uxtb	r3, r3
 8009510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009514:	b2da      	uxtb	r2, r3
 8009516:	4b34      	ldr	r3, [pc, #208]	; (80095e8 <tcp_input+0x2b4>)
 8009518:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	891a      	ldrh	r2, [r3, #8]
 800951e:	4b33      	ldr	r3, [pc, #204]	; (80095ec <tcp_input+0x2b8>)
 8009520:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009522:	4b31      	ldr	r3, [pc, #196]	; (80095e8 <tcp_input+0x2b4>)
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00c      	beq.n	8009548 <tcp_input+0x214>
    tcplen++;
 800952e:	4b2f      	ldr	r3, [pc, #188]	; (80095ec <tcp_input+0x2b8>)
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	3301      	adds	r3, #1
 8009534:	b29a      	uxth	r2, r3
 8009536:	4b2d      	ldr	r3, [pc, #180]	; (80095ec <tcp_input+0x2b8>)
 8009538:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	891a      	ldrh	r2, [r3, #8]
 800953e:	4b2b      	ldr	r3, [pc, #172]	; (80095ec <tcp_input+0x2b8>)
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	429a      	cmp	r2, r3
 8009544:	f200 82d7 	bhi.w	8009af6 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009548:	2300      	movs	r3, #0
 800954a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800954c:	4b28      	ldr	r3, [pc, #160]	; (80095f0 <tcp_input+0x2bc>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	61fb      	str	r3, [r7, #28]
 8009552:	e09d      	b.n	8009690 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	7d1b      	ldrb	r3, [r3, #20]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d105      	bne.n	8009568 <tcp_input+0x234>
 800955c:	4b15      	ldr	r3, [pc, #84]	; (80095b4 <tcp_input+0x280>)
 800955e:	22fb      	movs	r2, #251	; 0xfb
 8009560:	4924      	ldr	r1, [pc, #144]	; (80095f4 <tcp_input+0x2c0>)
 8009562:	4816      	ldr	r0, [pc, #88]	; (80095bc <tcp_input+0x288>)
 8009564:	f006 ff62 	bl	801042c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	7d1b      	ldrb	r3, [r3, #20]
 800956c:	2b0a      	cmp	r3, #10
 800956e:	d105      	bne.n	800957c <tcp_input+0x248>
 8009570:	4b10      	ldr	r3, [pc, #64]	; (80095b4 <tcp_input+0x280>)
 8009572:	22fc      	movs	r2, #252	; 0xfc
 8009574:	4920      	ldr	r1, [pc, #128]	; (80095f8 <tcp_input+0x2c4>)
 8009576:	4811      	ldr	r0, [pc, #68]	; (80095bc <tcp_input+0x288>)
 8009578:	f006 ff58 	bl	801042c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	7d1b      	ldrb	r3, [r3, #20]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d105      	bne.n	8009590 <tcp_input+0x25c>
 8009584:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <tcp_input+0x280>)
 8009586:	22fd      	movs	r2, #253	; 0xfd
 8009588:	491c      	ldr	r1, [pc, #112]	; (80095fc <tcp_input+0x2c8>)
 800958a:	480c      	ldr	r0, [pc, #48]	; (80095bc <tcp_input+0x288>)
 800958c:	f006 ff4e 	bl	801042c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	7a1b      	ldrb	r3, [r3, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d033      	beq.n	8009600 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	7a1a      	ldrb	r2, [r3, #8]
 800959c:	4b09      	ldr	r3, [pc, #36]	; (80095c4 <tcp_input+0x290>)
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095a4:	3301      	adds	r3, #1
 80095a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d029      	beq.n	8009600 <tcp_input+0x2cc>
      prev = pcb;
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	61bb      	str	r3, [r7, #24]
      continue;
 80095b0:	e06b      	b.n	800968a <tcp_input+0x356>
 80095b2:	bf00      	nop
 80095b4:	0801324c 	.word	0x0801324c
 80095b8:	08013280 	.word	0x08013280
 80095bc:	08013298 	.word	0x08013298
 80095c0:	200000e0 	.word	0x200000e0
 80095c4:	20003408 	.word	0x20003408
 80095c8:	200000e4 	.word	0x200000e4
 80095cc:	200000e8 	.word	0x200000e8
 80095d0:	200000e6 	.word	0x200000e6
 80095d4:	080132c0 	.word	0x080132c0
 80095d8:	080132d0 	.word	0x080132d0
 80095dc:	080132dc 	.word	0x080132dc
 80095e0:	200000f0 	.word	0x200000f0
 80095e4:	200000f4 	.word	0x200000f4
 80095e8:	200000fc 	.word	0x200000fc
 80095ec:	200000fa 	.word	0x200000fa
 80095f0:	2000694c 	.word	0x2000694c
 80095f4:	080132fc 	.word	0x080132fc
 80095f8:	08013324 	.word	0x08013324
 80095fc:	08013350 	.word	0x08013350
    }

    if (pcb->remote_port == tcphdr->src &&
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	8b1a      	ldrh	r2, [r3, #24]
 8009604:	4b94      	ldr	r3, [pc, #592]	; (8009858 <tcp_input+0x524>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	b29b      	uxth	r3, r3
 800960c:	429a      	cmp	r2, r3
 800960e:	d13a      	bne.n	8009686 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	8ada      	ldrh	r2, [r3, #22]
 8009614:	4b90      	ldr	r3, [pc, #576]	; (8009858 <tcp_input+0x524>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	885b      	ldrh	r3, [r3, #2]
 800961a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800961c:	429a      	cmp	r2, r3
 800961e:	d132      	bne.n	8009686 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	4b8d      	ldr	r3, [pc, #564]	; (800985c <tcp_input+0x528>)
 8009626:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009628:	429a      	cmp	r2, r3
 800962a:	d12c      	bne.n	8009686 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	4b8a      	ldr	r3, [pc, #552]	; (800985c <tcp_input+0x528>)
 8009632:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009634:	429a      	cmp	r2, r3
 8009636:	d126      	bne.n	8009686 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	69fa      	ldr	r2, [r7, #28]
 800963e:	429a      	cmp	r2, r3
 8009640:	d106      	bne.n	8009650 <tcp_input+0x31c>
 8009642:	4b87      	ldr	r3, [pc, #540]	; (8009860 <tcp_input+0x52c>)
 8009644:	f240 120d 	movw	r2, #269	; 0x10d
 8009648:	4986      	ldr	r1, [pc, #536]	; (8009864 <tcp_input+0x530>)
 800964a:	4887      	ldr	r0, [pc, #540]	; (8009868 <tcp_input+0x534>)
 800964c:	f006 feee 	bl	801042c <iprintf>
      if (prev != NULL) {
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00a      	beq.n	800966c <tcp_input+0x338>
        prev->next = pcb->next;
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800965e:	4b83      	ldr	r3, [pc, #524]	; (800986c <tcp_input+0x538>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009666:	4a81      	ldr	r2, [pc, #516]	; (800986c <tcp_input+0x538>)
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	69fa      	ldr	r2, [r7, #28]
 8009672:	429a      	cmp	r2, r3
 8009674:	d111      	bne.n	800969a <tcp_input+0x366>
 8009676:	4b7a      	ldr	r3, [pc, #488]	; (8009860 <tcp_input+0x52c>)
 8009678:	f240 1215 	movw	r2, #277	; 0x115
 800967c:	497c      	ldr	r1, [pc, #496]	; (8009870 <tcp_input+0x53c>)
 800967e:	487a      	ldr	r0, [pc, #488]	; (8009868 <tcp_input+0x534>)
 8009680:	f006 fed4 	bl	801042c <iprintf>
      break;
 8009684:	e009      	b.n	800969a <tcp_input+0x366>
    }
    prev = pcb;
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	61fb      	str	r3, [r7, #28]
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f47f af5e 	bne.w	8009554 <tcp_input+0x220>
 8009698:	e000      	b.n	800969c <tcp_input+0x368>
      break;
 800969a:	bf00      	nop
  }

  if (pcb == NULL) {
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f040 8095 	bne.w	80097ce <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80096a4:	4b73      	ldr	r3, [pc, #460]	; (8009874 <tcp_input+0x540>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	61fb      	str	r3, [r7, #28]
 80096aa:	e03f      	b.n	800972c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	7d1b      	ldrb	r3, [r3, #20]
 80096b0:	2b0a      	cmp	r3, #10
 80096b2:	d006      	beq.n	80096c2 <tcp_input+0x38e>
 80096b4:	4b6a      	ldr	r3, [pc, #424]	; (8009860 <tcp_input+0x52c>)
 80096b6:	f240 121f 	movw	r2, #287	; 0x11f
 80096ba:	496f      	ldr	r1, [pc, #444]	; (8009878 <tcp_input+0x544>)
 80096bc:	486a      	ldr	r0, [pc, #424]	; (8009868 <tcp_input+0x534>)
 80096be:	f006 feb5 	bl	801042c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	7a1b      	ldrb	r3, [r3, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d009      	beq.n	80096de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	7a1a      	ldrb	r2, [r3, #8]
 80096ce:	4b63      	ldr	r3, [pc, #396]	; (800985c <tcp_input+0x528>)
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80096d6:	3301      	adds	r3, #1
 80096d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80096da:	429a      	cmp	r2, r3
 80096dc:	d122      	bne.n	8009724 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	8b1a      	ldrh	r2, [r3, #24]
 80096e2:	4b5d      	ldr	r3, [pc, #372]	; (8009858 <tcp_input+0x524>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d11b      	bne.n	8009726 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	8ada      	ldrh	r2, [r3, #22]
 80096f2:	4b59      	ldr	r3, [pc, #356]	; (8009858 <tcp_input+0x524>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	885b      	ldrh	r3, [r3, #2]
 80096f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d113      	bne.n	8009726 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	685a      	ldr	r2, [r3, #4]
 8009702:	4b56      	ldr	r3, [pc, #344]	; (800985c <tcp_input+0x528>)
 8009704:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009706:	429a      	cmp	r2, r3
 8009708:	d10d      	bne.n	8009726 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4b53      	ldr	r3, [pc, #332]	; (800985c <tcp_input+0x528>)
 8009710:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009712:	429a      	cmp	r2, r3
 8009714:	d107      	bne.n	8009726 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009716:	69f8      	ldr	r0, [r7, #28]
 8009718:	f000 fb52 	bl	8009dc0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7fd fcdd 	bl	80070dc <pbuf_free>
        return;
 8009722:	e1ee      	b.n	8009b02 <tcp_input+0x7ce>
        continue;
 8009724:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	61fb      	str	r3, [r7, #28]
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1bc      	bne.n	80096ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009732:	2300      	movs	r3, #0
 8009734:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009736:	4b51      	ldr	r3, [pc, #324]	; (800987c <tcp_input+0x548>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	e02a      	b.n	8009794 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	7a1b      	ldrb	r3, [r3, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00c      	beq.n	8009760 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	7a1a      	ldrb	r2, [r3, #8]
 800974a:	4b44      	ldr	r3, [pc, #272]	; (800985c <tcp_input+0x528>)
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009752:	3301      	adds	r3, #1
 8009754:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009756:	429a      	cmp	r2, r3
 8009758:	d002      	beq.n	8009760 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	61bb      	str	r3, [r7, #24]
        continue;
 800975e:	e016      	b.n	800978e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	8ada      	ldrh	r2, [r3, #22]
 8009764:	4b3c      	ldr	r3, [pc, #240]	; (8009858 <tcp_input+0x524>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	885b      	ldrh	r3, [r3, #2]
 800976a:	b29b      	uxth	r3, r3
 800976c:	429a      	cmp	r2, r3
 800976e:	d10c      	bne.n	800978a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	4b39      	ldr	r3, [pc, #228]	; (800985c <tcp_input+0x528>)
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	429a      	cmp	r2, r3
 800977a:	d00f      	beq.n	800979c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00d      	beq.n	800979e <tcp_input+0x46a>
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d009      	beq.n	800979e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1d1      	bne.n	800973e <tcp_input+0x40a>
 800979a:	e000      	b.n	800979e <tcp_input+0x46a>
            break;
 800979c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d014      	beq.n	80097ce <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80097b2:	4b32      	ldr	r3, [pc, #200]	; (800987c <tcp_input+0x548>)
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80097ba:	4a30      	ldr	r2, [pc, #192]	; (800987c <tcp_input+0x548>)
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80097c0:	6978      	ldr	r0, [r7, #20]
 80097c2:	f000 f9ff 	bl	8009bc4 <tcp_listen_input>
      }
      pbuf_free(p);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7fd fc88 	bl	80070dc <pbuf_free>
      return;
 80097cc:	e199      	b.n	8009b02 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 8160 	beq.w	8009a96 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80097d6:	4b2a      	ldr	r3, [pc, #168]	; (8009880 <tcp_input+0x54c>)
 80097d8:	2200      	movs	r2, #0
 80097da:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	891a      	ldrh	r2, [r3, #8]
 80097e0:	4b27      	ldr	r3, [pc, #156]	; (8009880 <tcp_input+0x54c>)
 80097e2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80097e4:	4a26      	ldr	r2, [pc, #152]	; (8009880 <tcp_input+0x54c>)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80097ea:	4b1b      	ldr	r3, [pc, #108]	; (8009858 <tcp_input+0x524>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a24      	ldr	r2, [pc, #144]	; (8009880 <tcp_input+0x54c>)
 80097f0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80097f2:	4b24      	ldr	r3, [pc, #144]	; (8009884 <tcp_input+0x550>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80097f8:	4b23      	ldr	r3, [pc, #140]	; (8009888 <tcp_input+0x554>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80097fe:	4b23      	ldr	r3, [pc, #140]	; (800988c <tcp_input+0x558>)
 8009800:	2200      	movs	r2, #0
 8009802:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009804:	4b22      	ldr	r3, [pc, #136]	; (8009890 <tcp_input+0x55c>)
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	f003 0308 	and.w	r3, r3, #8
 800980c:	2b00      	cmp	r3, #0
 800980e:	d006      	beq.n	800981e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7b5b      	ldrb	r3, [r3, #13]
 8009814:	f043 0301 	orr.w	r3, r3, #1
 8009818:	b2da      	uxtb	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009822:	2b00      	cmp	r3, #0
 8009824:	d038      	beq.n	8009898 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009826:	69f8      	ldr	r0, [r7, #28]
 8009828:	f7ff f88a 	bl	8008940 <tcp_process_refused_data>
 800982c:	4603      	mov	r3, r0
 800982e:	f113 0f0d 	cmn.w	r3, #13
 8009832:	d007      	beq.n	8009844 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009838:	2b00      	cmp	r3, #0
 800983a:	d02d      	beq.n	8009898 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800983c:	4b15      	ldr	r3, [pc, #84]	; (8009894 <tcp_input+0x560>)
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d029      	beq.n	8009898 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009848:	2b00      	cmp	r3, #0
 800984a:	f040 8104 	bne.w	8009a56 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800984e:	69f8      	ldr	r0, [r7, #28]
 8009850:	f003 fe26 	bl	800d4a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009854:	e0ff      	b.n	8009a56 <tcp_input+0x722>
 8009856:	bf00      	nop
 8009858:	200000e0 	.word	0x200000e0
 800985c:	20003408 	.word	0x20003408
 8009860:	0801324c 	.word	0x0801324c
 8009864:	08013378 	.word	0x08013378
 8009868:	08013298 	.word	0x08013298
 800986c:	2000694c 	.word	0x2000694c
 8009870:	080133a4 	.word	0x080133a4
 8009874:	2000695c 	.word	0x2000695c
 8009878:	080133d0 	.word	0x080133d0
 800987c:	20006954 	.word	0x20006954
 8009880:	200000d0 	.word	0x200000d0
 8009884:	20000100 	.word	0x20000100
 8009888:	200000fd 	.word	0x200000fd
 800988c:	200000f8 	.word	0x200000f8
 8009890:	200000fc 	.word	0x200000fc
 8009894:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8009898:	4a9b      	ldr	r2, [pc, #620]	; (8009b08 <tcp_input+0x7d4>)
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800989e:	69f8      	ldr	r0, [r7, #28]
 80098a0:	f000 fb0a 	bl	8009eb8 <tcp_process>
 80098a4:	4603      	mov	r3, r0
 80098a6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80098a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098ac:	f113 0f0d 	cmn.w	r3, #13
 80098b0:	f000 80d3 	beq.w	8009a5a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80098b4:	4b95      	ldr	r3, [pc, #596]	; (8009b0c <tcp_input+0x7d8>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d015      	beq.n	80098ec <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d008      	beq.n	80098dc <tcp_input+0x5a8>
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098d0:	69fa      	ldr	r2, [r7, #28]
 80098d2:	6912      	ldr	r2, [r2, #16]
 80098d4:	f06f 010d 	mvn.w	r1, #13
 80098d8:	4610      	mov	r0, r2
 80098da:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80098dc:	69f9      	ldr	r1, [r7, #28]
 80098de:	488c      	ldr	r0, [pc, #560]	; (8009b10 <tcp_input+0x7dc>)
 80098e0:	f7ff fbb0 	bl	8009044 <tcp_pcb_remove>
        tcp_free(pcb);
 80098e4:	69f8      	ldr	r0, [r7, #28]
 80098e6:	f7fd fefd 	bl	80076e4 <tcp_free>
 80098ea:	e0c1      	b.n	8009a70 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80098f0:	4b88      	ldr	r3, [pc, #544]	; (8009b14 <tcp_input+0x7e0>)
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d01d      	beq.n	8009934 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80098f8:	4b86      	ldr	r3, [pc, #536]	; (8009b14 <tcp_input+0x7e0>)
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00a      	beq.n	800991e <tcp_input+0x5ea>
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800990e:	69fa      	ldr	r2, [r7, #28]
 8009910:	6910      	ldr	r0, [r2, #16]
 8009912:	89fa      	ldrh	r2, [r7, #14]
 8009914:	69f9      	ldr	r1, [r7, #28]
 8009916:	4798      	blx	r3
 8009918:	4603      	mov	r3, r0
 800991a:	74fb      	strb	r3, [r7, #19]
 800991c:	e001      	b.n	8009922 <tcp_input+0x5ee>
 800991e:	2300      	movs	r3, #0
 8009920:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009922:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009926:	f113 0f0d 	cmn.w	r3, #13
 800992a:	f000 8098 	beq.w	8009a5e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800992e:	4b79      	ldr	r3, [pc, #484]	; (8009b14 <tcp_input+0x7e0>)
 8009930:	2200      	movs	r2, #0
 8009932:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009934:	69f8      	ldr	r0, [r7, #28]
 8009936:	f000 f905 	bl	8009b44 <tcp_input_delayed_close>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	f040 8090 	bne.w	8009a62 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009942:	4b75      	ldr	r3, [pc, #468]	; (8009b18 <tcp_input+0x7e4>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d041      	beq.n	80099ce <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800994e:	2b00      	cmp	r3, #0
 8009950:	d006      	beq.n	8009960 <tcp_input+0x62c>
 8009952:	4b72      	ldr	r3, [pc, #456]	; (8009b1c <tcp_input+0x7e8>)
 8009954:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009958:	4971      	ldr	r1, [pc, #452]	; (8009b20 <tcp_input+0x7ec>)
 800995a:	4872      	ldr	r0, [pc, #456]	; (8009b24 <tcp_input+0x7f0>)
 800995c:	f006 fd66 	bl	801042c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	8b5b      	ldrh	r3, [r3, #26]
 8009964:	f003 0310 	and.w	r3, r3, #16
 8009968:	2b00      	cmp	r3, #0
 800996a:	d008      	beq.n	800997e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800996c:	4b6a      	ldr	r3, [pc, #424]	; (8009b18 <tcp_input+0x7e4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4618      	mov	r0, r3
 8009972:	f7fd fbb3 	bl	80070dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009976:	69f8      	ldr	r0, [r7, #28]
 8009978:	f7fe f994 	bl	8007ca4 <tcp_abort>
            goto aborted;
 800997c:	e078      	b.n	8009a70 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00c      	beq.n	80099a2 <tcp_input+0x66e>
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	6918      	ldr	r0, [r3, #16]
 8009992:	4b61      	ldr	r3, [pc, #388]	; (8009b18 <tcp_input+0x7e4>)
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	2300      	movs	r3, #0
 8009998:	69f9      	ldr	r1, [r7, #28]
 800999a:	47a0      	blx	r4
 800999c:	4603      	mov	r3, r0
 800999e:	74fb      	strb	r3, [r7, #19]
 80099a0:	e008      	b.n	80099b4 <tcp_input+0x680>
 80099a2:	4b5d      	ldr	r3, [pc, #372]	; (8009b18 <tcp_input+0x7e4>)
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	2300      	movs	r3, #0
 80099a8:	69f9      	ldr	r1, [r7, #28]
 80099aa:	2000      	movs	r0, #0
 80099ac:	f7ff f89c 	bl	8008ae8 <tcp_recv_null>
 80099b0:	4603      	mov	r3, r0
 80099b2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80099b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80099b8:	f113 0f0d 	cmn.w	r3, #13
 80099bc:	d053      	beq.n	8009a66 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80099be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80099c6:	4b54      	ldr	r3, [pc, #336]	; (8009b18 <tcp_input+0x7e4>)
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80099ce:	4b4f      	ldr	r3, [pc, #316]	; (8009b0c <tcp_input+0x7d8>)
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	f003 0320 	and.w	r3, r3, #32
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d030      	beq.n	8009a3c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d009      	beq.n	80099f6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099e6:	7b5a      	ldrb	r2, [r3, #13]
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099ec:	f042 0220 	orr.w	r2, r2, #32
 80099f0:	b2d2      	uxtb	r2, r2
 80099f2:	735a      	strb	r2, [r3, #13]
 80099f4:	e022      	b.n	8009a3c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80099fe:	d005      	beq.n	8009a0c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a04:	3301      	adds	r3, #1
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00b      	beq.n	8009a2e <tcp_input+0x6fa>
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	6918      	ldr	r0, [r3, #16]
 8009a20:	2300      	movs	r3, #0
 8009a22:	2200      	movs	r2, #0
 8009a24:	69f9      	ldr	r1, [r7, #28]
 8009a26:	47a0      	blx	r4
 8009a28:	4603      	mov	r3, r0
 8009a2a:	74fb      	strb	r3, [r7, #19]
 8009a2c:	e001      	b.n	8009a32 <tcp_input+0x6fe>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009a32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a36:	f113 0f0d 	cmn.w	r3, #13
 8009a3a:	d016      	beq.n	8009a6a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009a3c:	4b32      	ldr	r3, [pc, #200]	; (8009b08 <tcp_input+0x7d4>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009a42:	69f8      	ldr	r0, [r7, #28]
 8009a44:	f000 f87e 	bl	8009b44 <tcp_input_delayed_close>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10f      	bne.n	8009a6e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009a4e:	69f8      	ldr	r0, [r7, #28]
 8009a50:	f002 ff10 	bl	800c874 <tcp_output>
 8009a54:	e00c      	b.n	8009a70 <tcp_input+0x73c>
        goto aborted;
 8009a56:	bf00      	nop
 8009a58:	e00a      	b.n	8009a70 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009a5a:	bf00      	nop
 8009a5c:	e008      	b.n	8009a70 <tcp_input+0x73c>
              goto aborted;
 8009a5e:	bf00      	nop
 8009a60:	e006      	b.n	8009a70 <tcp_input+0x73c>
          goto aborted;
 8009a62:	bf00      	nop
 8009a64:	e004      	b.n	8009a70 <tcp_input+0x73c>
            goto aborted;
 8009a66:	bf00      	nop
 8009a68:	e002      	b.n	8009a70 <tcp_input+0x73c>
              goto aborted;
 8009a6a:	bf00      	nop
 8009a6c:	e000      	b.n	8009a70 <tcp_input+0x73c>
          goto aborted;
 8009a6e:	bf00      	nop
    tcp_input_pcb = NULL;
 8009a70:	4b25      	ldr	r3, [pc, #148]	; (8009b08 <tcp_input+0x7d4>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009a76:	4b28      	ldr	r3, [pc, #160]	; (8009b18 <tcp_input+0x7e4>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009a7c:	4b2a      	ldr	r3, [pc, #168]	; (8009b28 <tcp_input+0x7f4>)
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d03d      	beq.n	8009b00 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8009a84:	4b28      	ldr	r3, [pc, #160]	; (8009b28 <tcp_input+0x7f4>)
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fd fb27 	bl	80070dc <pbuf_free>
      inseg.p = NULL;
 8009a8e:	4b26      	ldr	r3, [pc, #152]	; (8009b28 <tcp_input+0x7f4>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009a94:	e034      	b.n	8009b00 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009a96:	4b25      	ldr	r3, [pc, #148]	; (8009b2c <tcp_input+0x7f8>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	899b      	ldrh	r3, [r3, #12]
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fc f844 	bl	8005b2c <lwip_htons>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	f003 0304 	and.w	r3, r3, #4
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d118      	bne.n	8009ae2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ab0:	4b1f      	ldr	r3, [pc, #124]	; (8009b30 <tcp_input+0x7fc>)
 8009ab2:	6819      	ldr	r1, [r3, #0]
 8009ab4:	4b1f      	ldr	r3, [pc, #124]	; (8009b34 <tcp_input+0x800>)
 8009ab6:	881b      	ldrh	r3, [r3, #0]
 8009ab8:	461a      	mov	r2, r3
 8009aba:	4b1f      	ldr	r3, [pc, #124]	; (8009b38 <tcp_input+0x804>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ac0:	4b1a      	ldr	r3, [pc, #104]	; (8009b2c <tcp_input+0x7f8>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ac4:	885b      	ldrh	r3, [r3, #2]
 8009ac6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ac8:	4a18      	ldr	r2, [pc, #96]	; (8009b2c <tcp_input+0x7f8>)
 8009aca:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009acc:	8812      	ldrh	r2, [r2, #0]
 8009ace:	b292      	uxth	r2, r2
 8009ad0:	9202      	str	r2, [sp, #8]
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	4b19      	ldr	r3, [pc, #100]	; (8009b3c <tcp_input+0x808>)
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	4b19      	ldr	r3, [pc, #100]	; (8009b40 <tcp_input+0x80c>)
 8009ada:	4602      	mov	r2, r0
 8009adc:	2000      	movs	r0, #0
 8009ade:	f003 fc8d 	bl	800d3fc <tcp_rst>
    pbuf_free(p);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7fd fafa 	bl	80070dc <pbuf_free>
  return;
 8009ae8:	e00a      	b.n	8009b00 <tcp_input+0x7cc>
    goto dropped;
 8009aea:	bf00      	nop
 8009aec:	e004      	b.n	8009af8 <tcp_input+0x7c4>
dropped:
 8009aee:	bf00      	nop
 8009af0:	e002      	b.n	8009af8 <tcp_input+0x7c4>
      goto dropped;
 8009af2:	bf00      	nop
 8009af4:	e000      	b.n	8009af8 <tcp_input+0x7c4>
      goto dropped;
 8009af6:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7fd faef 	bl	80070dc <pbuf_free>
 8009afe:	e000      	b.n	8009b02 <tcp_input+0x7ce>
  return;
 8009b00:	bf00      	nop
}
 8009b02:	3724      	adds	r7, #36	; 0x24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd90      	pop	{r4, r7, pc}
 8009b08:	20006960 	.word	0x20006960
 8009b0c:	200000fd 	.word	0x200000fd
 8009b10:	2000694c 	.word	0x2000694c
 8009b14:	200000f8 	.word	0x200000f8
 8009b18:	20000100 	.word	0x20000100
 8009b1c:	0801324c 	.word	0x0801324c
 8009b20:	08013400 	.word	0x08013400
 8009b24:	08013298 	.word	0x08013298
 8009b28:	200000d0 	.word	0x200000d0
 8009b2c:	200000e0 	.word	0x200000e0
 8009b30:	200000f4 	.word	0x200000f4
 8009b34:	200000fa 	.word	0x200000fa
 8009b38:	200000f0 	.word	0x200000f0
 8009b3c:	20003418 	.word	0x20003418
 8009b40:	2000341c 	.word	0x2000341c

08009b44 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d106      	bne.n	8009b60 <tcp_input_delayed_close+0x1c>
 8009b52:	4b17      	ldr	r3, [pc, #92]	; (8009bb0 <tcp_input_delayed_close+0x6c>)
 8009b54:	f240 225a 	movw	r2, #602	; 0x25a
 8009b58:	4916      	ldr	r1, [pc, #88]	; (8009bb4 <tcp_input_delayed_close+0x70>)
 8009b5a:	4817      	ldr	r0, [pc, #92]	; (8009bb8 <tcp_input_delayed_close+0x74>)
 8009b5c:	f006 fc66 	bl	801042c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009b60:	4b16      	ldr	r3, [pc, #88]	; (8009bbc <tcp_input_delayed_close+0x78>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	f003 0310 	and.w	r3, r3, #16
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d01c      	beq.n	8009ba6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	8b5b      	ldrh	r3, [r3, #26]
 8009b70:	f003 0310 	and.w	r3, r3, #16
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10d      	bne.n	8009b94 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d008      	beq.n	8009b94 <tcp_input_delayed_close+0x50>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6912      	ldr	r2, [r2, #16]
 8009b8c:	f06f 010e 	mvn.w	r1, #14
 8009b90:	4610      	mov	r0, r2
 8009b92:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	480a      	ldr	r0, [pc, #40]	; (8009bc0 <tcp_input_delayed_close+0x7c>)
 8009b98:	f7ff fa54 	bl	8009044 <tcp_pcb_remove>
    tcp_free(pcb);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7fd fda1 	bl	80076e4 <tcp_free>
    return 1;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e000      	b.n	8009ba8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	0801324c 	.word	0x0801324c
 8009bb4:	0801341c 	.word	0x0801341c
 8009bb8:	08013298 	.word	0x08013298
 8009bbc:	200000fd 	.word	0x200000fd
 8009bc0:	2000694c 	.word	0x2000694c

08009bc4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009bc4:	b590      	push	{r4, r7, lr}
 8009bc6:	b08b      	sub	sp, #44	; 0x2c
 8009bc8:	af04      	add	r7, sp, #16
 8009bca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009bcc:	4b6f      	ldr	r3, [pc, #444]	; (8009d8c <tcp_listen_input+0x1c8>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	f003 0304 	and.w	r3, r3, #4
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f040 80d3 	bne.w	8009d80 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d106      	bne.n	8009bee <tcp_listen_input+0x2a>
 8009be0:	4b6b      	ldr	r3, [pc, #428]	; (8009d90 <tcp_listen_input+0x1cc>)
 8009be2:	f240 2281 	movw	r2, #641	; 0x281
 8009be6:	496b      	ldr	r1, [pc, #428]	; (8009d94 <tcp_listen_input+0x1d0>)
 8009be8:	486b      	ldr	r0, [pc, #428]	; (8009d98 <tcp_listen_input+0x1d4>)
 8009bea:	f006 fc1f 	bl	801042c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009bee:	4b67      	ldr	r3, [pc, #412]	; (8009d8c <tcp_listen_input+0x1c8>)
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	f003 0310 	and.w	r3, r3, #16
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d019      	beq.n	8009c2e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bfa:	4b68      	ldr	r3, [pc, #416]	; (8009d9c <tcp_listen_input+0x1d8>)
 8009bfc:	6819      	ldr	r1, [r3, #0]
 8009bfe:	4b68      	ldr	r3, [pc, #416]	; (8009da0 <tcp_listen_input+0x1dc>)
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	4b67      	ldr	r3, [pc, #412]	; (8009da4 <tcp_listen_input+0x1e0>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c0a:	4b67      	ldr	r3, [pc, #412]	; (8009da8 <tcp_listen_input+0x1e4>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c0e:	885b      	ldrh	r3, [r3, #2]
 8009c10:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c12:	4a65      	ldr	r2, [pc, #404]	; (8009da8 <tcp_listen_input+0x1e4>)
 8009c14:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c16:	8812      	ldrh	r2, [r2, #0]
 8009c18:	b292      	uxth	r2, r2
 8009c1a:	9202      	str	r2, [sp, #8]
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	4b63      	ldr	r3, [pc, #396]	; (8009dac <tcp_listen_input+0x1e8>)
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	4b63      	ldr	r3, [pc, #396]	; (8009db0 <tcp_listen_input+0x1ec>)
 8009c24:	4602      	mov	r2, r0
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f003 fbe8 	bl	800d3fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009c2c:	e0aa      	b.n	8009d84 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8009c2e:	4b57      	ldr	r3, [pc, #348]	; (8009d8c <tcp_listen_input+0x1c8>)
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	f003 0302 	and.w	r3, r3, #2
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 80a4 	beq.w	8009d84 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	7d5b      	ldrb	r3, [r3, #21]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff f875 	bl	8008d30 <tcp_alloc>
 8009c46:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d111      	bne.n	8009c72 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <tcp_listen_input+0xa8>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	6910      	ldr	r0, [r2, #16]
 8009c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c62:	2100      	movs	r1, #0
 8009c64:	4798      	blx	r3
 8009c66:	4603      	mov	r3, r0
 8009c68:	73bb      	strb	r3, [r7, #14]
      return;
 8009c6a:	e08c      	b.n	8009d86 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009c6c:	23f0      	movs	r3, #240	; 0xf0
 8009c6e:	73bb      	strb	r3, [r7, #14]
      return;
 8009c70:	e089      	b.n	8009d86 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009c72:	4b50      	ldr	r3, [pc, #320]	; (8009db4 <tcp_listen_input+0x1f0>)
 8009c74:	695a      	ldr	r2, [r3, #20]
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009c7a:	4b4e      	ldr	r3, [pc, #312]	; (8009db4 <tcp_listen_input+0x1f0>)
 8009c7c:	691a      	ldr	r2, [r3, #16]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	8ada      	ldrh	r2, [r3, #22]
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009c8a:	4b47      	ldr	r3, [pc, #284]	; (8009da8 <tcp_listen_input+0x1e4>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2203      	movs	r2, #3
 8009c9a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009c9c:	4b41      	ldr	r3, [pc, #260]	; (8009da4 <tcp_listen_input+0x1e0>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	1c5a      	adds	r2, r3, #1
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009cae:	6978      	ldr	r0, [r7, #20]
 8009cb0:	f7ff fa5c 	bl	800916c <tcp_next_iss>
 8009cb4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009cce:	4b35      	ldr	r3, [pc, #212]	; (8009da4 <tcp_listen_input+0x1e0>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	1e5a      	subs	r2, r3, #1
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691a      	ldr	r2, [r3, #16]
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	7a5b      	ldrb	r3, [r3, #9]
 8009cea:	f003 030c 	and.w	r3, r3, #12
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	7a1a      	ldrb	r2, [r3, #8]
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009cfc:	4b2e      	ldr	r3, [pc, #184]	; (8009db8 <tcp_listen_input+0x1f4>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	60da      	str	r2, [r3, #12]
 8009d04:	4a2c      	ldr	r2, [pc, #176]	; (8009db8 <tcp_listen_input+0x1f4>)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	f003 fd39 	bl	800d780 <tcp_timer_needed>
 8009d0e:	4b2b      	ldr	r3, [pc, #172]	; (8009dbc <tcp_listen_input+0x1f8>)
 8009d10:	2201      	movs	r2, #1
 8009d12:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009d14:	6978      	ldr	r0, [r7, #20]
 8009d16:	f001 fd8f 	bl	800b838 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009d1a:	4b23      	ldr	r3, [pc, #140]	; (8009da8 <tcp_listen_input+0x1e4>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	89db      	ldrh	r3, [r3, #14]
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f005 f935 	bl	800efac <ip4_route>
 8009d42:	4601      	mov	r1, r0
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	3304      	adds	r3, #4
 8009d48:	461a      	mov	r2, r3
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f7ff fa34 	bl	80091b8 <tcp_eff_send_mss_netif>
 8009d50:	4603      	mov	r3, r0
 8009d52:	461a      	mov	r2, r3
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009d58:	2112      	movs	r1, #18
 8009d5a:	6978      	ldr	r0, [r7, #20]
 8009d5c:	f002 fc9c 	bl	800c698 <tcp_enqueue_flags>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d004      	beq.n	8009d76 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	6978      	ldr	r0, [r7, #20]
 8009d70:	f7fd feda 	bl	8007b28 <tcp_abandon>
      return;
 8009d74:	e007      	b.n	8009d86 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8009d76:	6978      	ldr	r0, [r7, #20]
 8009d78:	f002 fd7c 	bl	800c874 <tcp_output>
  return;
 8009d7c:	bf00      	nop
 8009d7e:	e001      	b.n	8009d84 <tcp_listen_input+0x1c0>
    return;
 8009d80:	bf00      	nop
 8009d82:	e000      	b.n	8009d86 <tcp_listen_input+0x1c2>
  return;
 8009d84:	bf00      	nop
}
 8009d86:	371c      	adds	r7, #28
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd90      	pop	{r4, r7, pc}
 8009d8c:	200000fc 	.word	0x200000fc
 8009d90:	0801324c 	.word	0x0801324c
 8009d94:	08013444 	.word	0x08013444
 8009d98:	08013298 	.word	0x08013298
 8009d9c:	200000f4 	.word	0x200000f4
 8009da0:	200000fa 	.word	0x200000fa
 8009da4:	200000f0 	.word	0x200000f0
 8009da8:	200000e0 	.word	0x200000e0
 8009dac:	20003418 	.word	0x20003418
 8009db0:	2000341c 	.word	0x2000341c
 8009db4:	20003408 	.word	0x20003408
 8009db8:	2000694c 	.word	0x2000694c
 8009dbc:	20006948 	.word	0x20006948

08009dc0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af04      	add	r7, sp, #16
 8009dc6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009dc8:	4b30      	ldr	r3, [pc, #192]	; (8009e8c <tcp_timewait_input+0xcc>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d154      	bne.n	8009e7e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d106      	bne.n	8009de8 <tcp_timewait_input+0x28>
 8009dda:	4b2d      	ldr	r3, [pc, #180]	; (8009e90 <tcp_timewait_input+0xd0>)
 8009ddc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009de0:	492c      	ldr	r1, [pc, #176]	; (8009e94 <tcp_timewait_input+0xd4>)
 8009de2:	482d      	ldr	r0, [pc, #180]	; (8009e98 <tcp_timewait_input+0xd8>)
 8009de4:	f006 fb22 	bl	801042c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009de8:	4b28      	ldr	r3, [pc, #160]	; (8009e8c <tcp_timewait_input+0xcc>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	f003 0302 	and.w	r3, r3, #2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d02a      	beq.n	8009e4a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009df4:	4b29      	ldr	r3, [pc, #164]	; (8009e9c <tcp_timewait_input+0xdc>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	db2d      	blt.n	8009e5e <tcp_timewait_input+0x9e>
 8009e02:	4b26      	ldr	r3, [pc, #152]	; (8009e9c <tcp_timewait_input+0xdc>)
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e0e:	440b      	add	r3, r1
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dc23      	bgt.n	8009e5e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e16:	4b22      	ldr	r3, [pc, #136]	; (8009ea0 <tcp_timewait_input+0xe0>)
 8009e18:	6819      	ldr	r1, [r3, #0]
 8009e1a:	4b22      	ldr	r3, [pc, #136]	; (8009ea4 <tcp_timewait_input+0xe4>)
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	4b1e      	ldr	r3, [pc, #120]	; (8009e9c <tcp_timewait_input+0xdc>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e26:	4b20      	ldr	r3, [pc, #128]	; (8009ea8 <tcp_timewait_input+0xe8>)
 8009e28:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e2a:	885b      	ldrh	r3, [r3, #2]
 8009e2c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ea8 <tcp_timewait_input+0xe8>)
 8009e30:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e32:	8812      	ldrh	r2, [r2, #0]
 8009e34:	b292      	uxth	r2, r2
 8009e36:	9202      	str	r2, [sp, #8]
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	4b1c      	ldr	r3, [pc, #112]	; (8009eac <tcp_timewait_input+0xec>)
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	4b1c      	ldr	r3, [pc, #112]	; (8009eb0 <tcp_timewait_input+0xf0>)
 8009e40:	4602      	mov	r2, r0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f003 fada 	bl	800d3fc <tcp_rst>
      return;
 8009e48:	e01c      	b.n	8009e84 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8009e4a:	4b10      	ldr	r3, [pc, #64]	; (8009e8c <tcp_timewait_input+0xcc>)
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009e56:	4b17      	ldr	r3, [pc, #92]	; (8009eb4 <tcp_timewait_input+0xf4>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009e5e:	4b11      	ldr	r3, [pc, #68]	; (8009ea4 <tcp_timewait_input+0xe4>)
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00d      	beq.n	8009e82 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	8b5b      	ldrh	r3, [r3, #26]
 8009e6a:	f043 0302 	orr.w	r3, r3, #2
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f002 fcfd 	bl	800c874 <tcp_output>
  }
  return;
 8009e7a:	bf00      	nop
 8009e7c:	e001      	b.n	8009e82 <tcp_timewait_input+0xc2>
    return;
 8009e7e:	bf00      	nop
 8009e80:	e000      	b.n	8009e84 <tcp_timewait_input+0xc4>
  return;
 8009e82:	bf00      	nop
}
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	200000fc 	.word	0x200000fc
 8009e90:	0801324c 	.word	0x0801324c
 8009e94:	08013464 	.word	0x08013464
 8009e98:	08013298 	.word	0x08013298
 8009e9c:	200000f0 	.word	0x200000f0
 8009ea0:	200000f4 	.word	0x200000f4
 8009ea4:	200000fa 	.word	0x200000fa
 8009ea8:	200000e0 	.word	0x200000e0
 8009eac:	20003418 	.word	0x20003418
 8009eb0:	2000341c 	.word	0x2000341c
 8009eb4:	20006950 	.word	0x20006950

08009eb8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009eb8:	b590      	push	{r4, r7, lr}
 8009eba:	b08d      	sub	sp, #52	; 0x34
 8009ebc:	af04      	add	r7, sp, #16
 8009ebe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <tcp_process+0x24>
 8009ece:	4ba5      	ldr	r3, [pc, #660]	; (800a164 <tcp_process+0x2ac>)
 8009ed0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009ed4:	49a4      	ldr	r1, [pc, #656]	; (800a168 <tcp_process+0x2b0>)
 8009ed6:	48a5      	ldr	r0, [pc, #660]	; (800a16c <tcp_process+0x2b4>)
 8009ed8:	f006 faa8 	bl	801042c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009edc:	4ba4      	ldr	r3, [pc, #656]	; (800a170 <tcp_process+0x2b8>)
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	f003 0304 	and.w	r3, r3, #4
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d04e      	beq.n	8009f86 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	7d1b      	ldrb	r3, [r3, #20]
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d108      	bne.n	8009f02 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ef4:	4b9f      	ldr	r3, [pc, #636]	; (800a174 <tcp_process+0x2bc>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d123      	bne.n	8009f44 <tcp_process+0x8c>
        acceptable = 1;
 8009efc:	2301      	movs	r3, #1
 8009efe:	76fb      	strb	r3, [r7, #27]
 8009f00:	e020      	b.n	8009f44 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f06:	4b9c      	ldr	r3, [pc, #624]	; (800a178 <tcp_process+0x2c0>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d102      	bne.n	8009f14 <tcp_process+0x5c>
        acceptable = 1;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	76fb      	strb	r3, [r7, #27]
 8009f12:	e017      	b.n	8009f44 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009f14:	4b98      	ldr	r3, [pc, #608]	; (800a178 <tcp_process+0x2c0>)
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	db10      	blt.n	8009f44 <tcp_process+0x8c>
 8009f22:	4b95      	ldr	r3, [pc, #596]	; (800a178 <tcp_process+0x2c0>)
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009f2e:	440b      	add	r3, r1
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dc06      	bgt.n	8009f44 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	8b5b      	ldrh	r3, [r3, #26]
 8009f3a:	f043 0302 	orr.w	r3, r3, #2
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009f44:	7efb      	ldrb	r3, [r7, #27]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d01b      	beq.n	8009f82 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	7d1b      	ldrb	r3, [r3, #20]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d106      	bne.n	8009f60 <tcp_process+0xa8>
 8009f52:	4b84      	ldr	r3, [pc, #528]	; (800a164 <tcp_process+0x2ac>)
 8009f54:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009f58:	4988      	ldr	r1, [pc, #544]	; (800a17c <tcp_process+0x2c4>)
 8009f5a:	4884      	ldr	r0, [pc, #528]	; (800a16c <tcp_process+0x2b4>)
 8009f5c:	f006 fa66 	bl	801042c <iprintf>
      recv_flags |= TF_RESET;
 8009f60:	4b87      	ldr	r3, [pc, #540]	; (800a180 <tcp_process+0x2c8>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	f043 0308 	orr.w	r3, r3, #8
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	4b85      	ldr	r3, [pc, #532]	; (800a180 <tcp_process+0x2c8>)
 8009f6c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	8b5b      	ldrh	r3, [r3, #26]
 8009f72:	f023 0301 	bic.w	r3, r3, #1
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009f7c:	f06f 030d 	mvn.w	r3, #13
 8009f80:	e37a      	b.n	800a678 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	e378      	b.n	800a678 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009f86:	4b7a      	ldr	r3, [pc, #488]	; (800a170 <tcp_process+0x2b8>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	f003 0302 	and.w	r3, r3, #2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d010      	beq.n	8009fb4 <tcp_process+0xfc>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	7d1b      	ldrb	r3, [r3, #20]
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d00c      	beq.n	8009fb4 <tcp_process+0xfc>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	7d1b      	ldrb	r3, [r3, #20]
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d008      	beq.n	8009fb4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	8b5b      	ldrh	r3, [r3, #26]
 8009fa6:	f043 0302 	orr.w	r3, r3, #2
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e361      	b.n	800a678 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	8b5b      	ldrh	r3, [r3, #26]
 8009fb8:	f003 0310 	and.w	r3, r3, #16
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d103      	bne.n	8009fc8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009fc0:	4b70      	ldr	r3, [pc, #448]	; (800a184 <tcp_process+0x2cc>)
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fc2d 	bl	800b838 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	7d1b      	ldrb	r3, [r3, #20]
 8009fe2:	3b02      	subs	r3, #2
 8009fe4:	2b07      	cmp	r3, #7
 8009fe6:	f200 8337 	bhi.w	800a658 <tcp_process+0x7a0>
 8009fea:	a201      	add	r2, pc, #4	; (adr r2, 8009ff0 <tcp_process+0x138>)
 8009fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff0:	0800a011 	.word	0x0800a011
 8009ff4:	0800a241 	.word	0x0800a241
 8009ff8:	0800a3b9 	.word	0x0800a3b9
 8009ffc:	0800a3e3 	.word	0x0800a3e3
 800a000:	0800a507 	.word	0x0800a507
 800a004:	0800a3b9 	.word	0x0800a3b9
 800a008:	0800a593 	.word	0x0800a593
 800a00c:	0800a623 	.word	0x0800a623
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a010:	4b57      	ldr	r3, [pc, #348]	; (800a170 <tcp_process+0x2b8>)
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	f003 0310 	and.w	r3, r3, #16
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 80e4 	beq.w	800a1e6 <tcp_process+0x32e>
 800a01e:	4b54      	ldr	r3, [pc, #336]	; (800a170 <tcp_process+0x2b8>)
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	f003 0302 	and.w	r3, r3, #2
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 80dd 	beq.w	800a1e6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	4b50      	ldr	r3, [pc, #320]	; (800a174 <tcp_process+0x2bc>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	f040 80d5 	bne.w	800a1e6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a03c:	4b4e      	ldr	r3, [pc, #312]	; (800a178 <tcp_process+0x2c0>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	1c5a      	adds	r2, r3, #1
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a04e:	4b49      	ldr	r3, [pc, #292]	; (800a174 <tcp_process+0x2bc>)
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a056:	4b4c      	ldr	r3, [pc, #304]	; (800a188 <tcp_process+0x2d0>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	89db      	ldrh	r3, [r3, #14]
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a070:	4b41      	ldr	r3, [pc, #260]	; (800a178 <tcp_process+0x2c0>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	1e5a      	subs	r2, r3, #1
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2204      	movs	r2, #4
 800a07e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3304      	adds	r3, #4
 800a088:	4618      	mov	r0, r3
 800a08a:	f004 ff8f 	bl	800efac <ip4_route>
 800a08e:	4601      	mov	r1, r0
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3304      	adds	r3, #4
 800a094:	461a      	mov	r2, r3
 800a096:	4620      	mov	r0, r4
 800a098:	f7ff f88e 	bl	80091b8 <tcp_eff_send_mss_netif>
 800a09c:	4603      	mov	r3, r0
 800a09e:	461a      	mov	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0a8:	009a      	lsls	r2, r3, #2
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0ae:	005b      	lsls	r3, r3, #1
 800a0b0:	f241 111c 	movw	r1, #4380	; 0x111c
 800a0b4:	428b      	cmp	r3, r1
 800a0b6:	bf38      	it	cc
 800a0b8:	460b      	movcc	r3, r1
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d204      	bcs.n	800a0c8 <tcp_process+0x210>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	e00d      	b.n	800a0e4 <tcp_process+0x22c>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	f241 121c 	movw	r2, #4380	; 0x111c
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d904      	bls.n	800a0e0 <tcp_process+0x228>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	e001      	b.n	800a0e4 <tcp_process+0x22c>
 800a0e0:	f241 131c 	movw	r3, #4380	; 0x111c
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d106      	bne.n	800a102 <tcp_process+0x24a>
 800a0f4:	4b1b      	ldr	r3, [pc, #108]	; (800a164 <tcp_process+0x2ac>)
 800a0f6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a0fa:	4924      	ldr	r1, [pc, #144]	; (800a18c <tcp_process+0x2d4>)
 800a0fc:	481b      	ldr	r0, [pc, #108]	; (800a16c <tcp_process+0x2b4>)
 800a0fe:	f006 f995 	bl	801042c <iprintf>
        --pcb->snd_queuelen;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a108:	3b01      	subs	r3, #1
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a116:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d111      	bne.n	800a142 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a122:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d106      	bne.n	800a138 <tcp_process+0x280>
 800a12a:	4b0e      	ldr	r3, [pc, #56]	; (800a164 <tcp_process+0x2ac>)
 800a12c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a130:	4917      	ldr	r1, [pc, #92]	; (800a190 <tcp_process+0x2d8>)
 800a132:	480e      	ldr	r0, [pc, #56]	; (800a16c <tcp_process+0x2b4>)
 800a134:	f006 f97a 	bl	801042c <iprintf>
          pcb->unsent = rseg->next;
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	66da      	str	r2, [r3, #108]	; 0x6c
 800a140:	e003      	b.n	800a14a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a14a:	69f8      	ldr	r0, [r7, #28]
 800a14c:	f7fe fc88 	bl	8008a60 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a154:	2b00      	cmp	r3, #0
 800a156:	d11d      	bne.n	800a194 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a15e:	861a      	strh	r2, [r3, #48]	; 0x30
 800a160:	e01f      	b.n	800a1a2 <tcp_process+0x2ea>
 800a162:	bf00      	nop
 800a164:	0801324c 	.word	0x0801324c
 800a168:	08013484 	.word	0x08013484
 800a16c:	08013298 	.word	0x08013298
 800a170:	200000fc 	.word	0x200000fc
 800a174:	200000f4 	.word	0x200000f4
 800a178:	200000f0 	.word	0x200000f0
 800a17c:	080134a0 	.word	0x080134a0
 800a180:	200000fd 	.word	0x200000fd
 800a184:	20006950 	.word	0x20006950
 800a188:	200000e0 	.word	0x200000e0
 800a18c:	080134c0 	.word	0x080134c0
 800a190:	080134d8 	.word	0x080134d8
        } else {
          pcb->rtime = 0;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00a      	beq.n	800a1c2 <tcp_process+0x30a>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	6910      	ldr	r0, [r2, #16]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	4798      	blx	r3
 800a1bc:	4603      	mov	r3, r0
 800a1be:	76bb      	strb	r3, [r7, #26]
 800a1c0:	e001      	b.n	800a1c6 <tcp_process+0x30e>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a1c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a1ca:	f113 0f0d 	cmn.w	r3, #13
 800a1ce:	d102      	bne.n	800a1d6 <tcp_process+0x31e>
          return ERR_ABRT;
 800a1d0:	f06f 030c 	mvn.w	r3, #12
 800a1d4:	e250      	b.n	800a678 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	8b5b      	ldrh	r3, [r3, #26]
 800a1da:	f043 0302 	orr.w	r3, r3, #2
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a1e4:	e23a      	b.n	800a65c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a1e6:	4b9d      	ldr	r3, [pc, #628]	; (800a45c <tcp_process+0x5a4>)
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	f003 0310 	and.w	r3, r3, #16
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f000 8234 	beq.w	800a65c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a1f4:	4b9a      	ldr	r3, [pc, #616]	; (800a460 <tcp_process+0x5a8>)
 800a1f6:	6819      	ldr	r1, [r3, #0]
 800a1f8:	4b9a      	ldr	r3, [pc, #616]	; (800a464 <tcp_process+0x5ac>)
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	4b9a      	ldr	r3, [pc, #616]	; (800a468 <tcp_process+0x5b0>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a204:	4b99      	ldr	r3, [pc, #612]	; (800a46c <tcp_process+0x5b4>)
 800a206:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a208:	885b      	ldrh	r3, [r3, #2]
 800a20a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a20c:	4a97      	ldr	r2, [pc, #604]	; (800a46c <tcp_process+0x5b4>)
 800a20e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a210:	8812      	ldrh	r2, [r2, #0]
 800a212:	b292      	uxth	r2, r2
 800a214:	9202      	str	r2, [sp, #8]
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	4b95      	ldr	r3, [pc, #596]	; (800a470 <tcp_process+0x5b8>)
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	4b95      	ldr	r3, [pc, #596]	; (800a474 <tcp_process+0x5bc>)
 800a21e:	4602      	mov	r2, r0
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f003 f8eb 	bl	800d3fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a22c:	2b05      	cmp	r3, #5
 800a22e:	f200 8215 	bhi.w	800a65c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f002 feab 	bl	800cf94 <tcp_rexmit_rto>
      break;
 800a23e:	e20d      	b.n	800a65c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a240:	4b86      	ldr	r3, [pc, #536]	; (800a45c <tcp_process+0x5a4>)
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	f003 0310 	and.w	r3, r3, #16
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 80a1 	beq.w	800a390 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a24e:	4b84      	ldr	r3, [pc, #528]	; (800a460 <tcp_process+0x5a8>)
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	3b01      	subs	r3, #1
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	db7e      	blt.n	800a35c <tcp_process+0x4a4>
 800a25e:	4b80      	ldr	r3, [pc, #512]	; (800a460 <tcp_process+0x5a8>)
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	dc77      	bgt.n	800a35c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2204      	movs	r2, #4
 800a270:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a276:	2b00      	cmp	r3, #0
 800a278:	d102      	bne.n	800a280 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a27a:	23fa      	movs	r3, #250	; 0xfa
 800a27c:	76bb      	strb	r3, [r7, #26]
 800a27e:	e01d      	b.n	800a2bc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d106      	bne.n	800a298 <tcp_process+0x3e0>
 800a28a:	4b7b      	ldr	r3, [pc, #492]	; (800a478 <tcp_process+0x5c0>)
 800a28c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a290:	497a      	ldr	r1, [pc, #488]	; (800a47c <tcp_process+0x5c4>)
 800a292:	487b      	ldr	r0, [pc, #492]	; (800a480 <tcp_process+0x5c8>)
 800a294:	f006 f8ca 	bl	801042c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00a      	beq.n	800a2b8 <tcp_process+0x400>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	6910      	ldr	r0, [r2, #16]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	6879      	ldr	r1, [r7, #4]
 800a2b0:	4798      	blx	r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	76bb      	strb	r3, [r7, #26]
 800a2b6:	e001      	b.n	800a2bc <tcp_process+0x404>
 800a2b8:	23f0      	movs	r3, #240	; 0xf0
 800a2ba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a2bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00a      	beq.n	800a2da <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a2c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a2c8:	f113 0f0d 	cmn.w	r3, #13
 800a2cc:	d002      	beq.n	800a2d4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7fd fce8 	bl	8007ca4 <tcp_abort>
            }
            return ERR_ABRT;
 800a2d4:	f06f 030c 	mvn.w	r3, #12
 800a2d8:	e1ce      	b.n	800a678 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fae0 	bl	800a8a0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a2e0:	4b68      	ldr	r3, [pc, #416]	; (800a484 <tcp_process+0x5cc>)
 800a2e2:	881b      	ldrh	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d005      	beq.n	800a2f4 <tcp_process+0x43c>
            recv_acked--;
 800a2e8:	4b66      	ldr	r3, [pc, #408]	; (800a484 <tcp_process+0x5cc>)
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	4b64      	ldr	r3, [pc, #400]	; (800a484 <tcp_process+0x5cc>)
 800a2f2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2f8:	009a      	lsls	r2, r3, #2
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2fe:	005b      	lsls	r3, r3, #1
 800a300:	f241 111c 	movw	r1, #4380	; 0x111c
 800a304:	428b      	cmp	r3, r1
 800a306:	bf38      	it	cc
 800a308:	460b      	movcc	r3, r1
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d204      	bcs.n	800a318 <tcp_process+0x460>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	b29b      	uxth	r3, r3
 800a316:	e00d      	b.n	800a334 <tcp_process+0x47c>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	f241 121c 	movw	r2, #4380	; 0x111c
 800a322:	4293      	cmp	r3, r2
 800a324:	d904      	bls.n	800a330 <tcp_process+0x478>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	e001      	b.n	800a334 <tcp_process+0x47c>
 800a330:	f241 131c 	movw	r3, #4380	; 0x111c
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a33a:	4b53      	ldr	r3, [pc, #332]	; (800a488 <tcp_process+0x5d0>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	f003 0320 	and.w	r3, r3, #32
 800a342:	2b00      	cmp	r3, #0
 800a344:	d037      	beq.n	800a3b6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	8b5b      	ldrh	r3, [r3, #26]
 800a34a:	f043 0302 	orr.w	r3, r3, #2
 800a34e:	b29a      	uxth	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2207      	movs	r2, #7
 800a358:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a35a:	e02c      	b.n	800a3b6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a35c:	4b40      	ldr	r3, [pc, #256]	; (800a460 <tcp_process+0x5a8>)
 800a35e:	6819      	ldr	r1, [r3, #0]
 800a360:	4b40      	ldr	r3, [pc, #256]	; (800a464 <tcp_process+0x5ac>)
 800a362:	881b      	ldrh	r3, [r3, #0]
 800a364:	461a      	mov	r2, r3
 800a366:	4b40      	ldr	r3, [pc, #256]	; (800a468 <tcp_process+0x5b0>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a36c:	4b3f      	ldr	r3, [pc, #252]	; (800a46c <tcp_process+0x5b4>)
 800a36e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a370:	885b      	ldrh	r3, [r3, #2]
 800a372:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a374:	4a3d      	ldr	r2, [pc, #244]	; (800a46c <tcp_process+0x5b4>)
 800a376:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a378:	8812      	ldrh	r2, [r2, #0]
 800a37a:	b292      	uxth	r2, r2
 800a37c:	9202      	str	r2, [sp, #8]
 800a37e:	9301      	str	r3, [sp, #4]
 800a380:	4b3b      	ldr	r3, [pc, #236]	; (800a470 <tcp_process+0x5b8>)
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	4b3b      	ldr	r3, [pc, #236]	; (800a474 <tcp_process+0x5bc>)
 800a386:	4602      	mov	r2, r0
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f003 f837 	bl	800d3fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a38e:	e167      	b.n	800a660 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a390:	4b32      	ldr	r3, [pc, #200]	; (800a45c <tcp_process+0x5a4>)
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	f003 0302 	and.w	r3, r3, #2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 8161 	beq.w	800a660 <tcp_process+0x7a8>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a2:	1e5a      	subs	r2, r3, #1
 800a3a4:	4b30      	ldr	r3, [pc, #192]	; (800a468 <tcp_process+0x5b0>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	f040 8159 	bne.w	800a660 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f002 fe12 	bl	800cfd8 <tcp_rexmit>
      break;
 800a3b4:	e154      	b.n	800a660 <tcp_process+0x7a8>
 800a3b6:	e153      	b.n	800a660 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fa71 	bl	800a8a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a3be:	4b32      	ldr	r3, [pc, #200]	; (800a488 <tcp_process+0x5d0>)
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	f003 0320 	and.w	r3, r3, #32
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f000 814c 	beq.w	800a664 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	8b5b      	ldrh	r3, [r3, #26]
 800a3d0:	f043 0302 	orr.w	r3, r3, #2
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2207      	movs	r2, #7
 800a3de:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a3e0:	e140      	b.n	800a664 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fa5c 	bl	800a8a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a3e8:	4b27      	ldr	r3, [pc, #156]	; (800a488 <tcp_process+0x5d0>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	f003 0320 	and.w	r3, r3, #32
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d071      	beq.n	800a4d8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a3f4:	4b19      	ldr	r3, [pc, #100]	; (800a45c <tcp_process+0x5a4>)
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	f003 0310 	and.w	r3, r3, #16
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d060      	beq.n	800a4c2 <tcp_process+0x60a>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a404:	4b16      	ldr	r3, [pc, #88]	; (800a460 <tcp_process+0x5a8>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d15a      	bne.n	800a4c2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a410:	2b00      	cmp	r3, #0
 800a412:	d156      	bne.n	800a4c2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	8b5b      	ldrh	r3, [r3, #26]
 800a418:	f043 0302 	orr.w	r3, r3, #2
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7fe fdbe 	bl	8008fa4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a428:	4b18      	ldr	r3, [pc, #96]	; (800a48c <tcp_process+0x5d4>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d105      	bne.n	800a43e <tcp_process+0x586>
 800a432:	4b16      	ldr	r3, [pc, #88]	; (800a48c <tcp_process+0x5d4>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	4a14      	ldr	r2, [pc, #80]	; (800a48c <tcp_process+0x5d4>)
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	e02e      	b.n	800a49c <tcp_process+0x5e4>
 800a43e:	4b13      	ldr	r3, [pc, #76]	; (800a48c <tcp_process+0x5d4>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	e027      	b.n	800a496 <tcp_process+0x5de>
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d11f      	bne.n	800a490 <tcp_process+0x5d8>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68da      	ldr	r2, [r3, #12]
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	60da      	str	r2, [r3, #12]
 800a458:	e020      	b.n	800a49c <tcp_process+0x5e4>
 800a45a:	bf00      	nop
 800a45c:	200000fc 	.word	0x200000fc
 800a460:	200000f4 	.word	0x200000f4
 800a464:	200000fa 	.word	0x200000fa
 800a468:	200000f0 	.word	0x200000f0
 800a46c:	200000e0 	.word	0x200000e0
 800a470:	20003418 	.word	0x20003418
 800a474:	2000341c 	.word	0x2000341c
 800a478:	0801324c 	.word	0x0801324c
 800a47c:	080134ec 	.word	0x080134ec
 800a480:	08013298 	.word	0x08013298
 800a484:	200000f8 	.word	0x200000f8
 800a488:	200000fd 	.word	0x200000fd
 800a48c:	2000694c 	.word	0x2000694c
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	617b      	str	r3, [r7, #20]
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1d4      	bne.n	800a446 <tcp_process+0x58e>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	60da      	str	r2, [r3, #12]
 800a4a2:	4b77      	ldr	r3, [pc, #476]	; (800a680 <tcp_process+0x7c8>)
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	220a      	movs	r2, #10
 800a4ac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a4ae:	4b75      	ldr	r3, [pc, #468]	; (800a684 <tcp_process+0x7cc>)
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	60da      	str	r2, [r3, #12]
 800a4b6:	4a73      	ldr	r2, [pc, #460]	; (800a684 <tcp_process+0x7cc>)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6013      	str	r3, [r2, #0]
 800a4bc:	f003 f960 	bl	800d780 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a4c0:	e0d2      	b.n	800a668 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	8b5b      	ldrh	r3, [r3, #26]
 800a4c6:	f043 0302 	orr.w	r3, r3, #2
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2208      	movs	r2, #8
 800a4d4:	751a      	strb	r2, [r3, #20]
      break;
 800a4d6:	e0c7      	b.n	800a668 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a4d8:	4b6b      	ldr	r3, [pc, #428]	; (800a688 <tcp_process+0x7d0>)
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	f003 0310 	and.w	r3, r3, #16
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 80c1 	beq.w	800a668 <tcp_process+0x7b0>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4ea:	4b68      	ldr	r3, [pc, #416]	; (800a68c <tcp_process+0x7d4>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	f040 80ba 	bne.w	800a668 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f040 80b5 	bne.w	800a668 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2206      	movs	r2, #6
 800a502:	751a      	strb	r2, [r3, #20]
      break;
 800a504:	e0b0      	b.n	800a668 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f9ca 	bl	800a8a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a50c:	4b60      	ldr	r3, [pc, #384]	; (800a690 <tcp_process+0x7d8>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	f003 0320 	and.w	r3, r3, #32
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 80a9 	beq.w	800a66c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	8b5b      	ldrh	r3, [r3, #26]
 800a51e:	f043 0302 	orr.w	r3, r3, #2
 800a522:	b29a      	uxth	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7fe fd3b 	bl	8008fa4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a52e:	4b59      	ldr	r3, [pc, #356]	; (800a694 <tcp_process+0x7dc>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	429a      	cmp	r2, r3
 800a536:	d105      	bne.n	800a544 <tcp_process+0x68c>
 800a538:	4b56      	ldr	r3, [pc, #344]	; (800a694 <tcp_process+0x7dc>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	4a55      	ldr	r2, [pc, #340]	; (800a694 <tcp_process+0x7dc>)
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	e013      	b.n	800a56c <tcp_process+0x6b4>
 800a544:	4b53      	ldr	r3, [pc, #332]	; (800a694 <tcp_process+0x7dc>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	613b      	str	r3, [r7, #16]
 800a54a:	e00c      	b.n	800a566 <tcp_process+0x6ae>
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	429a      	cmp	r2, r3
 800a554:	d104      	bne.n	800a560 <tcp_process+0x6a8>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	60da      	str	r2, [r3, #12]
 800a55e:	e005      	b.n	800a56c <tcp_process+0x6b4>
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	613b      	str	r3, [r7, #16]
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1ef      	bne.n	800a54c <tcp_process+0x694>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	60da      	str	r2, [r3, #12]
 800a572:	4b43      	ldr	r3, [pc, #268]	; (800a680 <tcp_process+0x7c8>)
 800a574:	2201      	movs	r2, #1
 800a576:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	220a      	movs	r2, #10
 800a57c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a57e:	4b41      	ldr	r3, [pc, #260]	; (800a684 <tcp_process+0x7cc>)
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	60da      	str	r2, [r3, #12]
 800a586:	4a3f      	ldr	r2, [pc, #252]	; (800a684 <tcp_process+0x7cc>)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	f003 f8f8 	bl	800d780 <tcp_timer_needed>
      }
      break;
 800a590:	e06c      	b.n	800a66c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f984 	bl	800a8a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a598:	4b3b      	ldr	r3, [pc, #236]	; (800a688 <tcp_process+0x7d0>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	f003 0310 	and.w	r3, r3, #16
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d065      	beq.n	800a670 <tcp_process+0x7b8>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5a8:	4b38      	ldr	r3, [pc, #224]	; (800a68c <tcp_process+0x7d4>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d15f      	bne.n	800a670 <tcp_process+0x7b8>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d15b      	bne.n	800a670 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7fe fcf3 	bl	8008fa4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a5be:	4b35      	ldr	r3, [pc, #212]	; (800a694 <tcp_process+0x7dc>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d105      	bne.n	800a5d4 <tcp_process+0x71c>
 800a5c8:	4b32      	ldr	r3, [pc, #200]	; (800a694 <tcp_process+0x7dc>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	4a31      	ldr	r2, [pc, #196]	; (800a694 <tcp_process+0x7dc>)
 800a5d0:	6013      	str	r3, [r2, #0]
 800a5d2:	e013      	b.n	800a5fc <tcp_process+0x744>
 800a5d4:	4b2f      	ldr	r3, [pc, #188]	; (800a694 <tcp_process+0x7dc>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	60fb      	str	r3, [r7, #12]
 800a5da:	e00c      	b.n	800a5f6 <tcp_process+0x73e>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d104      	bne.n	800a5f0 <tcp_process+0x738>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68da      	ldr	r2, [r3, #12]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	60da      	str	r2, [r3, #12]
 800a5ee:	e005      	b.n	800a5fc <tcp_process+0x744>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1ef      	bne.n	800a5dc <tcp_process+0x724>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	60da      	str	r2, [r3, #12]
 800a602:	4b1f      	ldr	r3, [pc, #124]	; (800a680 <tcp_process+0x7c8>)
 800a604:	2201      	movs	r2, #1
 800a606:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	220a      	movs	r2, #10
 800a60c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a60e:	4b1d      	ldr	r3, [pc, #116]	; (800a684 <tcp_process+0x7cc>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	60da      	str	r2, [r3, #12]
 800a616:	4a1b      	ldr	r2, [pc, #108]	; (800a684 <tcp_process+0x7cc>)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	f003 f8b0 	bl	800d780 <tcp_timer_needed>
      }
      break;
 800a620:	e026      	b.n	800a670 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f93c 	bl	800a8a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a628:	4b17      	ldr	r3, [pc, #92]	; (800a688 <tcp_process+0x7d0>)
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	f003 0310 	and.w	r3, r3, #16
 800a630:	2b00      	cmp	r3, #0
 800a632:	d01f      	beq.n	800a674 <tcp_process+0x7bc>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a638:	4b14      	ldr	r3, [pc, #80]	; (800a68c <tcp_process+0x7d4>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d119      	bne.n	800a674 <tcp_process+0x7bc>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d115      	bne.n	800a674 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a648:	4b11      	ldr	r3, [pc, #68]	; (800a690 <tcp_process+0x7d8>)
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	f043 0310 	orr.w	r3, r3, #16
 800a650:	b2da      	uxtb	r2, r3
 800a652:	4b0f      	ldr	r3, [pc, #60]	; (800a690 <tcp_process+0x7d8>)
 800a654:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a656:	e00d      	b.n	800a674 <tcp_process+0x7bc>
    default:
      break;
 800a658:	bf00      	nop
 800a65a:	e00c      	b.n	800a676 <tcp_process+0x7be>
      break;
 800a65c:	bf00      	nop
 800a65e:	e00a      	b.n	800a676 <tcp_process+0x7be>
      break;
 800a660:	bf00      	nop
 800a662:	e008      	b.n	800a676 <tcp_process+0x7be>
      break;
 800a664:	bf00      	nop
 800a666:	e006      	b.n	800a676 <tcp_process+0x7be>
      break;
 800a668:	bf00      	nop
 800a66a:	e004      	b.n	800a676 <tcp_process+0x7be>
      break;
 800a66c:	bf00      	nop
 800a66e:	e002      	b.n	800a676 <tcp_process+0x7be>
      break;
 800a670:	bf00      	nop
 800a672:	e000      	b.n	800a676 <tcp_process+0x7be>
      break;
 800a674:	bf00      	nop
  }
  return ERR_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3724      	adds	r7, #36	; 0x24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd90      	pop	{r4, r7, pc}
 800a680:	20006948 	.word	0x20006948
 800a684:	2000695c 	.word	0x2000695c
 800a688:	200000fc 	.word	0x200000fc
 800a68c:	200000f4 	.word	0x200000f4
 800a690:	200000fd 	.word	0x200000fd
 800a694:	2000694c 	.word	0x2000694c

0800a698 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a698:	b590      	push	{r4, r7, lr}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d106      	bne.n	800a6b6 <tcp_oos_insert_segment+0x1e>
 800a6a8:	4b3b      	ldr	r3, [pc, #236]	; (800a798 <tcp_oos_insert_segment+0x100>)
 800a6aa:	f240 421f 	movw	r2, #1055	; 0x41f
 800a6ae:	493b      	ldr	r1, [pc, #236]	; (800a79c <tcp_oos_insert_segment+0x104>)
 800a6b0:	483b      	ldr	r0, [pc, #236]	; (800a7a0 <tcp_oos_insert_segment+0x108>)
 800a6b2:	f005 febb 	bl	801042c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	899b      	ldrh	r3, [r3, #12]
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fb fa34 	bl	8005b2c <lwip_htons>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d028      	beq.n	800a722 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a6d0:	6838      	ldr	r0, [r7, #0]
 800a6d2:	f7fe f9b1 	bl	8008a38 <tcp_segs_free>
    next = NULL;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	603b      	str	r3, [r7, #0]
 800a6da:	e056      	b.n	800a78a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	899b      	ldrh	r3, [r3, #12]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fb fa21 	bl	8005b2c <lwip_htons>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00d      	beq.n	800a712 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	899b      	ldrh	r3, [r3, #12]
 800a6fc:	b29c      	uxth	r4, r3
 800a6fe:	2001      	movs	r0, #1
 800a700:	f7fb fa14 	bl	8005b2c <lwip_htons>
 800a704:	4603      	mov	r3, r0
 800a706:	461a      	mov	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	4322      	orrs	r2, r4
 800a70e:	b292      	uxth	r2, r2
 800a710:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7fe f99f 	bl	8008a60 <tcp_seg_free>
    while (next &&
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00e      	beq.n	800a746 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	891b      	ldrh	r3, [r3, #8]
 800a72c:	461a      	mov	r2, r3
 800a72e:	4b1d      	ldr	r3, [pc, #116]	; (800a7a4 <tcp_oos_insert_segment+0x10c>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	441a      	add	r2, r3
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	6839      	ldr	r1, [r7, #0]
 800a73c:	8909      	ldrh	r1, [r1, #8]
 800a73e:	440b      	add	r3, r1
 800a740:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a742:	2b00      	cmp	r3, #0
 800a744:	daca      	bge.n	800a6dc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d01e      	beq.n	800a78a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	891b      	ldrh	r3, [r3, #8]
 800a750:	461a      	mov	r2, r3
 800a752:	4b14      	ldr	r3, [pc, #80]	; (800a7a4 <tcp_oos_insert_segment+0x10c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	441a      	add	r2, r3
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a760:	2b00      	cmp	r3, #0
 800a762:	dd12      	ble.n	800a78a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	4b0d      	ldr	r3, [pc, #52]	; (800a7a4 <tcp_oos_insert_segment+0x10c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	b29b      	uxth	r3, r3
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	b29a      	uxth	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	891b      	ldrh	r3, [r3, #8]
 800a782:	4619      	mov	r1, r3
 800a784:	4610      	mov	r0, r2
 800a786:	f7fc fb23 	bl	8006dd0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	601a      	str	r2, [r3, #0]
}
 800a790:	bf00      	nop
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	bd90      	pop	{r4, r7, pc}
 800a798:	0801324c 	.word	0x0801324c
 800a79c:	0801350c 	.word	0x0801350c
 800a7a0:	08013298 	.word	0x08013298
 800a7a4:	200000f0 	.word	0x200000f0

0800a7a8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a7a8:	b5b0      	push	{r4, r5, r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a7b6:	e03e      	b.n	800a836 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fc fd10 	bl	80071ec <pbuf_clen>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a7d6:	8a7a      	ldrh	r2, [r7, #18]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d906      	bls.n	800a7ea <tcp_free_acked_segments+0x42>
 800a7dc:	4b2a      	ldr	r3, [pc, #168]	; (800a888 <tcp_free_acked_segments+0xe0>)
 800a7de:	f240 4257 	movw	r2, #1111	; 0x457
 800a7e2:	492a      	ldr	r1, [pc, #168]	; (800a88c <tcp_free_acked_segments+0xe4>)
 800a7e4:	482a      	ldr	r0, [pc, #168]	; (800a890 <tcp_free_acked_segments+0xe8>)
 800a7e6:	f005 fe21 	bl	801042c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a7f0:	8a7b      	ldrh	r3, [r7, #18]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	891a      	ldrh	r2, [r3, #8]
 800a800:	4b24      	ldr	r3, [pc, #144]	; (800a894 <tcp_free_acked_segments+0xec>)
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	4413      	add	r3, r2
 800a806:	b29a      	uxth	r2, r3
 800a808:	4b22      	ldr	r3, [pc, #136]	; (800a894 <tcp_free_acked_segments+0xec>)
 800a80a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a80c:	6978      	ldr	r0, [r7, #20]
 800a80e:	f7fe f927 	bl	8008a60 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00c      	beq.n	800a836 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d109      	bne.n	800a836 <tcp_free_acked_segments+0x8e>
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d106      	bne.n	800a836 <tcp_free_acked_segments+0x8e>
 800a828:	4b17      	ldr	r3, [pc, #92]	; (800a888 <tcp_free_acked_segments+0xe0>)
 800a82a:	f240 4262 	movw	r2, #1122	; 0x462
 800a82e:	491a      	ldr	r1, [pc, #104]	; (800a898 <tcp_free_acked_segments+0xf0>)
 800a830:	4817      	ldr	r0, [pc, #92]	; (800a890 <tcp_free_acked_segments+0xe8>)
 800a832:	f005 fdfb 	bl	801042c <iprintf>
  while (seg_list != NULL &&
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d020      	beq.n	800a87e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	4618      	mov	r0, r3
 800a844:	f7fb f987 	bl	8005b56 <lwip_htonl>
 800a848:	4604      	mov	r4, r0
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	891b      	ldrh	r3, [r3, #8]
 800a84e:	461d      	mov	r5, r3
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	899b      	ldrh	r3, [r3, #12]
 800a856:	b29b      	uxth	r3, r3
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fb f967 	bl	8005b2c <lwip_htons>
 800a85e:	4603      	mov	r3, r0
 800a860:	b2db      	uxtb	r3, r3
 800a862:	f003 0303 	and.w	r3, r3, #3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <tcp_free_acked_segments+0xc6>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e000      	b.n	800a870 <tcp_free_acked_segments+0xc8>
 800a86e:	2300      	movs	r3, #0
 800a870:	442b      	add	r3, r5
 800a872:	18e2      	adds	r2, r4, r3
 800a874:	4b09      	ldr	r3, [pc, #36]	; (800a89c <tcp_free_acked_segments+0xf4>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	dd9c      	ble.n	800a7b8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a87e:	68bb      	ldr	r3, [r7, #8]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bdb0      	pop	{r4, r5, r7, pc}
 800a888:	0801324c 	.word	0x0801324c
 800a88c:	08013534 	.word	0x08013534
 800a890:	08013298 	.word	0x08013298
 800a894:	200000f8 	.word	0x200000f8
 800a898:	0801355c 	.word	0x0801355c
 800a89c:	200000f4 	.word	0x200000f4

0800a8a0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a8a0:	b5b0      	push	{r4, r5, r7, lr}
 800a8a2:	b094      	sub	sp, #80	; 0x50
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d106      	bne.n	800a8c0 <tcp_receive+0x20>
 800a8b2:	4ba6      	ldr	r3, [pc, #664]	; (800ab4c <tcp_receive+0x2ac>)
 800a8b4:	f240 427b 	movw	r2, #1147	; 0x47b
 800a8b8:	49a5      	ldr	r1, [pc, #660]	; (800ab50 <tcp_receive+0x2b0>)
 800a8ba:	48a6      	ldr	r0, [pc, #664]	; (800ab54 <tcp_receive+0x2b4>)
 800a8bc:	f005 fdb6 	bl	801042c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	7d1b      	ldrb	r3, [r3, #20]
 800a8c4:	2b03      	cmp	r3, #3
 800a8c6:	d806      	bhi.n	800a8d6 <tcp_receive+0x36>
 800a8c8:	4ba0      	ldr	r3, [pc, #640]	; (800ab4c <tcp_receive+0x2ac>)
 800a8ca:	f240 427c 	movw	r2, #1148	; 0x47c
 800a8ce:	49a2      	ldr	r1, [pc, #648]	; (800ab58 <tcp_receive+0x2b8>)
 800a8d0:	48a0      	ldr	r0, [pc, #640]	; (800ab54 <tcp_receive+0x2b4>)
 800a8d2:	f005 fdab 	bl	801042c <iprintf>

  if (flags & TCP_ACK) {
 800a8d6:	4ba1      	ldr	r3, [pc, #644]	; (800ab5c <tcp_receive+0x2bc>)
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	f003 0310 	and.w	r3, r3, #16
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f000 8263 	beq.w	800adaa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8f0:	4413      	add	r3, r2
 800a8f2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8f8:	4b99      	ldr	r3, [pc, #612]	; (800ab60 <tcp_receive+0x2c0>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	db1b      	blt.n	800a93a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a906:	4b96      	ldr	r3, [pc, #600]	; (800ab60 <tcp_receive+0x2c0>)
 800a908:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d106      	bne.n	800a91c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a912:	4b94      	ldr	r3, [pc, #592]	; (800ab64 <tcp_receive+0x2c4>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	db0e      	blt.n	800a93a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a920:	4b90      	ldr	r3, [pc, #576]	; (800ab64 <tcp_receive+0x2c4>)
 800a922:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a924:	429a      	cmp	r2, r3
 800a926:	d125      	bne.n	800a974 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a928:	4b8f      	ldr	r3, [pc, #572]	; (800ab68 <tcp_receive+0x2c8>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	89db      	ldrh	r3, [r3, #14]
 800a92e:	b29a      	uxth	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a936:	429a      	cmp	r2, r3
 800a938:	d91c      	bls.n	800a974 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a93a:	4b8b      	ldr	r3, [pc, #556]	; (800ab68 <tcp_receive+0x2c8>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	89db      	ldrh	r3, [r3, #14]
 800a940:	b29a      	uxth	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a954:	429a      	cmp	r2, r3
 800a956:	d205      	bcs.n	800a964 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a964:	4b7e      	ldr	r3, [pc, #504]	; (800ab60 <tcp_receive+0x2c0>)
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a96c:	4b7d      	ldr	r3, [pc, #500]	; (800ab64 <tcp_receive+0x2c4>)
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a974:	4b7b      	ldr	r3, [pc, #492]	; (800ab64 <tcp_receive+0x2c4>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	dc58      	bgt.n	800aa34 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a982:	4b7a      	ldr	r3, [pc, #488]	; (800ab6c <tcp_receive+0x2cc>)
 800a984:	881b      	ldrh	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d14b      	bne.n	800aa22 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a994:	4413      	add	r3, r2
 800a996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a998:	429a      	cmp	r2, r3
 800a99a:	d142      	bne.n	800aa22 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	db3d      	blt.n	800aa22 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9aa:	4b6e      	ldr	r3, [pc, #440]	; (800ab64 <tcp_receive+0x2c4>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d137      	bne.n	800aa22 <tcp_receive+0x182>
              found_dupack = 1;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a9bc:	2bff      	cmp	r3, #255	; 0xff
 800a9be:	d007      	beq.n	800a9d0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d91b      	bls.n	800aa12 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9e4:	4413      	add	r3, r2
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d30a      	bcc.n	800aa08 <tcp_receive+0x168>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9fc:	4413      	add	r3, r2
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aa06:	e004      	b.n	800aa12 <tcp_receive+0x172>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d902      	bls.n	800aa22 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f002 fb47 	bl	800d0b0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800aa22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f040 8160 	bne.w	800acea <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa32:	e15a      	b.n	800acea <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aa34:	4b4b      	ldr	r3, [pc, #300]	; (800ab64 <tcp_receive+0x2c4>)
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f2c0 814d 	blt.w	800ace0 <tcp_receive+0x440>
 800aa46:	4b47      	ldr	r3, [pc, #284]	; (800ab64 <tcp_receive+0x2c4>)
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f300 8145 	bgt.w	800ace0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	8b5b      	ldrh	r3, [r3, #26]
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d010      	beq.n	800aa84 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	8b5b      	ldrh	r3, [r3, #26]
 800aa66:	f023 0304 	bic.w	r3, r3, #4
 800aa6a:	b29a      	uxth	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aa92:	10db      	asrs	r3, r3, #3
 800aa94:	b21b      	sxth	r3, r3
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	b21a      	sxth	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800aaac:	4b2d      	ldr	r3, [pc, #180]	; (800ab64 <tcp_receive+0x2c4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800aac4:	4b27      	ldr	r3, [pc, #156]	; (800ab64 <tcp_receive+0x2c4>)
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	7d1b      	ldrb	r3, [r3, #20]
 800aad0:	2b03      	cmp	r3, #3
 800aad2:	f240 8096 	bls.w	800ac02 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d244      	bcs.n	800ab70 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	8b5b      	ldrh	r3, [r3, #26]
 800aaea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <tcp_receive+0x256>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e000      	b.n	800aaf8 <tcp_receive+0x258>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800aafc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab06:	fb12 f303 	smulbb	r3, r2, r3
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	bf28      	it	cs
 800ab12:	4613      	movcs	r3, r2
 800ab14:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ab1e:	4413      	add	r3, r2
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d309      	bcc.n	800ab40 <tcp_receive+0x2a0>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ab34:	4413      	add	r3, r2
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ab3e:	e060      	b.n	800ac02 <tcp_receive+0x362>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ab4a:	e05a      	b.n	800ac02 <tcp_receive+0x362>
 800ab4c:	0801324c 	.word	0x0801324c
 800ab50:	0801357c 	.word	0x0801357c
 800ab54:	08013298 	.word	0x08013298
 800ab58:	08013598 	.word	0x08013598
 800ab5c:	200000fc 	.word	0x200000fc
 800ab60:	200000f0 	.word	0x200000f0
 800ab64:	200000f4 	.word	0x200000f4
 800ab68:	200000e0 	.word	0x200000e0
 800ab6c:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ab76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab78:	4413      	add	r3, r2
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d309      	bcc.n	800ab9a <tcp_receive+0x2fa>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ab8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab8e:	4413      	add	r3, r2
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ab98:	e004      	b.n	800aba4 <tcp_receive+0x304>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d326      	bcc.n	800ac02 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abd4:	4413      	add	r3, r2
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800abde:	429a      	cmp	r2, r3
 800abe0:	d30a      	bcc.n	800abf8 <tcp_receive+0x358>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abec:	4413      	add	r3, r2
 800abee:	b29a      	uxth	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800abf6:	e004      	b.n	800ac02 <tcp_receive+0x362>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac0a:	4a98      	ldr	r2, [pc, #608]	; (800ae6c <tcp_receive+0x5cc>)
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff fdcb 	bl	800a7a8 <tcp_free_acked_segments>
 800ac12:	4602      	mov	r2, r0
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac20:	4a93      	ldr	r2, [pc, #588]	; (800ae70 <tcp_receive+0x5d0>)
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff fdc0 	bl	800a7a8 <tcp_free_acked_segments>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d104      	bne.n	800ac40 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac3c:	861a      	strh	r2, [r3, #48]	; 0x30
 800ac3e:	e002      	b.n	800ac46 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d103      	bne.n	800ac5c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ac62:	4b84      	ldr	r3, [pc, #528]	; (800ae74 <tcp_receive+0x5d4>)
 800ac64:	881b      	ldrh	r3, [r3, #0]
 800ac66:	4413      	add	r3, r2
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	8b5b      	ldrh	r3, [r3, #26]
 800ac74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d035      	beq.n	800ace8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d118      	bne.n	800acb6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00c      	beq.n	800aca6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fa ff5c 	bl	8005b56 <lwip_htonl>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dc20      	bgt.n	800ace8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	8b5b      	ldrh	r3, [r3, #26]
 800acaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acae:	b29a      	uxth	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800acb4:	e018      	b.n	800ace8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fa ff47 	bl	8005b56 <lwip_htonl>
 800acc8:	4603      	mov	r3, r0
 800acca:	1ae3      	subs	r3, r4, r3
 800accc:	2b00      	cmp	r3, #0
 800acce:	dc0b      	bgt.n	800ace8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	8b5b      	ldrh	r3, [r3, #26]
 800acd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acd8:	b29a      	uxth	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800acde:	e003      	b.n	800ace8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f002 fbdd 	bl	800d4a0 <tcp_send_empty_ack>
 800ace6:	e000      	b.n	800acea <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ace8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d05b      	beq.n	800adaa <tcp_receive+0x50a>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf6:	4b60      	ldr	r3, [pc, #384]	; (800ae78 <tcp_receive+0x5d8>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	da54      	bge.n	800adaa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ad00:	4b5e      	ldr	r3, [pc, #376]	; (800ae7c <tcp_receive+0x5dc>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ad14:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ad1e:	10db      	asrs	r3, r3, #3
 800ad20:	b21b      	sxth	r3, r3
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ad38:	4413      	add	r3, r2
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	b21a      	sxth	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ad42:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	da05      	bge.n	800ad56 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ad4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ad4e:	425b      	negs	r3, r3
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ad56:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ad60:	109b      	asrs	r3, r3, #2
 800ad62:	b21b      	sxth	r3, r3
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ad7a:	4413      	add	r3, r2
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	b21a      	sxth	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ad8a:	10db      	asrs	r3, r3, #3
 800ad8c:	b21b      	sxth	r3, r3
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	4413      	add	r3, r2
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	b21a      	sxth	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800adaa:	4b35      	ldr	r3, [pc, #212]	; (800ae80 <tcp_receive+0x5e0>)
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f000 84e1 	beq.w	800b776 <tcp_receive+0xed6>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	7d1b      	ldrb	r3, [r3, #20]
 800adb8:	2b06      	cmp	r3, #6
 800adba:	f200 84dc 	bhi.w	800b776 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adc2:	4b30      	ldr	r3, [pc, #192]	; (800ae84 <tcp_receive+0x5e4>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	3b01      	subs	r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f2c0 808e 	blt.w	800aeec <tcp_receive+0x64c>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800add4:	4b2a      	ldr	r3, [pc, #168]	; (800ae80 <tcp_receive+0x5e0>)
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	4619      	mov	r1, r3
 800adda:	4b2a      	ldr	r3, [pc, #168]	; (800ae84 <tcp_receive+0x5e4>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	440b      	add	r3, r1
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	3301      	adds	r3, #1
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f300 8081 	bgt.w	800aeec <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800adea:	4b27      	ldr	r3, [pc, #156]	; (800ae88 <tcp_receive+0x5e8>)
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adf4:	4b23      	ldr	r3, [pc, #140]	; (800ae84 <tcp_receive+0x5e4>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800adfc:	4b22      	ldr	r3, [pc, #136]	; (800ae88 <tcp_receive+0x5e8>)
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d106      	bne.n	800ae12 <tcp_receive+0x572>
 800ae04:	4b21      	ldr	r3, [pc, #132]	; (800ae8c <tcp_receive+0x5ec>)
 800ae06:	f240 5294 	movw	r2, #1428	; 0x594
 800ae0a:	4921      	ldr	r1, [pc, #132]	; (800ae90 <tcp_receive+0x5f0>)
 800ae0c:	4821      	ldr	r0, [pc, #132]	; (800ae94 <tcp_receive+0x5f4>)
 800ae0e:	f005 fb0d 	bl	801042c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d906      	bls.n	800ae2a <tcp_receive+0x58a>
 800ae1c:	4b1b      	ldr	r3, [pc, #108]	; (800ae8c <tcp_receive+0x5ec>)
 800ae1e:	f240 5295 	movw	r2, #1429	; 0x595
 800ae22:	491d      	ldr	r1, [pc, #116]	; (800ae98 <tcp_receive+0x5f8>)
 800ae24:	481b      	ldr	r0, [pc, #108]	; (800ae94 <tcp_receive+0x5f4>)
 800ae26:	f005 fb01 	bl	801042c <iprintf>
      off = (u16_t)off32;
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ae30:	4b15      	ldr	r3, [pc, #84]	; (800ae88 <tcp_receive+0x5e8>)
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	891b      	ldrh	r3, [r3, #8]
 800ae36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d906      	bls.n	800ae4c <tcp_receive+0x5ac>
 800ae3e:	4b13      	ldr	r3, [pc, #76]	; (800ae8c <tcp_receive+0x5ec>)
 800ae40:	f240 5297 	movw	r2, #1431	; 0x597
 800ae44:	4915      	ldr	r1, [pc, #84]	; (800ae9c <tcp_receive+0x5fc>)
 800ae46:	4813      	ldr	r0, [pc, #76]	; (800ae94 <tcp_receive+0x5f4>)
 800ae48:	f005 faf0 	bl	801042c <iprintf>
      inseg.len -= off;
 800ae4c:	4b0e      	ldr	r3, [pc, #56]	; (800ae88 <tcp_receive+0x5e8>)
 800ae4e:	891a      	ldrh	r2, [r3, #8]
 800ae50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	4b0b      	ldr	r3, [pc, #44]	; (800ae88 <tcp_receive+0x5e8>)
 800ae5a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ae5c:	4b0a      	ldr	r3, [pc, #40]	; (800ae88 <tcp_receive+0x5e8>)
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	891a      	ldrh	r2, [r3, #8]
 800ae62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ae6a:	e029      	b.n	800aec0 <tcp_receive+0x620>
 800ae6c:	080135b4 	.word	0x080135b4
 800ae70:	080135bc 	.word	0x080135bc
 800ae74:	200000f8 	.word	0x200000f8
 800ae78:	200000f4 	.word	0x200000f4
 800ae7c:	20006950 	.word	0x20006950
 800ae80:	200000fa 	.word	0x200000fa
 800ae84:	200000f0 	.word	0x200000f0
 800ae88:	200000d0 	.word	0x200000d0
 800ae8c:	0801324c 	.word	0x0801324c
 800ae90:	080135c4 	.word	0x080135c4
 800ae94:	08013298 	.word	0x08013298
 800ae98:	080135d4 	.word	0x080135d4
 800ae9c:	080135e4 	.word	0x080135e4
        off -= p->len;
 800aea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aea2:	895b      	ldrh	r3, [r3, #10]
 800aea4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800aeae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aeb2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800aeb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800aeba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800aec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aec2:	895b      	ldrh	r3, [r3, #10]
 800aec4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d8e9      	bhi.n	800aea0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800aecc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aed0:	4619      	mov	r1, r3
 800aed2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800aed4:	f7fc f87c 	bl	8006fd0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aedc:	4a91      	ldr	r2, [pc, #580]	; (800b124 <tcp_receive+0x884>)
 800aede:	6013      	str	r3, [r2, #0]
 800aee0:	4b91      	ldr	r3, [pc, #580]	; (800b128 <tcp_receive+0x888>)
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	4a8f      	ldr	r2, [pc, #572]	; (800b124 <tcp_receive+0x884>)
 800aee6:	6812      	ldr	r2, [r2, #0]
 800aee8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800aeea:	e00d      	b.n	800af08 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800aeec:	4b8d      	ldr	r3, [pc, #564]	; (800b124 <tcp_receive+0x884>)
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	da06      	bge.n	800af08 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	8b5b      	ldrh	r3, [r3, #26]
 800aefe:	f043 0302 	orr.w	r3, r3, #2
 800af02:	b29a      	uxth	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800af08:	4b86      	ldr	r3, [pc, #536]	; (800b124 <tcp_receive+0x884>)
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	2b00      	cmp	r3, #0
 800af14:	f2c0 842a 	blt.w	800b76c <tcp_receive+0xecc>
 800af18:	4b82      	ldr	r3, [pc, #520]	; (800b124 <tcp_receive+0x884>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af20:	6879      	ldr	r1, [r7, #4]
 800af22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af24:	440b      	add	r3, r1
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	3301      	adds	r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f300 841e 	bgt.w	800b76c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af34:	4b7b      	ldr	r3, [pc, #492]	; (800b124 <tcp_receive+0x884>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	429a      	cmp	r2, r3
 800af3a:	f040 829a 	bne.w	800b472 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800af3e:	4b7a      	ldr	r3, [pc, #488]	; (800b128 <tcp_receive+0x888>)
 800af40:	891c      	ldrh	r4, [r3, #8]
 800af42:	4b79      	ldr	r3, [pc, #484]	; (800b128 <tcp_receive+0x888>)
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	899b      	ldrh	r3, [r3, #12]
 800af48:	b29b      	uxth	r3, r3
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fa fdee 	bl	8005b2c <lwip_htons>
 800af50:	4603      	mov	r3, r0
 800af52:	b2db      	uxtb	r3, r3
 800af54:	f003 0303 	and.w	r3, r3, #3
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <tcp_receive+0x6c0>
 800af5c:	2301      	movs	r3, #1
 800af5e:	e000      	b.n	800af62 <tcp_receive+0x6c2>
 800af60:	2300      	movs	r3, #0
 800af62:	4423      	add	r3, r4
 800af64:	b29a      	uxth	r2, r3
 800af66:	4b71      	ldr	r3, [pc, #452]	; (800b12c <tcp_receive+0x88c>)
 800af68:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800af6e:	4b6f      	ldr	r3, [pc, #444]	; (800b12c <tcp_receive+0x88c>)
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	429a      	cmp	r2, r3
 800af74:	d275      	bcs.n	800b062 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800af76:	4b6c      	ldr	r3, [pc, #432]	; (800b128 <tcp_receive+0x888>)
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	899b      	ldrh	r3, [r3, #12]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fa fdd4 	bl	8005b2c <lwip_htons>
 800af84:	4603      	mov	r3, r0
 800af86:	b2db      	uxtb	r3, r3
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d01f      	beq.n	800afd0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800af90:	4b65      	ldr	r3, [pc, #404]	; (800b128 <tcp_receive+0x888>)
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	899b      	ldrh	r3, [r3, #12]
 800af96:	b29b      	uxth	r3, r3
 800af98:	b21b      	sxth	r3, r3
 800af9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af9e:	b21c      	sxth	r4, r3
 800afa0:	4b61      	ldr	r3, [pc, #388]	; (800b128 <tcp_receive+0x888>)
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	899b      	ldrh	r3, [r3, #12]
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7fa fdbf 	bl	8005b2c <lwip_htons>
 800afae:	4603      	mov	r3, r0
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800afb8:	b29b      	uxth	r3, r3
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fa fdb6 	bl	8005b2c <lwip_htons>
 800afc0:	4603      	mov	r3, r0
 800afc2:	b21b      	sxth	r3, r3
 800afc4:	4323      	orrs	r3, r4
 800afc6:	b21a      	sxth	r2, r3
 800afc8:	4b57      	ldr	r3, [pc, #348]	; (800b128 <tcp_receive+0x888>)
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	b292      	uxth	r2, r2
 800afce:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800afd4:	4b54      	ldr	r3, [pc, #336]	; (800b128 <tcp_receive+0x888>)
 800afd6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800afd8:	4b53      	ldr	r3, [pc, #332]	; (800b128 <tcp_receive+0x888>)
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	899b      	ldrh	r3, [r3, #12]
 800afde:	b29b      	uxth	r3, r3
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fa fda3 	bl	8005b2c <lwip_htons>
 800afe6:	4603      	mov	r3, r0
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	f003 0302 	and.w	r3, r3, #2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d005      	beq.n	800affe <tcp_receive+0x75e>
            inseg.len -= 1;
 800aff2:	4b4d      	ldr	r3, [pc, #308]	; (800b128 <tcp_receive+0x888>)
 800aff4:	891b      	ldrh	r3, [r3, #8]
 800aff6:	3b01      	subs	r3, #1
 800aff8:	b29a      	uxth	r2, r3
 800affa:	4b4b      	ldr	r3, [pc, #300]	; (800b128 <tcp_receive+0x888>)
 800affc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800affe:	4b4a      	ldr	r3, [pc, #296]	; (800b128 <tcp_receive+0x888>)
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	4b49      	ldr	r3, [pc, #292]	; (800b128 <tcp_receive+0x888>)
 800b004:	891b      	ldrh	r3, [r3, #8]
 800b006:	4619      	mov	r1, r3
 800b008:	4610      	mov	r0, r2
 800b00a:	f7fb fee1 	bl	8006dd0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b00e:	4b46      	ldr	r3, [pc, #280]	; (800b128 <tcp_receive+0x888>)
 800b010:	891c      	ldrh	r4, [r3, #8]
 800b012:	4b45      	ldr	r3, [pc, #276]	; (800b128 <tcp_receive+0x888>)
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	899b      	ldrh	r3, [r3, #12]
 800b018:	b29b      	uxth	r3, r3
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fa fd86 	bl	8005b2c <lwip_htons>
 800b020:	4603      	mov	r3, r0
 800b022:	b2db      	uxtb	r3, r3
 800b024:	f003 0303 	and.w	r3, r3, #3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <tcp_receive+0x790>
 800b02c:	2301      	movs	r3, #1
 800b02e:	e000      	b.n	800b032 <tcp_receive+0x792>
 800b030:	2300      	movs	r3, #0
 800b032:	4423      	add	r3, r4
 800b034:	b29a      	uxth	r2, r3
 800b036:	4b3d      	ldr	r3, [pc, #244]	; (800b12c <tcp_receive+0x88c>)
 800b038:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b03a:	4b3c      	ldr	r3, [pc, #240]	; (800b12c <tcp_receive+0x88c>)
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	4b38      	ldr	r3, [pc, #224]	; (800b124 <tcp_receive+0x884>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	441a      	add	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04a:	6879      	ldr	r1, [r7, #4]
 800b04c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b04e:	440b      	add	r3, r1
 800b050:	429a      	cmp	r2, r3
 800b052:	d006      	beq.n	800b062 <tcp_receive+0x7c2>
 800b054:	4b36      	ldr	r3, [pc, #216]	; (800b130 <tcp_receive+0x890>)
 800b056:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800b05a:	4936      	ldr	r1, [pc, #216]	; (800b134 <tcp_receive+0x894>)
 800b05c:	4836      	ldr	r0, [pc, #216]	; (800b138 <tcp_receive+0x898>)
 800b05e:	f005 f9e5 	bl	801042c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 80e7 	beq.w	800b23a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b06c:	4b2e      	ldr	r3, [pc, #184]	; (800b128 <tcp_receive+0x888>)
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	899b      	ldrh	r3, [r3, #12]
 800b072:	b29b      	uxth	r3, r3
 800b074:	4618      	mov	r0, r3
 800b076:	f7fa fd59 	bl	8005b2c <lwip_htons>
 800b07a:	4603      	mov	r3, r0
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	f003 0301 	and.w	r3, r3, #1
 800b082:	2b00      	cmp	r3, #0
 800b084:	d010      	beq.n	800b0a8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b086:	e00a      	b.n	800b09e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b08c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f7fd fce1 	bl	8008a60 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1f0      	bne.n	800b088 <tcp_receive+0x7e8>
 800b0a6:	e0c8      	b.n	800b23a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b0ae:	e052      	b.n	800b156 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	899b      	ldrh	r3, [r3, #12]
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7fa fd37 	bl	8005b2c <lwip_htons>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d03d      	beq.n	800b146 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b0ca:	4b17      	ldr	r3, [pc, #92]	; (800b128 <tcp_receive+0x888>)
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	899b      	ldrh	r3, [r3, #12]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fa fd2a 	bl	8005b2c <lwip_htons>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d130      	bne.n	800b146 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b0e4:	4b10      	ldr	r3, [pc, #64]	; (800b128 <tcp_receive+0x888>)
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	899b      	ldrh	r3, [r3, #12]
 800b0ea:	b29c      	uxth	r4, r3
 800b0ec:	2001      	movs	r0, #1
 800b0ee:	f7fa fd1d 	bl	8005b2c <lwip_htons>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	4b0c      	ldr	r3, [pc, #48]	; (800b128 <tcp_receive+0x888>)
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	4322      	orrs	r2, r4
 800b0fc:	b292      	uxth	r2, r2
 800b0fe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b100:	4b09      	ldr	r3, [pc, #36]	; (800b128 <tcp_receive+0x888>)
 800b102:	891c      	ldrh	r4, [r3, #8]
 800b104:	4b08      	ldr	r3, [pc, #32]	; (800b128 <tcp_receive+0x888>)
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	899b      	ldrh	r3, [r3, #12]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7fa fd0d 	bl	8005b2c <lwip_htons>
 800b112:	4603      	mov	r3, r0
 800b114:	b2db      	uxtb	r3, r3
 800b116:	f003 0303 	and.w	r3, r3, #3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00e      	beq.n	800b13c <tcp_receive+0x89c>
 800b11e:	2301      	movs	r3, #1
 800b120:	e00d      	b.n	800b13e <tcp_receive+0x89e>
 800b122:	bf00      	nop
 800b124:	200000f0 	.word	0x200000f0
 800b128:	200000d0 	.word	0x200000d0
 800b12c:	200000fa 	.word	0x200000fa
 800b130:	0801324c 	.word	0x0801324c
 800b134:	080135f4 	.word	0x080135f4
 800b138:	08013298 	.word	0x08013298
 800b13c:	2300      	movs	r3, #0
 800b13e:	4423      	add	r3, r4
 800b140:	b29a      	uxth	r2, r3
 800b142:	4b98      	ldr	r3, [pc, #608]	; (800b3a4 <tcp_receive+0xb04>)
 800b144:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b148:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b150:	6938      	ldr	r0, [r7, #16]
 800b152:	f7fd fc85 	bl	8008a60 <tcp_seg_free>
            while (next &&
 800b156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00e      	beq.n	800b17a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b15c:	4b91      	ldr	r3, [pc, #580]	; (800b3a4 <tcp_receive+0xb04>)
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	461a      	mov	r2, r3
 800b162:	4b91      	ldr	r3, [pc, #580]	; (800b3a8 <tcp_receive+0xb08>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	441a      	add	r2, r3
 800b168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b170:	8909      	ldrh	r1, [r1, #8]
 800b172:	440b      	add	r3, r1
 800b174:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b176:	2b00      	cmp	r3, #0
 800b178:	da9a      	bge.n	800b0b0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d059      	beq.n	800b234 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b180:	4b88      	ldr	r3, [pc, #544]	; (800b3a4 <tcp_receive+0xb04>)
 800b182:	881b      	ldrh	r3, [r3, #0]
 800b184:	461a      	mov	r2, r3
 800b186:	4b88      	ldr	r3, [pc, #544]	; (800b3a8 <tcp_receive+0xb08>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	441a      	add	r2, r3
 800b18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b194:	2b00      	cmp	r3, #0
 800b196:	dd4d      	ble.n	800b234 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	4b81      	ldr	r3, [pc, #516]	; (800b3a8 <tcp_receive+0xb08>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	4b80      	ldr	r3, [pc, #512]	; (800b3ac <tcp_receive+0xb0c>)
 800b1ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b1ae:	4b7f      	ldr	r3, [pc, #508]	; (800b3ac <tcp_receive+0xb0c>)
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	899b      	ldrh	r3, [r3, #12]
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fa fcb8 	bl	8005b2c <lwip_htons>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	f003 0302 	and.w	r3, r3, #2
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <tcp_receive+0x934>
                inseg.len -= 1;
 800b1c8:	4b78      	ldr	r3, [pc, #480]	; (800b3ac <tcp_receive+0xb0c>)
 800b1ca:	891b      	ldrh	r3, [r3, #8]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	4b76      	ldr	r3, [pc, #472]	; (800b3ac <tcp_receive+0xb0c>)
 800b1d2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b1d4:	4b75      	ldr	r3, [pc, #468]	; (800b3ac <tcp_receive+0xb0c>)
 800b1d6:	685a      	ldr	r2, [r3, #4]
 800b1d8:	4b74      	ldr	r3, [pc, #464]	; (800b3ac <tcp_receive+0xb0c>)
 800b1da:	891b      	ldrh	r3, [r3, #8]
 800b1dc:	4619      	mov	r1, r3
 800b1de:	4610      	mov	r0, r2
 800b1e0:	f7fb fdf6 	bl	8006dd0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b1e4:	4b71      	ldr	r3, [pc, #452]	; (800b3ac <tcp_receive+0xb0c>)
 800b1e6:	891c      	ldrh	r4, [r3, #8]
 800b1e8:	4b70      	ldr	r3, [pc, #448]	; (800b3ac <tcp_receive+0xb0c>)
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	899b      	ldrh	r3, [r3, #12]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7fa fc9b 	bl	8005b2c <lwip_htons>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	f003 0303 	and.w	r3, r3, #3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <tcp_receive+0x966>
 800b202:	2301      	movs	r3, #1
 800b204:	e000      	b.n	800b208 <tcp_receive+0x968>
 800b206:	2300      	movs	r3, #0
 800b208:	4423      	add	r3, r4
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	4b65      	ldr	r3, [pc, #404]	; (800b3a4 <tcp_receive+0xb04>)
 800b20e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b210:	4b64      	ldr	r3, [pc, #400]	; (800b3a4 <tcp_receive+0xb04>)
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	461a      	mov	r2, r3
 800b216:	4b64      	ldr	r3, [pc, #400]	; (800b3a8 <tcp_receive+0xb08>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	441a      	add	r2, r3
 800b21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	429a      	cmp	r2, r3
 800b224:	d006      	beq.n	800b234 <tcp_receive+0x994>
 800b226:	4b62      	ldr	r3, [pc, #392]	; (800b3b0 <tcp_receive+0xb10>)
 800b228:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800b22c:	4961      	ldr	r1, [pc, #388]	; (800b3b4 <tcp_receive+0xb14>)
 800b22e:	4862      	ldr	r0, [pc, #392]	; (800b3b8 <tcp_receive+0xb18>)
 800b230:	f005 f8fc 	bl	801042c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b238:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b23a:	4b5a      	ldr	r3, [pc, #360]	; (800b3a4 <tcp_receive+0xb04>)
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	4b59      	ldr	r3, [pc, #356]	; (800b3a8 <tcp_receive+0xb08>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	441a      	add	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b24e:	4b55      	ldr	r3, [pc, #340]	; (800b3a4 <tcp_receive+0xb04>)
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	429a      	cmp	r2, r3
 800b254:	d206      	bcs.n	800b264 <tcp_receive+0x9c4>
 800b256:	4b56      	ldr	r3, [pc, #344]	; (800b3b0 <tcp_receive+0xb10>)
 800b258:	f240 6207 	movw	r2, #1543	; 0x607
 800b25c:	4957      	ldr	r1, [pc, #348]	; (800b3bc <tcp_receive+0xb1c>)
 800b25e:	4856      	ldr	r0, [pc, #344]	; (800b3b8 <tcp_receive+0xb18>)
 800b260:	f005 f8e4 	bl	801042c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b268:	4b4e      	ldr	r3, [pc, #312]	; (800b3a4 <tcp_receive+0xb04>)
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	1ad3      	subs	r3, r2, r3
 800b26e:	b29a      	uxth	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7fc fdb9 	bl	8007dec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b27a:	4b4c      	ldr	r3, [pc, #304]	; (800b3ac <tcp_receive+0xb0c>)
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	891b      	ldrh	r3, [r3, #8]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d006      	beq.n	800b292 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b284:	4b49      	ldr	r3, [pc, #292]	; (800b3ac <tcp_receive+0xb0c>)
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	4a4d      	ldr	r2, [pc, #308]	; (800b3c0 <tcp_receive+0xb20>)
 800b28a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b28c:	4b47      	ldr	r3, [pc, #284]	; (800b3ac <tcp_receive+0xb0c>)
 800b28e:	2200      	movs	r2, #0
 800b290:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b292:	4b46      	ldr	r3, [pc, #280]	; (800b3ac <tcp_receive+0xb0c>)
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	899b      	ldrh	r3, [r3, #12]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fa fc46 	bl	8005b2c <lwip_htons>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f000 80b8 	beq.w	800b41e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b2ae:	4b45      	ldr	r3, [pc, #276]	; (800b3c4 <tcp_receive+0xb24>)
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	f043 0320 	orr.w	r3, r3, #32
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	4b42      	ldr	r3, [pc, #264]	; (800b3c4 <tcp_receive+0xb24>)
 800b2ba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b2bc:	e0af      	b.n	800b41e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2c2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	4a36      	ldr	r2, [pc, #216]	; (800b3a8 <tcp_receive+0xb08>)
 800b2ce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	891b      	ldrh	r3, [r3, #8]
 800b2d4:	461c      	mov	r4, r3
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	899b      	ldrh	r3, [r3, #12]
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fa fc24 	bl	8005b2c <lwip_htons>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	f003 0303 	and.w	r3, r3, #3
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d001      	beq.n	800b2f4 <tcp_receive+0xa54>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e000      	b.n	800b2f6 <tcp_receive+0xa56>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	191a      	adds	r2, r3, r4
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fc:	441a      	add	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b306:	461c      	mov	r4, r3
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	891b      	ldrh	r3, [r3, #8]
 800b30c:	461d      	mov	r5, r3
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	899b      	ldrh	r3, [r3, #12]
 800b314:	b29b      	uxth	r3, r3
 800b316:	4618      	mov	r0, r3
 800b318:	f7fa fc08 	bl	8005b2c <lwip_htons>
 800b31c:	4603      	mov	r3, r0
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	f003 0303 	and.w	r3, r3, #3
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <tcp_receive+0xa8c>
 800b328:	2301      	movs	r3, #1
 800b32a:	e000      	b.n	800b32e <tcp_receive+0xa8e>
 800b32c:	2300      	movs	r3, #0
 800b32e:	442b      	add	r3, r5
 800b330:	429c      	cmp	r4, r3
 800b332:	d206      	bcs.n	800b342 <tcp_receive+0xaa2>
 800b334:	4b1e      	ldr	r3, [pc, #120]	; (800b3b0 <tcp_receive+0xb10>)
 800b336:	f240 622c 	movw	r2, #1580	; 0x62c
 800b33a:	4923      	ldr	r1, [pc, #140]	; (800b3c8 <tcp_receive+0xb28>)
 800b33c:	481e      	ldr	r0, [pc, #120]	; (800b3b8 <tcp_receive+0xb18>)
 800b33e:	f005 f875 	bl	801042c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	891b      	ldrh	r3, [r3, #8]
 800b346:	461c      	mov	r4, r3
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	899b      	ldrh	r3, [r3, #12]
 800b34e:	b29b      	uxth	r3, r3
 800b350:	4618      	mov	r0, r3
 800b352:	f7fa fbeb 	bl	8005b2c <lwip_htons>
 800b356:	4603      	mov	r3, r0
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	f003 0303 	and.w	r3, r3, #3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <tcp_receive+0xac6>
 800b362:	2301      	movs	r3, #1
 800b364:	e000      	b.n	800b368 <tcp_receive+0xac8>
 800b366:	2300      	movs	r3, #0
 800b368:	1919      	adds	r1, r3, r4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b36e:	b28b      	uxth	r3, r1
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	b29a      	uxth	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7fc fd37 	bl	8007dec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	891b      	ldrh	r3, [r3, #8]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d028      	beq.n	800b3da <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b388:	4b0d      	ldr	r3, [pc, #52]	; (800b3c0 <tcp_receive+0xb20>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d01d      	beq.n	800b3cc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b390:	4b0b      	ldr	r3, [pc, #44]	; (800b3c0 <tcp_receive+0xb20>)
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	4619      	mov	r1, r3
 800b39a:	4610      	mov	r0, r2
 800b39c:	f7fb ff60 	bl	8007260 <pbuf_cat>
 800b3a0:	e018      	b.n	800b3d4 <tcp_receive+0xb34>
 800b3a2:	bf00      	nop
 800b3a4:	200000fa 	.word	0x200000fa
 800b3a8:	200000f0 	.word	0x200000f0
 800b3ac:	200000d0 	.word	0x200000d0
 800b3b0:	0801324c 	.word	0x0801324c
 800b3b4:	0801362c 	.word	0x0801362c
 800b3b8:	08013298 	.word	0x08013298
 800b3bc:	08013668 	.word	0x08013668
 800b3c0:	20000100 	.word	0x20000100
 800b3c4:	200000fd 	.word	0x200000fd
 800b3c8:	08013688 	.word	0x08013688
            } else {
              recv_data = cseg->p;
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	4a70      	ldr	r2, [pc, #448]	; (800b594 <tcp_receive+0xcf4>)
 800b3d2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	899b      	ldrh	r3, [r3, #12]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fa fba2 	bl	8005b2c <lwip_htons>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	f003 0301 	and.w	r3, r3, #1
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00d      	beq.n	800b410 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b3f4:	4b68      	ldr	r3, [pc, #416]	; (800b598 <tcp_receive+0xcf8>)
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	f043 0320 	orr.w	r3, r3, #32
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	4b66      	ldr	r3, [pc, #408]	; (800b598 <tcp_receive+0xcf8>)
 800b400:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	7d1b      	ldrb	r3, [r3, #20]
 800b406:	2b04      	cmp	r3, #4
 800b408:	d102      	bne.n	800b410 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2207      	movs	r2, #7
 800b40e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b418:	68b8      	ldr	r0, [r7, #8]
 800b41a:	f7fd fb21 	bl	8008a60 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b422:	2b00      	cmp	r3, #0
 800b424:	d008      	beq.n	800b438 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b432:	429a      	cmp	r2, r3
 800b434:	f43f af43 	beq.w	800b2be <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	8b5b      	ldrh	r3, [r3, #26]
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00e      	beq.n	800b462 <tcp_receive+0xbc2>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	8b5b      	ldrh	r3, [r3, #26]
 800b448:	f023 0301 	bic.w	r3, r3, #1
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	835a      	strh	r2, [r3, #26]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	8b5b      	ldrh	r3, [r3, #26]
 800b456:	f043 0302 	orr.w	r3, r3, #2
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b460:	e188      	b.n	800b774 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	8b5b      	ldrh	r3, [r3, #26]
 800b466:	f043 0301 	orr.w	r3, r3, #1
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b470:	e180      	b.n	800b774 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b476:	2b00      	cmp	r3, #0
 800b478:	d106      	bne.n	800b488 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b47a:	4848      	ldr	r0, [pc, #288]	; (800b59c <tcp_receive+0xcfc>)
 800b47c:	f7fd fb08 	bl	8008a90 <tcp_seg_copy>
 800b480:	4602      	mov	r2, r0
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	675a      	str	r2, [r3, #116]	; 0x74
 800b486:	e16d      	b.n	800b764 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b488:	2300      	movs	r3, #0
 800b48a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b490:	63bb      	str	r3, [r7, #56]	; 0x38
 800b492:	e157      	b.n	800b744 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	685a      	ldr	r2, [r3, #4]
 800b49a:	4b41      	ldr	r3, [pc, #260]	; (800b5a0 <tcp_receive+0xd00>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d11d      	bne.n	800b4de <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b4a2:	4b3e      	ldr	r3, [pc, #248]	; (800b59c <tcp_receive+0xcfc>)
 800b4a4:	891a      	ldrh	r2, [r3, #8]
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	891b      	ldrh	r3, [r3, #8]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	f240 814f 	bls.w	800b74e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b4b0:	483a      	ldr	r0, [pc, #232]	; (800b59c <tcp_receive+0xcfc>)
 800b4b2:	f7fd faed 	bl	8008a90 <tcp_seg_copy>
 800b4b6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f000 8149 	beq.w	800b752 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800b4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	e002      	b.n	800b4d4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b4d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4d6:	6978      	ldr	r0, [r7, #20]
 800b4d8:	f7ff f8de 	bl	800a698 <tcp_oos_insert_segment>
                }
                break;
 800b4dc:	e139      	b.n	800b752 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d117      	bne.n	800b514 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b4e4:	4b2e      	ldr	r3, [pc, #184]	; (800b5a0 <tcp_receive+0xd00>)
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	da57      	bge.n	800b5a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b4f4:	4829      	ldr	r0, [pc, #164]	; (800b59c <tcp_receive+0xcfc>)
 800b4f6:	f7fd facb 	bl	8008a90 <tcp_seg_copy>
 800b4fa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f000 8129 	beq.w	800b756 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	69ba      	ldr	r2, [r7, #24]
 800b508:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b50a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b50c:	69b8      	ldr	r0, [r7, #24]
 800b50e:	f7ff f8c3 	bl	800a698 <tcp_oos_insert_segment>
                  }
                  break;
 800b512:	e120      	b.n	800b756 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b514:	4b22      	ldr	r3, [pc, #136]	; (800b5a0 <tcp_receive+0xd00>)
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	3b01      	subs	r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	db3e      	blt.n	800b5a4 <tcp_receive+0xd04>
 800b526:	4b1e      	ldr	r3, [pc, #120]	; (800b5a0 <tcp_receive+0xd00>)
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	3301      	adds	r3, #1
 800b534:	2b00      	cmp	r3, #0
 800b536:	dc35      	bgt.n	800b5a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b538:	4818      	ldr	r0, [pc, #96]	; (800b59c <tcp_receive+0xcfc>)
 800b53a:	f7fd faa9 	bl	8008a90 <tcp_seg_copy>
 800b53e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 8109 	beq.w	800b75a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b550:	8912      	ldrh	r2, [r2, #8]
 800b552:	441a      	add	r2, r3
 800b554:	4b12      	ldr	r3, [pc, #72]	; (800b5a0 <tcp_receive+0xd00>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	dd12      	ble.n	800b584 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b55e:	4b10      	ldr	r3, [pc, #64]	; (800b5a0 <tcp_receive+0xd00>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	b29a      	uxth	r2, r3
 800b564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	b29a      	uxth	r2, r3
 800b570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b572:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57a:	891b      	ldrh	r3, [r3, #8]
 800b57c:	4619      	mov	r1, r3
 800b57e:	4610      	mov	r0, r2
 800b580:	f7fb fc26 	bl	8006dd0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b586:	69fa      	ldr	r2, [r7, #28]
 800b588:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b58a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b58c:	69f8      	ldr	r0, [r7, #28]
 800b58e:	f7ff f883 	bl	800a698 <tcp_oos_insert_segment>
                  }
                  break;
 800b592:	e0e2      	b.n	800b75a <tcp_receive+0xeba>
 800b594:	20000100 	.word	0x20000100
 800b598:	200000fd 	.word	0x200000fd
 800b59c:	200000d0 	.word	0x200000d0
 800b5a0:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f040 80c6 	bne.w	800b73e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b5b2:	4b80      	ldr	r3, [pc, #512]	; (800b7b4 <tcp_receive+0xf14>)
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f340 80bd 	ble.w	800b73e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	899b      	ldrh	r3, [r3, #12]
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fa faad 	bl	8005b2c <lwip_htons>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f040 80bf 	bne.w	800b75e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b5e0:	4875      	ldr	r0, [pc, #468]	; (800b7b8 <tcp_receive+0xf18>)
 800b5e2:	f7fd fa55 	bl	8008a90 <tcp_seg_copy>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 80b6 	beq.w	800b762 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5fe:	8912      	ldrh	r2, [r2, #8]
 800b600:	441a      	add	r2, r3
 800b602:	4b6c      	ldr	r3, [pc, #432]	; (800b7b4 <tcp_receive+0xf14>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	2b00      	cmp	r3, #0
 800b60a:	dd12      	ble.n	800b632 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b60c:	4b69      	ldr	r3, [pc, #420]	; (800b7b4 <tcp_receive+0xf14>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	b29a      	uxth	r2, r3
 800b612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b620:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	891b      	ldrh	r3, [r3, #8]
 800b62a:	4619      	mov	r1, r3
 800b62c:	4610      	mov	r0, r2
 800b62e:	f7fb fbcf 	bl	8006dd0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b632:	4b62      	ldr	r3, [pc, #392]	; (800b7bc <tcp_receive+0xf1c>)
 800b634:	881b      	ldrh	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	4b5e      	ldr	r3, [pc, #376]	; (800b7b4 <tcp_receive+0xf14>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	441a      	add	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b642:	6879      	ldr	r1, [r7, #4]
 800b644:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b646:	440b      	add	r3, r1
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f340 8089 	ble.w	800b762 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	899b      	ldrh	r3, [r3, #12]
 800b658:	b29b      	uxth	r3, r3
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fa fa66 	bl	8005b2c <lwip_htons>
 800b660:	4603      	mov	r3, r0
 800b662:	b2db      	uxtb	r3, r3
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d022      	beq.n	800b6b2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	899b      	ldrh	r3, [r3, #12]
 800b674:	b29b      	uxth	r3, r3
 800b676:	b21b      	sxth	r3, r3
 800b678:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b67c:	b21c      	sxth	r4, r3
 800b67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	899b      	ldrh	r3, [r3, #12]
 800b686:	b29b      	uxth	r3, r3
 800b688:	4618      	mov	r0, r3
 800b68a:	f7fa fa4f 	bl	8005b2c <lwip_htons>
 800b68e:	4603      	mov	r3, r0
 800b690:	b2db      	uxtb	r3, r3
 800b692:	b29b      	uxth	r3, r3
 800b694:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b698:	b29b      	uxth	r3, r3
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fa fa46 	bl	8005b2c <lwip_htons>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	b21b      	sxth	r3, r3
 800b6a4:	4323      	orrs	r3, r4
 800b6a6:	b21a      	sxth	r2, r3
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	b292      	uxth	r2, r2
 800b6b0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6bc:	4413      	add	r3, r2
 800b6be:	b299      	uxth	r1, r3
 800b6c0:	4b3c      	ldr	r3, [pc, #240]	; (800b7b4 <tcp_receive+0xf14>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	1a8a      	subs	r2, r1, r2
 800b6cc:	b292      	uxth	r2, r2
 800b6ce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	891b      	ldrh	r3, [r3, #8]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4610      	mov	r0, r2
 800b6e0:	f7fb fb76 	bl	8006dd0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	891c      	ldrh	r4, [r3, #8]
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	899b      	ldrh	r3, [r3, #12]
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fa fa19 	bl	8005b2c <lwip_htons>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	f003 0303 	and.w	r3, r3, #3
 800b702:	2b00      	cmp	r3, #0
 800b704:	d001      	beq.n	800b70a <tcp_receive+0xe6a>
 800b706:	2301      	movs	r3, #1
 800b708:	e000      	b.n	800b70c <tcp_receive+0xe6c>
 800b70a:	2300      	movs	r3, #0
 800b70c:	4423      	add	r3, r4
 800b70e:	b29a      	uxth	r2, r3
 800b710:	4b2a      	ldr	r3, [pc, #168]	; (800b7bc <tcp_receive+0xf1c>)
 800b712:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b714:	4b29      	ldr	r3, [pc, #164]	; (800b7bc <tcp_receive+0xf1c>)
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	4b26      	ldr	r3, [pc, #152]	; (800b7b4 <tcp_receive+0xf14>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	441a      	add	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b724:	6879      	ldr	r1, [r7, #4]
 800b726:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b728:	440b      	add	r3, r1
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d019      	beq.n	800b762 <tcp_receive+0xec2>
 800b72e:	4b24      	ldr	r3, [pc, #144]	; (800b7c0 <tcp_receive+0xf20>)
 800b730:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b734:	4923      	ldr	r1, [pc, #140]	; (800b7c4 <tcp_receive+0xf24>)
 800b736:	4824      	ldr	r0, [pc, #144]	; (800b7c8 <tcp_receive+0xf28>)
 800b738:	f004 fe78 	bl	801042c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b73c:	e011      	b.n	800b762 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	63bb      	str	r3, [r7, #56]	; 0x38
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	2b00      	cmp	r3, #0
 800b748:	f47f aea4 	bne.w	800b494 <tcp_receive+0xbf4>
 800b74c:	e00a      	b.n	800b764 <tcp_receive+0xec4>
                break;
 800b74e:	bf00      	nop
 800b750:	e008      	b.n	800b764 <tcp_receive+0xec4>
                break;
 800b752:	bf00      	nop
 800b754:	e006      	b.n	800b764 <tcp_receive+0xec4>
                  break;
 800b756:	bf00      	nop
 800b758:	e004      	b.n	800b764 <tcp_receive+0xec4>
                  break;
 800b75a:	bf00      	nop
 800b75c:	e002      	b.n	800b764 <tcp_receive+0xec4>
                  break;
 800b75e:	bf00      	nop
 800b760:	e000      	b.n	800b764 <tcp_receive+0xec4>
                break;
 800b762:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f001 fe9b 	bl	800d4a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b76a:	e003      	b.n	800b774 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f001 fe97 	bl	800d4a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b772:	e01a      	b.n	800b7aa <tcp_receive+0xf0a>
 800b774:	e019      	b.n	800b7aa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b776:	4b0f      	ldr	r3, [pc, #60]	; (800b7b4 <tcp_receive+0xf14>)
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	2b00      	cmp	r3, #0
 800b782:	db0a      	blt.n	800b79a <tcp_receive+0xefa>
 800b784:	4b0b      	ldr	r3, [pc, #44]	; (800b7b4 <tcp_receive+0xf14>)
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78c:	6879      	ldr	r1, [r7, #4]
 800b78e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b790:	440b      	add	r3, r1
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	3301      	adds	r3, #1
 800b796:	2b00      	cmp	r3, #0
 800b798:	dd07      	ble.n	800b7aa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	8b5b      	ldrh	r3, [r3, #26]
 800b79e:	f043 0302 	orr.w	r3, r3, #2
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b7a8:	e7ff      	b.n	800b7aa <tcp_receive+0xf0a>
 800b7aa:	bf00      	nop
 800b7ac:	3750      	adds	r7, #80	; 0x50
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	200000f0 	.word	0x200000f0
 800b7b8:	200000d0 	.word	0x200000d0
 800b7bc:	200000fa 	.word	0x200000fa
 800b7c0:	0801324c 	.word	0x0801324c
 800b7c4:	080135f4 	.word	0x080135f4
 800b7c8:	08013298 	.word	0x08013298

0800b7cc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b7d2:	4b15      	ldr	r3, [pc, #84]	; (800b828 <tcp_get_next_optbyte+0x5c>)
 800b7d4:	881b      	ldrh	r3, [r3, #0]
 800b7d6:	1c5a      	adds	r2, r3, #1
 800b7d8:	b291      	uxth	r1, r2
 800b7da:	4a13      	ldr	r2, [pc, #76]	; (800b828 <tcp_get_next_optbyte+0x5c>)
 800b7dc:	8011      	strh	r1, [r2, #0]
 800b7de:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b7e0:	4b12      	ldr	r3, [pc, #72]	; (800b82c <tcp_get_next_optbyte+0x60>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d004      	beq.n	800b7f2 <tcp_get_next_optbyte+0x26>
 800b7e8:	4b11      	ldr	r3, [pc, #68]	; (800b830 <tcp_get_next_optbyte+0x64>)
 800b7ea:	881b      	ldrh	r3, [r3, #0]
 800b7ec:	88fa      	ldrh	r2, [r7, #6]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d208      	bcs.n	800b804 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b7f2:	4b10      	ldr	r3, [pc, #64]	; (800b834 <tcp_get_next_optbyte+0x68>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	3314      	adds	r3, #20
 800b7f8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b7fa:	88fb      	ldrh	r3, [r7, #6]
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	4413      	add	r3, r2
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	e00b      	b.n	800b81c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b804:	88fb      	ldrh	r3, [r7, #6]
 800b806:	b2da      	uxtb	r2, r3
 800b808:	4b09      	ldr	r3, [pc, #36]	; (800b830 <tcp_get_next_optbyte+0x64>)
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b812:	4b06      	ldr	r3, [pc, #24]	; (800b82c <tcp_get_next_optbyte+0x60>)
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	797b      	ldrb	r3, [r7, #5]
 800b818:	4413      	add	r3, r2
 800b81a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	200000ec 	.word	0x200000ec
 800b82c:	200000e8 	.word	0x200000e8
 800b830:	200000e6 	.word	0x200000e6
 800b834:	200000e0 	.word	0x200000e0

0800b838 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d106      	bne.n	800b854 <tcp_parseopt+0x1c>
 800b846:	4b31      	ldr	r3, [pc, #196]	; (800b90c <tcp_parseopt+0xd4>)
 800b848:	f240 727d 	movw	r2, #1917	; 0x77d
 800b84c:	4930      	ldr	r1, [pc, #192]	; (800b910 <tcp_parseopt+0xd8>)
 800b84e:	4831      	ldr	r0, [pc, #196]	; (800b914 <tcp_parseopt+0xdc>)
 800b850:	f004 fdec 	bl	801042c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b854:	4b30      	ldr	r3, [pc, #192]	; (800b918 <tcp_parseopt+0xe0>)
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d053      	beq.n	800b904 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b85c:	4b2f      	ldr	r3, [pc, #188]	; (800b91c <tcp_parseopt+0xe4>)
 800b85e:	2200      	movs	r2, #0
 800b860:	801a      	strh	r2, [r3, #0]
 800b862:	e043      	b.n	800b8ec <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800b864:	f7ff ffb2 	bl	800b7cc <tcp_get_next_optbyte>
 800b868:	4603      	mov	r3, r0
 800b86a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d03c      	beq.n	800b8ec <tcp_parseopt+0xb4>
 800b872:	2b02      	cmp	r3, #2
 800b874:	d002      	beq.n	800b87c <tcp_parseopt+0x44>
 800b876:	2b00      	cmp	r3, #0
 800b878:	d03f      	beq.n	800b8fa <tcp_parseopt+0xc2>
 800b87a:	e026      	b.n	800b8ca <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b87c:	f7ff ffa6 	bl	800b7cc <tcp_get_next_optbyte>
 800b880:	4603      	mov	r3, r0
 800b882:	2b04      	cmp	r3, #4
 800b884:	d13b      	bne.n	800b8fe <tcp_parseopt+0xc6>
 800b886:	4b25      	ldr	r3, [pc, #148]	; (800b91c <tcp_parseopt+0xe4>)
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	3302      	adds	r3, #2
 800b88c:	4a22      	ldr	r2, [pc, #136]	; (800b918 <tcp_parseopt+0xe0>)
 800b88e:	8812      	ldrh	r2, [r2, #0]
 800b890:	4293      	cmp	r3, r2
 800b892:	dc34      	bgt.n	800b8fe <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b894:	f7ff ff9a 	bl	800b7cc <tcp_get_next_optbyte>
 800b898:	4603      	mov	r3, r0
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	021b      	lsls	r3, r3, #8
 800b89e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b8a0:	f7ff ff94 	bl	800b7cc <tcp_get_next_optbyte>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	89bb      	ldrh	r3, [r7, #12]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b8ae:	89bb      	ldrh	r3, [r7, #12]
 800b8b0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b8b4:	d804      	bhi.n	800b8c0 <tcp_parseopt+0x88>
 800b8b6:	89bb      	ldrh	r3, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d001      	beq.n	800b8c0 <tcp_parseopt+0x88>
 800b8bc:	89ba      	ldrh	r2, [r7, #12]
 800b8be:	e001      	b.n	800b8c4 <tcp_parseopt+0x8c>
 800b8c0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b8c8:	e010      	b.n	800b8ec <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b8ca:	f7ff ff7f 	bl	800b7cc <tcp_get_next_optbyte>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b8d2:	7afb      	ldrb	r3, [r7, #11]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d914      	bls.n	800b902 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b8d8:	7afb      	ldrb	r3, [r7, #11]
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	4b0f      	ldr	r3, [pc, #60]	; (800b91c <tcp_parseopt+0xe4>)
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	3b02      	subs	r3, #2
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	4b0c      	ldr	r3, [pc, #48]	; (800b91c <tcp_parseopt+0xe4>)
 800b8ea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b8ec:	4b0b      	ldr	r3, [pc, #44]	; (800b91c <tcp_parseopt+0xe4>)
 800b8ee:	881a      	ldrh	r2, [r3, #0]
 800b8f0:	4b09      	ldr	r3, [pc, #36]	; (800b918 <tcp_parseopt+0xe0>)
 800b8f2:	881b      	ldrh	r3, [r3, #0]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d3b5      	bcc.n	800b864 <tcp_parseopt+0x2c>
 800b8f8:	e004      	b.n	800b904 <tcp_parseopt+0xcc>
          return;
 800b8fa:	bf00      	nop
 800b8fc:	e002      	b.n	800b904 <tcp_parseopt+0xcc>
            return;
 800b8fe:	bf00      	nop
 800b900:	e000      	b.n	800b904 <tcp_parseopt+0xcc>
            return;
 800b902:	bf00      	nop
      }
    }
  }
}
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	0801324c 	.word	0x0801324c
 800b910:	080136b0 	.word	0x080136b0
 800b914:	08013298 	.word	0x08013298
 800b918:	200000e4 	.word	0x200000e4
 800b91c:	200000ec 	.word	0x200000ec

0800b920 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b920:	b480      	push	{r7}
 800b922:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b924:	4b05      	ldr	r3, [pc, #20]	; (800b93c <tcp_trigger_input_pcb_close+0x1c>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	f043 0310 	orr.w	r3, r3, #16
 800b92c:	b2da      	uxtb	r2, r3
 800b92e:	4b03      	ldr	r3, [pc, #12]	; (800b93c <tcp_trigger_input_pcb_close+0x1c>)
 800b930:	701a      	strb	r2, [r3, #0]
}
 800b932:	bf00      	nop
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	200000fd 	.word	0x200000fd

0800b940 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00a      	beq.n	800b968 <tcp_route+0x28>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	7a1b      	ldrb	r3, [r3, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d006      	beq.n	800b968 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	7a1b      	ldrb	r3, [r3, #8]
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fb f860 	bl	8006a24 <netif_get_by_index>
 800b964:	4603      	mov	r3, r0
 800b966:	e003      	b.n	800b970 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f003 fb1f 	bl	800efac <ip4_route>
 800b96e:	4603      	mov	r3, r0
  }
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b978:	b590      	push	{r4, r7, lr}
 800b97a:	b087      	sub	sp, #28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	603b      	str	r3, [r7, #0]
 800b984:	4613      	mov	r3, r2
 800b986:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d105      	bne.n	800b99a <tcp_create_segment+0x22>
 800b98e:	4b44      	ldr	r3, [pc, #272]	; (800baa0 <tcp_create_segment+0x128>)
 800b990:	22a3      	movs	r2, #163	; 0xa3
 800b992:	4944      	ldr	r1, [pc, #272]	; (800baa4 <tcp_create_segment+0x12c>)
 800b994:	4844      	ldr	r0, [pc, #272]	; (800baa8 <tcp_create_segment+0x130>)
 800b996:	f004 fd49 	bl	801042c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d105      	bne.n	800b9ac <tcp_create_segment+0x34>
 800b9a0:	4b3f      	ldr	r3, [pc, #252]	; (800baa0 <tcp_create_segment+0x128>)
 800b9a2:	22a4      	movs	r2, #164	; 0xa4
 800b9a4:	4941      	ldr	r1, [pc, #260]	; (800baac <tcp_create_segment+0x134>)
 800b9a6:	4840      	ldr	r0, [pc, #256]	; (800baa8 <tcp_create_segment+0x130>)
 800b9a8:	f004 fd40 	bl	801042c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b9ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 0304 	and.w	r3, r3, #4
 800b9b8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b9ba:	2003      	movs	r0, #3
 800b9bc:	f7fa fd34 	bl	8006428 <memp_malloc>
 800b9c0:	6138      	str	r0, [r7, #16]
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d104      	bne.n	800b9d2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b9c8:	68b8      	ldr	r0, [r7, #8]
 800b9ca:	f7fb fb87 	bl	80070dc <pbuf_free>
    return NULL;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e061      	b.n	800ba96 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b9d8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	891a      	ldrh	r2, [r3, #8]
 800b9ea:	7dfb      	ldrb	r3, [r7, #23]
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d205      	bcs.n	800b9fe <tcp_create_segment+0x86>
 800b9f2:	4b2b      	ldr	r3, [pc, #172]	; (800baa0 <tcp_create_segment+0x128>)
 800b9f4:	22b0      	movs	r2, #176	; 0xb0
 800b9f6:	492e      	ldr	r1, [pc, #184]	; (800bab0 <tcp_create_segment+0x138>)
 800b9f8:	482b      	ldr	r0, [pc, #172]	; (800baa8 <tcp_create_segment+0x130>)
 800b9fa:	f004 fd17 	bl	801042c <iprintf>
  seg->len = p->tot_len - optlen;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	891a      	ldrh	r2, [r3, #8]
 800ba02:	7dfb      	ldrb	r3, [r7, #23]
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ba0e:	2114      	movs	r1, #20
 800ba10:	68b8      	ldr	r0, [r7, #8]
 800ba12:	f7fb facd 	bl	8006fb0 <pbuf_add_header>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d004      	beq.n	800ba26 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ba1c:	6938      	ldr	r0, [r7, #16]
 800ba1e:	f7fd f81f 	bl	8008a60 <tcp_seg_free>
    return NULL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	e037      	b.n	800ba96 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8ada      	ldrh	r2, [r3, #22]
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	68dc      	ldr	r4, [r3, #12]
 800ba38:	4610      	mov	r0, r2
 800ba3a:	f7fa f877 	bl	8005b2c <lwip_htons>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	8b1a      	ldrh	r2, [r3, #24]
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	68dc      	ldr	r4, [r3, #12]
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	f7fa f86e 	bl	8005b2c <lwip_htons>
 800ba50:	4603      	mov	r3, r0
 800ba52:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	68dc      	ldr	r4, [r3, #12]
 800ba58:	6838      	ldr	r0, [r7, #0]
 800ba5a:	f7fa f87c 	bl	8005b56 <lwip_htonl>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	089b      	lsrs	r3, r3, #2
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	3305      	adds	r3, #5
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	031b      	lsls	r3, r3, #12
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	4313      	orrs	r3, r2
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	68dc      	ldr	r4, [r3, #12]
 800ba7e:	4610      	mov	r0, r2
 800ba80:	f7fa f854 	bl	8005b2c <lwip_htons>
 800ba84:	4603      	mov	r3, r0
 800ba86:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	749a      	strb	r2, [r3, #18]
 800ba90:	2200      	movs	r2, #0
 800ba92:	74da      	strb	r2, [r3, #19]
  return seg;
 800ba94:	693b      	ldr	r3, [r7, #16]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	371c      	adds	r7, #28
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd90      	pop	{r4, r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	080136cc 	.word	0x080136cc
 800baa4:	08013700 	.word	0x08013700
 800baa8:	08013720 	.word	0x08013720
 800baac:	08013748 	.word	0x08013748
 800bab0:	0801376c 	.word	0x0801376c

0800bab4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	607b      	str	r3, [r7, #4]
 800babc:	4603      	mov	r3, r0
 800babe:	73fb      	strb	r3, [r7, #15]
 800bac0:	460b      	mov	r3, r1
 800bac2:	81bb      	strh	r3, [r7, #12]
 800bac4:	4613      	mov	r3, r2
 800bac6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800bac8:	89bb      	ldrh	r3, [r7, #12]
 800baca:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d105      	bne.n	800bade <tcp_pbuf_prealloc+0x2a>
 800bad2:	4b30      	ldr	r3, [pc, #192]	; (800bb94 <tcp_pbuf_prealloc+0xe0>)
 800bad4:	22e8      	movs	r2, #232	; 0xe8
 800bad6:	4930      	ldr	r1, [pc, #192]	; (800bb98 <tcp_pbuf_prealloc+0xe4>)
 800bad8:	4830      	ldr	r0, [pc, #192]	; (800bb9c <tcp_pbuf_prealloc+0xe8>)
 800bada:	f004 fca7 	bl	801042c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800bade:	6a3b      	ldr	r3, [r7, #32]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d105      	bne.n	800baf0 <tcp_pbuf_prealloc+0x3c>
 800bae4:	4b2b      	ldr	r3, [pc, #172]	; (800bb94 <tcp_pbuf_prealloc+0xe0>)
 800bae6:	22e9      	movs	r2, #233	; 0xe9
 800bae8:	492d      	ldr	r1, [pc, #180]	; (800bba0 <tcp_pbuf_prealloc+0xec>)
 800baea:	482c      	ldr	r0, [pc, #176]	; (800bb9c <tcp_pbuf_prealloc+0xe8>)
 800baec:	f004 fc9e 	bl	801042c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800baf0:	89ba      	ldrh	r2, [r7, #12]
 800baf2:	897b      	ldrh	r3, [r7, #10]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d221      	bcs.n	800bb3c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800baf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bafc:	f003 0302 	and.w	r3, r3, #2
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d111      	bne.n	800bb28 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800bb04:	6a3b      	ldr	r3, [r7, #32]
 800bb06:	8b5b      	ldrh	r3, [r3, #26]
 800bb08:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d115      	bne.n	800bb3c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800bb10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d007      	beq.n	800bb28 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d103      	bne.n	800bb28 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d009      	beq.n	800bb3c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800bb28:	89bb      	ldrh	r3, [r7, #12]
 800bb2a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800bb2e:	f023 0203 	bic.w	r2, r3, #3
 800bb32:	897b      	ldrh	r3, [r7, #10]
 800bb34:	4293      	cmp	r3, r2
 800bb36:	bf28      	it	cs
 800bb38:	4613      	movcs	r3, r2
 800bb3a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800bb3c:	8af9      	ldrh	r1, [r7, #22]
 800bb3e:	7bfb      	ldrb	r3, [r7, #15]
 800bb40:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fa ffe9 	bl	8006b1c <pbuf_alloc>
 800bb4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800bb52:	2300      	movs	r3, #0
 800bb54:	e019      	b.n	800bb8a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d006      	beq.n	800bb6c <tcp_pbuf_prealloc+0xb8>
 800bb5e:	4b0d      	ldr	r3, [pc, #52]	; (800bb94 <tcp_pbuf_prealloc+0xe0>)
 800bb60:	f240 120b 	movw	r2, #267	; 0x10b
 800bb64:	490f      	ldr	r1, [pc, #60]	; (800bba4 <tcp_pbuf_prealloc+0xf0>)
 800bb66:	480d      	ldr	r0, [pc, #52]	; (800bb9c <tcp_pbuf_prealloc+0xe8>)
 800bb68:	f004 fc60 	bl	801042c <iprintf>
  *oversize = p->len - length;
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	895a      	ldrh	r2, [r3, #10]
 800bb70:	89bb      	ldrh	r3, [r7, #12]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	89ba      	ldrh	r2, [r7, #12]
 800bb7e:	811a      	strh	r2, [r3, #8]
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	891a      	ldrh	r2, [r3, #8]
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	815a      	strh	r2, [r3, #10]
  return p;
 800bb88:	693b      	ldr	r3, [r7, #16]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3718      	adds	r7, #24
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	080136cc 	.word	0x080136cc
 800bb98:	08013784 	.word	0x08013784
 800bb9c:	08013720 	.word	0x08013720
 800bba0:	080137a8 	.word	0x080137a8
 800bba4:	080137c8 	.word	0x080137c8

0800bba8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d106      	bne.n	800bbc8 <tcp_write_checks+0x20>
 800bbba:	4b33      	ldr	r3, [pc, #204]	; (800bc88 <tcp_write_checks+0xe0>)
 800bbbc:	f240 1233 	movw	r2, #307	; 0x133
 800bbc0:	4932      	ldr	r1, [pc, #200]	; (800bc8c <tcp_write_checks+0xe4>)
 800bbc2:	4833      	ldr	r0, [pc, #204]	; (800bc90 <tcp_write_checks+0xe8>)
 800bbc4:	f004 fc32 	bl	801042c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	7d1b      	ldrb	r3, [r3, #20]
 800bbcc:	2b04      	cmp	r3, #4
 800bbce:	d00e      	beq.n	800bbee <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800bbd4:	2b07      	cmp	r3, #7
 800bbd6:	d00a      	beq.n	800bbee <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d006      	beq.n	800bbee <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800bbe4:	2b03      	cmp	r3, #3
 800bbe6:	d002      	beq.n	800bbee <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800bbe8:	f06f 030a 	mvn.w	r3, #10
 800bbec:	e048      	b.n	800bc80 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800bbee:	887b      	ldrh	r3, [r7, #2]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d101      	bne.n	800bbf8 <tcp_write_checks+0x50>
    return ERR_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e043      	b.n	800bc80 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bbfe:	887a      	ldrh	r2, [r7, #2]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d909      	bls.n	800bc18 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	8b5b      	ldrh	r3, [r3, #26]
 800bc08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bc12:	f04f 33ff 	mov.w	r3, #4294967295
 800bc16:	e033      	b.n	800bc80 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc1e:	2b08      	cmp	r3, #8
 800bc20:	d909      	bls.n	800bc36 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	8b5b      	ldrh	r3, [r3, #26]
 800bc26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bc30:	f04f 33ff 	mov.w	r3, #4294967295
 800bc34:	e024      	b.n	800bc80 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00f      	beq.n	800bc60 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d11a      	bne.n	800bc7e <tcp_write_checks+0xd6>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d116      	bne.n	800bc7e <tcp_write_checks+0xd6>
 800bc50:	4b0d      	ldr	r3, [pc, #52]	; (800bc88 <tcp_write_checks+0xe0>)
 800bc52:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800bc56:	490f      	ldr	r1, [pc, #60]	; (800bc94 <tcp_write_checks+0xec>)
 800bc58:	480d      	ldr	r0, [pc, #52]	; (800bc90 <tcp_write_checks+0xe8>)
 800bc5a:	f004 fbe7 	bl	801042c <iprintf>
 800bc5e:	e00e      	b.n	800bc7e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d103      	bne.n	800bc70 <tcp_write_checks+0xc8>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d006      	beq.n	800bc7e <tcp_write_checks+0xd6>
 800bc70:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <tcp_write_checks+0xe0>)
 800bc72:	f240 1259 	movw	r2, #345	; 0x159
 800bc76:	4908      	ldr	r1, [pc, #32]	; (800bc98 <tcp_write_checks+0xf0>)
 800bc78:	4805      	ldr	r0, [pc, #20]	; (800bc90 <tcp_write_checks+0xe8>)
 800bc7a:	f004 fbd7 	bl	801042c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	080136cc 	.word	0x080136cc
 800bc8c:	080137dc 	.word	0x080137dc
 800bc90:	08013720 	.word	0x08013720
 800bc94:	080137fc 	.word	0x080137fc
 800bc98:	08013838 	.word	0x08013838

0800bc9c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800bc9c:	b590      	push	{r4, r7, lr}
 800bc9e:	b09b      	sub	sp, #108	; 0x6c
 800bca0:	af04      	add	r7, sp, #16
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	4611      	mov	r1, r2
 800bca8:	461a      	mov	r2, r3
 800bcaa:	460b      	mov	r3, r1
 800bcac:	80fb      	strh	r3, [r7, #6]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	653b      	str	r3, [r7, #80]	; 0x50
 800bcba:	2300      	movs	r3, #0
 800bcbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d109      	bne.n	800bcf8 <tcp_write+0x5c>
 800bce4:	4ba5      	ldr	r3, [pc, #660]	; (800bf7c <tcp_write+0x2e0>)
 800bce6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800bcea:	49a5      	ldr	r1, [pc, #660]	; (800bf80 <tcp_write+0x2e4>)
 800bcec:	48a5      	ldr	r0, [pc, #660]	; (800bf84 <tcp_write+0x2e8>)
 800bcee:	f004 fb9d 	bl	801042c <iprintf>
 800bcf2:	f06f 030f 	mvn.w	r3, #15
 800bcf6:	e32c      	b.n	800c352 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcfe:	085b      	lsrs	r3, r3, #1
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd06:	4293      	cmp	r3, r2
 800bd08:	bf28      	it	cs
 800bd0a:	4613      	movcs	r3, r2
 800bd0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800bd0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d102      	bne.n	800bd1a <tcp_write+0x7e>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd18:	e000      	b.n	800bd1c <tcp_write+0x80>
 800bd1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d109      	bne.n	800bd38 <tcp_write+0x9c>
 800bd24:	4b95      	ldr	r3, [pc, #596]	; (800bf7c <tcp_write+0x2e0>)
 800bd26:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800bd2a:	4997      	ldr	r1, [pc, #604]	; (800bf88 <tcp_write+0x2ec>)
 800bd2c:	4895      	ldr	r0, [pc, #596]	; (800bf84 <tcp_write+0x2e8>)
 800bd2e:	f004 fb7d 	bl	801042c <iprintf>
 800bd32:	f06f 030f 	mvn.w	r3, #15
 800bd36:	e30c      	b.n	800c352 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800bd38:	88fb      	ldrh	r3, [r7, #6]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f7ff ff33 	bl	800bba8 <tcp_write_checks>
 800bd42:	4603      	mov	r3, r0
 800bd44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800bd48:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <tcp_write+0xba>
    return err;
 800bd50:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bd54:	e2fd      	b.n	800c352 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bd60:	2300      	movs	r3, #0
 800bd62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 80f7 	beq.w	800bf5e <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd74:	653b      	str	r3, [r7, #80]	; 0x50
 800bd76:	e002      	b.n	800bd7e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800bd78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bd7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1f8      	bne.n	800bd78 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bd86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd88:	7a9b      	ldrb	r3, [r3, #10]
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	f003 0304 	and.w	r3, r3, #4
 800bd92:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bd94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd98:	891b      	ldrh	r3, [r3, #8]
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	8c3b      	ldrh	r3, [r7, #32]
 800bd9e:	440b      	add	r3, r1
 800bda0:	429a      	cmp	r2, r3
 800bda2:	da06      	bge.n	800bdb2 <tcp_write+0x116>
 800bda4:	4b75      	ldr	r3, [pc, #468]	; (800bf7c <tcp_write+0x2e0>)
 800bda6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bdaa:	4978      	ldr	r1, [pc, #480]	; (800bf8c <tcp_write+0x2f0>)
 800bdac:	4875      	ldr	r0, [pc, #468]	; (800bf84 <tcp_write+0x2e8>)
 800bdae:	f004 fb3d 	bl	801042c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bdb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdb4:	891a      	ldrh	r2, [r3, #8]
 800bdb6:	8c3b      	ldrh	r3, [r7, #32]
 800bdb8:	4413      	add	r3, r2
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bdc8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800bdca:	8a7b      	ldrh	r3, [r7, #18]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d027      	beq.n	800be20 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bdd0:	8a7b      	ldrh	r3, [r7, #18]
 800bdd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d206      	bcs.n	800bde6 <tcp_write+0x14a>
 800bdd8:	4b68      	ldr	r3, [pc, #416]	; (800bf7c <tcp_write+0x2e0>)
 800bdda:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800bdde:	496c      	ldr	r1, [pc, #432]	; (800bf90 <tcp_write+0x2f4>)
 800bde0:	4868      	ldr	r0, [pc, #416]	; (800bf84 <tcp_write+0x2e8>)
 800bde2:	f004 fb23 	bl	801042c <iprintf>
      seg = last_unsent;
 800bde6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bde8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bdea:	8a7b      	ldrh	r3, [r7, #18]
 800bdec:	88fa      	ldrh	r2, [r7, #6]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d901      	bls.n	800bdf6 <tcp_write+0x15a>
 800bdf2:	8a7b      	ldrh	r3, [r7, #18]
 800bdf4:	e000      	b.n	800bdf8 <tcp_write+0x15c>
 800bdf6:	88fb      	ldrh	r3, [r7, #6]
 800bdf8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	bfa8      	it	ge
 800bdfe:	4613      	movge	r3, r2
 800be00:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800be02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800be06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be08:	4413      	add	r3, r2
 800be0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800be0e:	8a7a      	ldrh	r2, [r7, #18]
 800be10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	b29b      	uxth	r3, r3
 800be16:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800be18:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800be1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800be20:	8a7b      	ldrh	r3, [r7, #18]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00b      	beq.n	800be3e <tcp_write+0x1a2>
 800be26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800be2a:	88fb      	ldrh	r3, [r7, #6]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d006      	beq.n	800be3e <tcp_write+0x1a2>
 800be30:	4b52      	ldr	r3, [pc, #328]	; (800bf7c <tcp_write+0x2e0>)
 800be32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be36:	4957      	ldr	r1, [pc, #348]	; (800bf94 <tcp_write+0x2f8>)
 800be38:	4852      	ldr	r0, [pc, #328]	; (800bf84 <tcp_write+0x2e8>)
 800be3a:	f004 faf7 	bl	801042c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800be3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800be42:	88fb      	ldrh	r3, [r7, #6]
 800be44:	429a      	cmp	r2, r3
 800be46:	f080 8168 	bcs.w	800c11a <tcp_write+0x47e>
 800be4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f000 8164 	beq.w	800c11a <tcp_write+0x47e>
 800be52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be54:	891b      	ldrh	r3, [r3, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	f000 815f 	beq.w	800c11a <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800be5c:	88fa      	ldrh	r2, [r7, #6]
 800be5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be62:	1ad2      	subs	r2, r2, r3
 800be64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be66:	4293      	cmp	r3, r2
 800be68:	bfa8      	it	ge
 800be6a:	4613      	movge	r3, r2
 800be6c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800be6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be70:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800be72:	797b      	ldrb	r3, [r7, #5]
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d027      	beq.n	800becc <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800be7c:	f107 0012 	add.w	r0, r7, #18
 800be80:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800be82:	8bf9      	ldrh	r1, [r7, #30]
 800be84:	2301      	movs	r3, #1
 800be86:	9302      	str	r3, [sp, #8]
 800be88:	797b      	ldrb	r3, [r7, #5]
 800be8a:	9301      	str	r3, [sp, #4]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	4603      	mov	r3, r0
 800be92:	2000      	movs	r0, #0
 800be94:	f7ff fe0e 	bl	800bab4 <tcp_pbuf_prealloc>
 800be98:	6578      	str	r0, [r7, #84]	; 0x54
 800be9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 8226 	beq.w	800c2ee <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bea4:	6858      	ldr	r0, [r3, #4]
 800bea6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	4413      	add	r3, r2
 800beae:	8bfa      	ldrh	r2, [r7, #30]
 800beb0:	4619      	mov	r1, r3
 800beb2:	f004 fa8e 	bl	80103d2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800beb6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800beb8:	f7fb f998 	bl	80071ec <pbuf_clen>
 800bebc:	4603      	mov	r3, r0
 800bebe:	461a      	mov	r2, r3
 800bec0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bec4:	4413      	add	r3, r2
 800bec6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800beca:	e041      	b.n	800bf50 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800becc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	637b      	str	r3, [r7, #52]	; 0x34
 800bed2:	e002      	b.n	800beda <tcp_write+0x23e>
 800bed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	637b      	str	r3, [r7, #52]	; 0x34
 800beda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1f8      	bne.n	800bed4 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee4:	7b1b      	ldrb	r3, [r3, #12]
 800bee6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d115      	bne.n	800bf1a <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800beee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bef4:	8952      	ldrh	r2, [r2, #10]
 800bef6:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bef8:	68ba      	ldr	r2, [r7, #8]
 800befa:	429a      	cmp	r2, r3
 800befc:	d10d      	bne.n	800bf1a <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800befe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d006      	beq.n	800bf14 <tcp_write+0x278>
 800bf06:	4b1d      	ldr	r3, [pc, #116]	; (800bf7c <tcp_write+0x2e0>)
 800bf08:	f240 2231 	movw	r2, #561	; 0x231
 800bf0c:	4922      	ldr	r1, [pc, #136]	; (800bf98 <tcp_write+0x2fc>)
 800bf0e:	481d      	ldr	r0, [pc, #116]	; (800bf84 <tcp_write+0x2e8>)
 800bf10:	f004 fa8c 	bl	801042c <iprintf>
          extendlen = seglen;
 800bf14:	8bfb      	ldrh	r3, [r7, #30]
 800bf16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800bf18:	e01a      	b.n	800bf50 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bf1a:	8bfb      	ldrh	r3, [r7, #30]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	4619      	mov	r1, r3
 800bf20:	2000      	movs	r0, #0
 800bf22:	f7fa fdfb 	bl	8006b1c <pbuf_alloc>
 800bf26:	6578      	str	r0, [r7, #84]	; 0x54
 800bf28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f000 81e1 	beq.w	800c2f2 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800bf30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	441a      	add	r2, r3
 800bf38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf3a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800bf3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bf3e:	f7fb f955 	bl	80071ec <pbuf_clen>
 800bf42:	4603      	mov	r3, r0
 800bf44:	461a      	mov	r2, r3
 800bf46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf4a:	4413      	add	r3, r2
 800bf4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800bf50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bf54:	8bfb      	ldrh	r3, [r7, #30]
 800bf56:	4413      	add	r3, r2
 800bf58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bf5c:	e0dd      	b.n	800c11a <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f000 80d8 	beq.w	800c11a <tcp_write+0x47e>
 800bf6a:	4b04      	ldr	r3, [pc, #16]	; (800bf7c <tcp_write+0x2e0>)
 800bf6c:	f240 224b 	movw	r2, #587	; 0x24b
 800bf70:	490a      	ldr	r1, [pc, #40]	; (800bf9c <tcp_write+0x300>)
 800bf72:	4804      	ldr	r0, [pc, #16]	; (800bf84 <tcp_write+0x2e8>)
 800bf74:	f004 fa5a 	bl	801042c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800bf78:	e0cf      	b.n	800c11a <tcp_write+0x47e>
 800bf7a:	bf00      	nop
 800bf7c:	080136cc 	.word	0x080136cc
 800bf80:	0801386c 	.word	0x0801386c
 800bf84:	08013720 	.word	0x08013720
 800bf88:	08013884 	.word	0x08013884
 800bf8c:	080138b8 	.word	0x080138b8
 800bf90:	080138d0 	.word	0x080138d0
 800bf94:	080138f0 	.word	0x080138f0
 800bf98:	08013910 	.word	0x08013910
 800bf9c:	0801393c 	.word	0x0801393c
    struct pbuf *p;
    u16_t left = len - pos;
 800bfa0:	88fa      	ldrh	r2, [r7, #6]
 800bfa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800bfaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800bfb6:	8b7a      	ldrh	r2, [r7, #26]
 800bfb8:	8bbb      	ldrh	r3, [r7, #28]
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	bf28      	it	cs
 800bfbe:	4613      	movcs	r3, r2
 800bfc0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bfc2:	797b      	ldrb	r3, [r7, #5]
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d036      	beq.n	800c03a <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bfcc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	8b3b      	ldrh	r3, [r7, #24]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	b299      	uxth	r1, r3
 800bfd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	bf0c      	ite	eq
 800bfde:	2301      	moveq	r3, #1
 800bfe0:	2300      	movne	r3, #0
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	f107 0012 	add.w	r0, r7, #18
 800bfe8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bfea:	9302      	str	r3, [sp, #8]
 800bfec:	797b      	ldrb	r3, [r7, #5]
 800bfee:	9301      	str	r3, [sp, #4]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	4603      	mov	r3, r0
 800bff6:	2036      	movs	r0, #54	; 0x36
 800bff8:	f7ff fd5c 	bl	800bab4 <tcp_pbuf_prealloc>
 800bffc:	6338      	str	r0, [r7, #48]	; 0x30
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 8178 	beq.w	800c2f6 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	895b      	ldrh	r3, [r3, #10]
 800c00a:	8b3a      	ldrh	r2, [r7, #24]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d906      	bls.n	800c01e <tcp_write+0x382>
 800c010:	4b8c      	ldr	r3, [pc, #560]	; (800c244 <tcp_write+0x5a8>)
 800c012:	f240 2267 	movw	r2, #615	; 0x267
 800c016:	498c      	ldr	r1, [pc, #560]	; (800c248 <tcp_write+0x5ac>)
 800c018:	488c      	ldr	r0, [pc, #560]	; (800c24c <tcp_write+0x5b0>)
 800c01a:	f004 fa07 	bl	801042c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	685a      	ldr	r2, [r3, #4]
 800c022:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c026:	18d0      	adds	r0, r2, r3
 800c028:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	4413      	add	r3, r2
 800c030:	8b3a      	ldrh	r2, [r7, #24]
 800c032:	4619      	mov	r1, r3
 800c034:	f004 f9cd 	bl	80103d2 <memcpy>
 800c038:	e02f      	b.n	800c09a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c03a:	8a7b      	ldrh	r3, [r7, #18]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d006      	beq.n	800c04e <tcp_write+0x3b2>
 800c040:	4b80      	ldr	r3, [pc, #512]	; (800c244 <tcp_write+0x5a8>)
 800c042:	f240 2271 	movw	r2, #625	; 0x271
 800c046:	4982      	ldr	r1, [pc, #520]	; (800c250 <tcp_write+0x5b4>)
 800c048:	4880      	ldr	r0, [pc, #512]	; (800c24c <tcp_write+0x5b0>)
 800c04a:	f004 f9ef 	bl	801042c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c04e:	8b3b      	ldrh	r3, [r7, #24]
 800c050:	2201      	movs	r2, #1
 800c052:	4619      	mov	r1, r3
 800c054:	2036      	movs	r0, #54	; 0x36
 800c056:	f7fa fd61 	bl	8006b1c <pbuf_alloc>
 800c05a:	6178      	str	r0, [r7, #20]
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 814b 	beq.w	800c2fa <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c064:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	441a      	add	r2, r3
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c070:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c074:	b29b      	uxth	r3, r3
 800c076:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c07a:	4619      	mov	r1, r3
 800c07c:	2036      	movs	r0, #54	; 0x36
 800c07e:	f7fa fd4d 	bl	8006b1c <pbuf_alloc>
 800c082:	6338      	str	r0, [r7, #48]	; 0x30
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	2b00      	cmp	r3, #0
 800c088:	d103      	bne.n	800c092 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c08a:	6978      	ldr	r0, [r7, #20]
 800c08c:	f7fb f826 	bl	80070dc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c090:	e136      	b.n	800c300 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c092:	6979      	ldr	r1, [r7, #20]
 800c094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c096:	f7fb f8e3 	bl	8007260 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c09a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c09c:	f7fb f8a6 	bl	80071ec <pbuf_clen>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c0a8:	4413      	add	r3, r2
 800c0aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c0ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c0b2:	2b09      	cmp	r3, #9
 800c0b4:	d903      	bls.n	800c0be <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c0b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0b8:	f7fb f810 	bl	80070dc <pbuf_free>
      goto memerr;
 800c0bc:	e120      	b.n	800c300 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0c6:	441a      	add	r2, r3
 800c0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f7ff fc4f 	bl	800b978 <tcp_create_segment>
 800c0da:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c0dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 810d 	beq.w	800c2fe <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d102      	bne.n	800c0f0 <tcp_write+0x454>
      queue = seg;
 800c0ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0ec:	647b      	str	r3, [r7, #68]	; 0x44
 800c0ee:	e00c      	b.n	800c10a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c0f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d106      	bne.n	800c104 <tcp_write+0x468>
 800c0f6:	4b53      	ldr	r3, [pc, #332]	; (800c244 <tcp_write+0x5a8>)
 800c0f8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c0fc:	4955      	ldr	r1, [pc, #340]	; (800c254 <tcp_write+0x5b8>)
 800c0fe:	4853      	ldr	r0, [pc, #332]	; (800c24c <tcp_write+0x5b0>)
 800c100:	f004 f994 	bl	801042c <iprintf>
      prev_seg->next = seg;
 800c104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c108:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c10c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c10e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c112:	8b3b      	ldrh	r3, [r7, #24]
 800c114:	4413      	add	r3, r2
 800c116:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800c11a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c11e:	88fb      	ldrh	r3, [r7, #6]
 800c120:	429a      	cmp	r2, r3
 800c122:	f4ff af3d 	bcc.w	800bfa0 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c126:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d02c      	beq.n	800c186 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c132:	e01e      	b.n	800c172 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800c134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c136:	891a      	ldrh	r2, [r3, #8]
 800c138:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c13a:	4413      	add	r3, r2
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c140:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d110      	bne.n	800c16c <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c150:	8952      	ldrh	r2, [r2, #10]
 800c152:	4413      	add	r3, r2
 800c154:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c156:	68b9      	ldr	r1, [r7, #8]
 800c158:	4618      	mov	r0, r3
 800c15a:	f004 f93a 	bl	80103d2 <memcpy>
        p->len += oversize_used;
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	895a      	ldrh	r2, [r3, #10]
 800c162:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c164:	4413      	add	r3, r2
 800c166:	b29a      	uxth	r2, r3
 800c168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1dd      	bne.n	800c134 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800c178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c17a:	891a      	ldrh	r2, [r3, #8]
 800c17c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c17e:	4413      	add	r3, r2
 800c180:	b29a      	uxth	r2, r3
 800c182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c184:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c186:	8a7a      	ldrh	r2, [r7, #18]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c18e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c190:	2b00      	cmp	r3, #0
 800c192:	d018      	beq.n	800c1c6 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c196:	2b00      	cmp	r3, #0
 800c198:	d106      	bne.n	800c1a8 <tcp_write+0x50c>
 800c19a:	4b2a      	ldr	r3, [pc, #168]	; (800c244 <tcp_write+0x5a8>)
 800c19c:	f240 22e1 	movw	r2, #737	; 0x2e1
 800c1a0:	492d      	ldr	r1, [pc, #180]	; (800c258 <tcp_write+0x5bc>)
 800c1a2:	482a      	ldr	r0, [pc, #168]	; (800c24c <tcp_write+0x5b0>)
 800c1a4:	f004 f942 	bl	801042c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fb f856 	bl	8007260 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c1b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1b6:	891a      	ldrh	r2, [r3, #8]
 800c1b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1ba:	891b      	ldrh	r3, [r3, #8]
 800c1bc:	4413      	add	r3, r2
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1c2:	811a      	strh	r2, [r3, #8]
 800c1c4:	e037      	b.n	800c236 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800c1c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d034      	beq.n	800c236 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d003      	beq.n	800c1da <tcp_write+0x53e>
 800c1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d106      	bne.n	800c1e8 <tcp_write+0x54c>
 800c1da:	4b1a      	ldr	r3, [pc, #104]	; (800c244 <tcp_write+0x5a8>)
 800c1dc:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c1e0:	491e      	ldr	r1, [pc, #120]	; (800c25c <tcp_write+0x5c0>)
 800c1e2:	481a      	ldr	r0, [pc, #104]	; (800c24c <tcp_write+0x5b0>)
 800c1e4:	f004 f922 	bl	801042c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1ee:	e009      	b.n	800c204 <tcp_write+0x568>
      p->tot_len += extendlen;
 800c1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f2:	891a      	ldrh	r2, [r3, #8]
 800c1f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c1f6:	4413      	add	r3, r2
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	62bb      	str	r3, [r7, #40]	; 0x28
 800c204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1f1      	bne.n	800c1f0 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800c20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20e:	891a      	ldrh	r2, [r3, #8]
 800c210:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c212:	4413      	add	r3, r2
 800c214:	b29a      	uxth	r2, r3
 800c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c218:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21c:	895a      	ldrh	r2, [r3, #10]
 800c21e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c220:	4413      	add	r3, r2
 800c222:	b29a      	uxth	r2, r3
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c22a:	891a      	ldrh	r2, [r3, #8]
 800c22c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c22e:	4413      	add	r3, r2
 800c230:	b29a      	uxth	r2, r3
 800c232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c234:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d111      	bne.n	800c260 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c240:	66da      	str	r2, [r3, #108]	; 0x6c
 800c242:	e010      	b.n	800c266 <tcp_write+0x5ca>
 800c244:	080136cc 	.word	0x080136cc
 800c248:	0801396c 	.word	0x0801396c
 800c24c:	08013720 	.word	0x08013720
 800c250:	080139ac 	.word	0x080139ac
 800c254:	080139bc 	.word	0x080139bc
 800c258:	080139d0 	.word	0x080139d0
 800c25c:	08013a08 	.word	0x08013a08
  } else {
    last_unsent->next = queue;
 800c260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c264:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c26a:	88fb      	ldrh	r3, [r7, #6]
 800c26c:	441a      	add	r2, r3
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c278:	88fb      	ldrh	r3, [r7, #6]
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c28a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c294:	2b00      	cmp	r3, #0
 800c296:	d00e      	beq.n	800c2b6 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10a      	bne.n	800c2b6 <tcp_write+0x61a>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d106      	bne.n	800c2b6 <tcp_write+0x61a>
 800c2a8:	4b2c      	ldr	r3, [pc, #176]	; (800c35c <tcp_write+0x6c0>)
 800c2aa:	f240 3213 	movw	r2, #787	; 0x313
 800c2ae:	492c      	ldr	r1, [pc, #176]	; (800c360 <tcp_write+0x6c4>)
 800c2b0:	482c      	ldr	r0, [pc, #176]	; (800c364 <tcp_write+0x6c8>)
 800c2b2:	f004 f8bb 	bl	801042c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c2b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d016      	beq.n	800c2ea <tcp_write+0x64e>
 800c2bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d012      	beq.n	800c2ea <tcp_write+0x64e>
 800c2c4:	797b      	ldrb	r3, [r7, #5]
 800c2c6:	f003 0302 	and.w	r3, r3, #2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d10d      	bne.n	800c2ea <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c2ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	899b      	ldrh	r3, [r3, #12]
 800c2d4:	b29c      	uxth	r4, r3
 800c2d6:	2008      	movs	r0, #8
 800c2d8:	f7f9 fc28 	bl	8005b2c <lwip_htons>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	461a      	mov	r2, r3
 800c2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	4322      	orrs	r2, r4
 800c2e6:	b292      	uxth	r2, r2
 800c2e8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e031      	b.n	800c352 <tcp_write+0x6b6>
          goto memerr;
 800c2ee:	bf00      	nop
 800c2f0:	e006      	b.n	800c300 <tcp_write+0x664>
            goto memerr;
 800c2f2:	bf00      	nop
 800c2f4:	e004      	b.n	800c300 <tcp_write+0x664>
        goto memerr;
 800c2f6:	bf00      	nop
 800c2f8:	e002      	b.n	800c300 <tcp_write+0x664>
        goto memerr;
 800c2fa:	bf00      	nop
 800c2fc:	e000      	b.n	800c300 <tcp_write+0x664>
      goto memerr;
 800c2fe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	8b5b      	ldrh	r3, [r3, #26]
 800c304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c308:	b29a      	uxth	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <tcp_write+0x67e>
    pbuf_free(concat_p);
 800c314:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c316:	f7fa fee1 	bl	80070dc <pbuf_free>
  }
  if (queue != NULL) {
 800c31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <tcp_write+0x68a>
    tcp_segs_free(queue);
 800c320:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c322:	f7fc fb89 	bl	8008a38 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00e      	beq.n	800c34e <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10a      	bne.n	800c34e <tcp_write+0x6b2>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d106      	bne.n	800c34e <tcp_write+0x6b2>
 800c340:	4b06      	ldr	r3, [pc, #24]	; (800c35c <tcp_write+0x6c0>)
 800c342:	f44f 724a 	mov.w	r2, #808	; 0x328
 800c346:	4906      	ldr	r1, [pc, #24]	; (800c360 <tcp_write+0x6c4>)
 800c348:	4806      	ldr	r0, [pc, #24]	; (800c364 <tcp_write+0x6c8>)
 800c34a:	f004 f86f 	bl	801042c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c34e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c352:	4618      	mov	r0, r3
 800c354:	375c      	adds	r7, #92	; 0x5c
 800c356:	46bd      	mov	sp, r7
 800c358:	bd90      	pop	{r4, r7, pc}
 800c35a:	bf00      	nop
 800c35c:	080136cc 	.word	0x080136cc
 800c360:	08013a40 	.word	0x08013a40
 800c364:	08013720 	.word	0x08013720

0800c368 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b08b      	sub	sp, #44	; 0x2c
 800c36c:	af02      	add	r7, sp, #8
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	460b      	mov	r3, r1
 800c372:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c374:	2300      	movs	r3, #0
 800c376:	61fb      	str	r3, [r7, #28]
 800c378:	2300      	movs	r3, #0
 800c37a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c37c:	2300      	movs	r3, #0
 800c37e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d106      	bne.n	800c394 <tcp_split_unsent_seg+0x2c>
 800c386:	4b95      	ldr	r3, [pc, #596]	; (800c5dc <tcp_split_unsent_seg+0x274>)
 800c388:	f240 324b 	movw	r2, #843	; 0x34b
 800c38c:	4994      	ldr	r1, [pc, #592]	; (800c5e0 <tcp_split_unsent_seg+0x278>)
 800c38e:	4895      	ldr	r0, [pc, #596]	; (800c5e4 <tcp_split_unsent_seg+0x27c>)
 800c390:	f004 f84c 	bl	801042c <iprintf>

  useg = pcb->unsent;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c398:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a4:	e116      	b.n	800c5d4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c3a6:	887b      	ldrh	r3, [r7, #2]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d109      	bne.n	800c3c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c3ac:	4b8b      	ldr	r3, [pc, #556]	; (800c5dc <tcp_split_unsent_seg+0x274>)
 800c3ae:	f240 3253 	movw	r2, #851	; 0x353
 800c3b2:	498d      	ldr	r1, [pc, #564]	; (800c5e8 <tcp_split_unsent_seg+0x280>)
 800c3b4:	488b      	ldr	r0, [pc, #556]	; (800c5e4 <tcp_split_unsent_seg+0x27c>)
 800c3b6:	f004 f839 	bl	801042c <iprintf>
    return ERR_VAL;
 800c3ba:	f06f 0305 	mvn.w	r3, #5
 800c3be:	e109      	b.n	800c5d4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	891b      	ldrh	r3, [r3, #8]
 800c3c4:	887a      	ldrh	r2, [r7, #2]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d301      	bcc.n	800c3ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e102      	b.n	800c5d4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3d2:	887a      	ldrh	r2, [r7, #2]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d906      	bls.n	800c3e6 <tcp_split_unsent_seg+0x7e>
 800c3d8:	4b80      	ldr	r3, [pc, #512]	; (800c5dc <tcp_split_unsent_seg+0x274>)
 800c3da:	f240 325b 	movw	r2, #859	; 0x35b
 800c3de:	4983      	ldr	r1, [pc, #524]	; (800c5ec <tcp_split_unsent_seg+0x284>)
 800c3e0:	4880      	ldr	r0, [pc, #512]	; (800c5e4 <tcp_split_unsent_seg+0x27c>)
 800c3e2:	f004 f823 	bl	801042c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	891b      	ldrh	r3, [r3, #8]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d106      	bne.n	800c3fc <tcp_split_unsent_seg+0x94>
 800c3ee:	4b7b      	ldr	r3, [pc, #492]	; (800c5dc <tcp_split_unsent_seg+0x274>)
 800c3f0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c3f4:	497e      	ldr	r1, [pc, #504]	; (800c5f0 <tcp_split_unsent_seg+0x288>)
 800c3f6:	487b      	ldr	r0, [pc, #492]	; (800c5e4 <tcp_split_unsent_seg+0x27c>)
 800c3f8:	f004 f818 	bl	801042c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	7a9b      	ldrb	r3, [r3, #10]
 800c400:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c402:	7bfb      	ldrb	r3, [r7, #15]
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	b2db      	uxtb	r3, r3
 800c408:	f003 0304 	and.w	r3, r3, #4
 800c40c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	891a      	ldrh	r2, [r3, #8]
 800c412:	887b      	ldrh	r3, [r7, #2]
 800c414:	1ad3      	subs	r3, r2, r3
 800c416:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c418:	7bbb      	ldrb	r3, [r7, #14]
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	89bb      	ldrh	r3, [r7, #12]
 800c41e:	4413      	add	r3, r2
 800c420:	b29b      	uxth	r3, r3
 800c422:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c426:	4619      	mov	r1, r3
 800c428:	2036      	movs	r0, #54	; 0x36
 800c42a:	f7fa fb77 	bl	8006b1c <pbuf_alloc>
 800c42e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 80b7 	beq.w	800c5a6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	891a      	ldrh	r2, [r3, #8]
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	891b      	ldrh	r3, [r3, #8]
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	b29a      	uxth	r2, r3
 800c446:	887b      	ldrh	r3, [r7, #2]
 800c448:	4413      	add	r3, r2
 800c44a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	6858      	ldr	r0, [r3, #4]
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	7bbb      	ldrb	r3, [r7, #14]
 800c456:	18d1      	adds	r1, r2, r3
 800c458:	897b      	ldrh	r3, [r7, #10]
 800c45a:	89ba      	ldrh	r2, [r7, #12]
 800c45c:	f7fb f828 	bl	80074b0 <pbuf_copy_partial>
 800c460:	4603      	mov	r3, r0
 800c462:	461a      	mov	r2, r3
 800c464:	89bb      	ldrh	r3, [r7, #12]
 800c466:	4293      	cmp	r3, r2
 800c468:	f040 809f 	bne.w	800c5aa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	899b      	ldrh	r3, [r3, #12]
 800c472:	b29b      	uxth	r3, r3
 800c474:	4618      	mov	r0, r3
 800c476:	f7f9 fb59 	bl	8005b2c <lwip_htons>
 800c47a:	4603      	mov	r3, r0
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c482:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c484:	2300      	movs	r3, #0
 800c486:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c488:	7efb      	ldrb	r3, [r7, #27]
 800c48a:	f003 0308 	and.w	r3, r3, #8
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d007      	beq.n	800c4a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c492:	7efb      	ldrb	r3, [r7, #27]
 800c494:	f023 0308 	bic.w	r3, r3, #8
 800c498:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c49a:	7ebb      	ldrb	r3, [r7, #26]
 800c49c:	f043 0308 	orr.w	r3, r3, #8
 800c4a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c4a2:	7efb      	ldrb	r3, [r7, #27]
 800c4a4:	f003 0301 	and.w	r3, r3, #1
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d007      	beq.n	800c4bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c4ac:	7efb      	ldrb	r3, [r7, #27]
 800c4ae:	f023 0301 	bic.w	r3, r3, #1
 800c4b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c4b4:	7ebb      	ldrb	r3, [r7, #26]
 800c4b6:	f043 0301 	orr.w	r3, r3, #1
 800c4ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f9 fb47 	bl	8005b56 <lwip_htonl>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	887b      	ldrh	r3, [r7, #2]
 800c4cc:	18d1      	adds	r1, r2, r3
 800c4ce:	7eba      	ldrb	r2, [r7, #26]
 800c4d0:	7bfb      	ldrb	r3, [r7, #15]
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	6939      	ldr	r1, [r7, #16]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f7ff fa4d 	bl	800b978 <tcp_create_segment>
 800c4de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d063      	beq.n	800c5ae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fa fe7e 	bl	80071ec <pbuf_clen>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4fa:	1a9b      	subs	r3, r3, r2
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	6858      	ldr	r0, [r3, #4]
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	891a      	ldrh	r2, [r3, #8]
 800c50e:	89bb      	ldrh	r3, [r7, #12]
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	b29b      	uxth	r3, r3
 800c514:	4619      	mov	r1, r3
 800c516:	f7fa fc5b 	bl	8006dd0 <pbuf_realloc>
  useg->len -= remainder;
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	891a      	ldrh	r2, [r3, #8]
 800c51e:	89bb      	ldrh	r3, [r7, #12]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	b29a      	uxth	r2, r3
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	899b      	ldrh	r3, [r3, #12]
 800c52e:	b29c      	uxth	r4, r3
 800c530:	7efb      	ldrb	r3, [r7, #27]
 800c532:	b29b      	uxth	r3, r3
 800c534:	4618      	mov	r0, r3
 800c536:	f7f9 faf9 	bl	8005b2c <lwip_htons>
 800c53a:	4603      	mov	r3, r0
 800c53c:	461a      	mov	r2, r3
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	4322      	orrs	r2, r4
 800c544:	b292      	uxth	r2, r2
 800c546:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fa fe4d 	bl	80071ec <pbuf_clen>
 800c552:	4603      	mov	r3, r0
 800c554:	461a      	mov	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c55c:	4413      	add	r3, r2
 800c55e:	b29a      	uxth	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fa fe3e 	bl	80071ec <pbuf_clen>
 800c570:	4603      	mov	r3, r0
 800c572:	461a      	mov	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c57a:	4413      	add	r3, r2
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	69fa      	ldr	r2, [r7, #28]
 800c590:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d103      	bne.n	800c5a2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e016      	b.n	800c5d4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c5a6:	bf00      	nop
 800c5a8:	e002      	b.n	800c5b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c5aa:	bf00      	nop
 800c5ac:	e000      	b.n	800c5b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c5ae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d006      	beq.n	800c5c4 <tcp_split_unsent_seg+0x25c>
 800c5b6:	4b09      	ldr	r3, [pc, #36]	; (800c5dc <tcp_split_unsent_seg+0x274>)
 800c5b8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c5bc:	490d      	ldr	r1, [pc, #52]	; (800c5f4 <tcp_split_unsent_seg+0x28c>)
 800c5be:	4809      	ldr	r0, [pc, #36]	; (800c5e4 <tcp_split_unsent_seg+0x27c>)
 800c5c0:	f003 ff34 	bl	801042c <iprintf>
  if (p != NULL) {
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d002      	beq.n	800c5d0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c5ca:	6938      	ldr	r0, [r7, #16]
 800c5cc:	f7fa fd86 	bl	80070dc <pbuf_free>
  }

  return ERR_MEM;
 800c5d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3724      	adds	r7, #36	; 0x24
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd90      	pop	{r4, r7, pc}
 800c5dc:	080136cc 	.word	0x080136cc
 800c5e0:	08013a60 	.word	0x08013a60
 800c5e4:	08013720 	.word	0x08013720
 800c5e8:	08013a84 	.word	0x08013a84
 800c5ec:	08013aa8 	.word	0x08013aa8
 800c5f0:	08013ab8 	.word	0x08013ab8
 800c5f4:	08013ac8 	.word	0x08013ac8

0800c5f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c5f8:	b590      	push	{r4, r7, lr}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d106      	bne.n	800c614 <tcp_send_fin+0x1c>
 800c606:	4b21      	ldr	r3, [pc, #132]	; (800c68c <tcp_send_fin+0x94>)
 800c608:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c60c:	4920      	ldr	r1, [pc, #128]	; (800c690 <tcp_send_fin+0x98>)
 800c60e:	4821      	ldr	r0, [pc, #132]	; (800c694 <tcp_send_fin+0x9c>)
 800c610:	f003 ff0c 	bl	801042c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d02e      	beq.n	800c67a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c620:	60fb      	str	r3, [r7, #12]
 800c622:	e002      	b.n	800c62a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1f8      	bne.n	800c624 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	899b      	ldrh	r3, [r3, #12]
 800c638:	b29b      	uxth	r3, r3
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7f9 fa76 	bl	8005b2c <lwip_htons>
 800c640:	4603      	mov	r3, r0
 800c642:	b2db      	uxtb	r3, r3
 800c644:	f003 0307 	and.w	r3, r3, #7
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d116      	bne.n	800c67a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	899b      	ldrh	r3, [r3, #12]
 800c652:	b29c      	uxth	r4, r3
 800c654:	2001      	movs	r0, #1
 800c656:	f7f9 fa69 	bl	8005b2c <lwip_htons>
 800c65a:	4603      	mov	r3, r0
 800c65c:	461a      	mov	r2, r3
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	4322      	orrs	r2, r4
 800c664:	b292      	uxth	r2, r2
 800c666:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	8b5b      	ldrh	r3, [r3, #26]
 800c66c:	f043 0320 	orr.w	r3, r3, #32
 800c670:	b29a      	uxth	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	e004      	b.n	800c684 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c67a:	2101      	movs	r1, #1
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 f80b 	bl	800c698 <tcp_enqueue_flags>
 800c682:	4603      	mov	r3, r0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3714      	adds	r7, #20
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd90      	pop	{r4, r7, pc}
 800c68c:	080136cc 	.word	0x080136cc
 800c690:	08013ad4 	.word	0x08013ad4
 800c694:	08013720 	.word	0x08013720

0800c698 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b08a      	sub	sp, #40	; 0x28
 800c69c:	af02      	add	r7, sp, #8
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c6ac:	78fb      	ldrb	r3, [r7, #3]
 800c6ae:	f003 0303 	and.w	r3, r3, #3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d106      	bne.n	800c6c4 <tcp_enqueue_flags+0x2c>
 800c6b6:	4b67      	ldr	r3, [pc, #412]	; (800c854 <tcp_enqueue_flags+0x1bc>)
 800c6b8:	f240 4212 	movw	r2, #1042	; 0x412
 800c6bc:	4966      	ldr	r1, [pc, #408]	; (800c858 <tcp_enqueue_flags+0x1c0>)
 800c6be:	4867      	ldr	r0, [pc, #412]	; (800c85c <tcp_enqueue_flags+0x1c4>)
 800c6c0:	f003 feb4 	bl	801042c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d106      	bne.n	800c6d8 <tcp_enqueue_flags+0x40>
 800c6ca:	4b62      	ldr	r3, [pc, #392]	; (800c854 <tcp_enqueue_flags+0x1bc>)
 800c6cc:	f240 4213 	movw	r2, #1043	; 0x413
 800c6d0:	4963      	ldr	r1, [pc, #396]	; (800c860 <tcp_enqueue_flags+0x1c8>)
 800c6d2:	4862      	ldr	r0, [pc, #392]	; (800c85c <tcp_enqueue_flags+0x1c4>)
 800c6d4:	f003 feaa 	bl	801042c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c6d8:	78fb      	ldrb	r3, [r7, #3]
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d001      	beq.n	800c6e6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c6e6:	7ffb      	ldrb	r3, [r7, #31]
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	f003 0304 	and.w	r3, r3, #4
 800c6f0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c6f2:	7dfb      	ldrb	r3, [r7, #23]
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	2036      	movs	r0, #54	; 0x36
 800c6fe:	f7fa fa0d 	bl	8006b1c <pbuf_alloc>
 800c702:	6138      	str	r0, [r7, #16]
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d109      	bne.n	800c71e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	8b5b      	ldrh	r3, [r3, #26]
 800c70e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c712:	b29a      	uxth	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c718:	f04f 33ff 	mov.w	r3, #4294967295
 800c71c:	e095      	b.n	800c84a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	895a      	ldrh	r2, [r3, #10]
 800c722:	7dfb      	ldrb	r3, [r7, #23]
 800c724:	b29b      	uxth	r3, r3
 800c726:	429a      	cmp	r2, r3
 800c728:	d206      	bcs.n	800c738 <tcp_enqueue_flags+0xa0>
 800c72a:	4b4a      	ldr	r3, [pc, #296]	; (800c854 <tcp_enqueue_flags+0x1bc>)
 800c72c:	f240 423a 	movw	r2, #1082	; 0x43a
 800c730:	494c      	ldr	r1, [pc, #304]	; (800c864 <tcp_enqueue_flags+0x1cc>)
 800c732:	484a      	ldr	r0, [pc, #296]	; (800c85c <tcp_enqueue_flags+0x1c4>)
 800c734:	f003 fe7a 	bl	801042c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c73c:	78fa      	ldrb	r2, [r7, #3]
 800c73e:	7ffb      	ldrb	r3, [r7, #31]
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	460b      	mov	r3, r1
 800c744:	6939      	ldr	r1, [r7, #16]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7ff f916 	bl	800b978 <tcp_create_segment>
 800c74c:	60f8      	str	r0, [r7, #12]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d109      	bne.n	800c768 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	8b5b      	ldrh	r3, [r3, #26]
 800c758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c762:	f04f 33ff 	mov.w	r3, #4294967295
 800c766:	e070      	b.n	800c84a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f003 0303 	and.w	r3, r3, #3
 800c770:	2b00      	cmp	r3, #0
 800c772:	d006      	beq.n	800c782 <tcp_enqueue_flags+0xea>
 800c774:	4b37      	ldr	r3, [pc, #220]	; (800c854 <tcp_enqueue_flags+0x1bc>)
 800c776:	f240 4242 	movw	r2, #1090	; 0x442
 800c77a:	493b      	ldr	r1, [pc, #236]	; (800c868 <tcp_enqueue_flags+0x1d0>)
 800c77c:	4837      	ldr	r0, [pc, #220]	; (800c85c <tcp_enqueue_flags+0x1c4>)
 800c77e:	f003 fe55 	bl	801042c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	891b      	ldrh	r3, [r3, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d006      	beq.n	800c798 <tcp_enqueue_flags+0x100>
 800c78a:	4b32      	ldr	r3, [pc, #200]	; (800c854 <tcp_enqueue_flags+0x1bc>)
 800c78c:	f240 4243 	movw	r2, #1091	; 0x443
 800c790:	4936      	ldr	r1, [pc, #216]	; (800c86c <tcp_enqueue_flags+0x1d4>)
 800c792:	4832      	ldr	r0, [pc, #200]	; (800c85c <tcp_enqueue_flags+0x1c4>)
 800c794:	f003 fe4a 	bl	801042c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d103      	bne.n	800c7a8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	66da      	str	r2, [r3, #108]	; 0x6c
 800c7a6:	e00d      	b.n	800c7c4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7ac:	61bb      	str	r3, [r7, #24]
 800c7ae:	e002      	b.n	800c7b6 <tcp_enqueue_flags+0x11e>
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	61bb      	str	r3, [r7, #24]
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1f8      	bne.n	800c7b0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	68fa      	ldr	r2, [r7, #12]
 800c7c2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c7cc:	78fb      	ldrb	r3, [r7, #3]
 800c7ce:	f003 0302 	and.w	r3, r3, #2
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d104      	bne.n	800c7e0 <tcp_enqueue_flags+0x148>
 800c7d6:	78fb      	ldrb	r3, [r7, #3]
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d004      	beq.n	800c7ea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7e4:	1c5a      	adds	r2, r3, #1
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c7ea:	78fb      	ldrb	r3, [r7, #3]
 800c7ec:	f003 0301 	and.w	r3, r3, #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d006      	beq.n	800c802 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	8b5b      	ldrh	r3, [r3, #26]
 800c7f8:	f043 0320 	orr.w	r3, r3, #32
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	4618      	mov	r0, r3
 800c808:	f7fa fcf0 	bl	80071ec <pbuf_clen>
 800c80c:	4603      	mov	r3, r0
 800c80e:	461a      	mov	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c816:	4413      	add	r3, r2
 800c818:	b29a      	uxth	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00e      	beq.n	800c848 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10a      	bne.n	800c848 <tcp_enqueue_flags+0x1b0>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c836:	2b00      	cmp	r3, #0
 800c838:	d106      	bne.n	800c848 <tcp_enqueue_flags+0x1b0>
 800c83a:	4b06      	ldr	r3, [pc, #24]	; (800c854 <tcp_enqueue_flags+0x1bc>)
 800c83c:	f240 4266 	movw	r2, #1126	; 0x466
 800c840:	490b      	ldr	r1, [pc, #44]	; (800c870 <tcp_enqueue_flags+0x1d8>)
 800c842:	4806      	ldr	r0, [pc, #24]	; (800c85c <tcp_enqueue_flags+0x1c4>)
 800c844:	f003 fdf2 	bl	801042c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3720      	adds	r7, #32
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	080136cc 	.word	0x080136cc
 800c858:	08013af0 	.word	0x08013af0
 800c85c:	08013720 	.word	0x08013720
 800c860:	08013b48 	.word	0x08013b48
 800c864:	08013b68 	.word	0x08013b68
 800c868:	08013ba4 	.word	0x08013ba4
 800c86c:	08013bbc 	.word	0x08013bbc
 800c870:	08013be8 	.word	0x08013be8

0800c874 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c874:	b5b0      	push	{r4, r5, r7, lr}
 800c876:	b08a      	sub	sp, #40	; 0x28
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <tcp_output+0x1c>
 800c882:	4ba0      	ldr	r3, [pc, #640]	; (800cb04 <tcp_output+0x290>)
 800c884:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c888:	499f      	ldr	r1, [pc, #636]	; (800cb08 <tcp_output+0x294>)
 800c88a:	48a0      	ldr	r0, [pc, #640]	; (800cb0c <tcp_output+0x298>)
 800c88c:	f003 fdce 	bl	801042c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	7d1b      	ldrb	r3, [r3, #20]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d106      	bne.n	800c8a6 <tcp_output+0x32>
 800c898:	4b9a      	ldr	r3, [pc, #616]	; (800cb04 <tcp_output+0x290>)
 800c89a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800c89e:	499c      	ldr	r1, [pc, #624]	; (800cb10 <tcp_output+0x29c>)
 800c8a0:	489a      	ldr	r0, [pc, #616]	; (800cb0c <tcp_output+0x298>)
 800c8a2:	f003 fdc3 	bl	801042c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c8a6:	4b9b      	ldr	r3, [pc, #620]	; (800cb14 <tcp_output+0x2a0>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d101      	bne.n	800c8b4 <tcp_output+0x40>
    return ERR_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	e1d2      	b.n	800cc5a <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d203      	bcs.n	800c8cc <tcp_output+0x58>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8ca:	e002      	b.n	800c8d2 <tcp_output+0x5e>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8d2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8d8:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10b      	bne.n	800c8f8 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	8b5b      	ldrh	r3, [r3, #26]
 800c8e4:	f003 0302 	and.w	r3, r3, #2
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	f000 81a9 	beq.w	800cc40 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fdd6 	bl	800d4a0 <tcp_send_empty_ack>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	e1b0      	b.n	800cc5a <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c8f8:	6879      	ldr	r1, [r7, #4]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	461a      	mov	r2, r3
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7ff f81d 	bl	800b940 <tcp_route>
 800c906:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d102      	bne.n	800c914 <tcp_output+0xa0>
    return ERR_RTE;
 800c90e:	f06f 0303 	mvn.w	r3, #3
 800c912:	e1a2      	b.n	800cc5a <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <tcp_output+0xae>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d111      	bne.n	800c946 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d002      	beq.n	800c92e <tcp_output+0xba>
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	3304      	adds	r3, #4
 800c92c:	e000      	b.n	800c930 <tcp_output+0xbc>
 800c92e:	2300      	movs	r3, #0
 800c930:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d102      	bne.n	800c93e <tcp_output+0xca>
      return ERR_RTE;
 800c938:	f06f 0303 	mvn.w	r3, #3
 800c93c:	e18d      	b.n	800cc5a <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7f9 f902 	bl	8005b56 <lwip_htonl>
 800c952:	4602      	mov	r2, r0
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95c:	8912      	ldrh	r2, [r2, #8]
 800c95e:	4413      	add	r3, r2
 800c960:	69ba      	ldr	r2, [r7, #24]
 800c962:	429a      	cmp	r2, r3
 800c964:	d227      	bcs.n	800c9b6 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c96c:	461a      	mov	r2, r3
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	4293      	cmp	r3, r2
 800c972:	d114      	bne.n	800c99e <tcp_output+0x12a>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d110      	bne.n	800c99e <tcp_output+0x12a>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10b      	bne.n	800c99e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2201      	movs	r2, #1
 800c992:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	8b5b      	ldrh	r3, [r3, #26]
 800c9a2:	f003 0302 	and.w	r3, r3, #2
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f000 814c 	beq.w	800cc44 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fd77 	bl	800d4a0 <tcp_send_empty_ack>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	e151      	b.n	800cc5a <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c2:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c9c4:	6a3b      	ldr	r3, [r7, #32]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f000 811b 	beq.w	800cc02 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800c9cc:	e002      	b.n	800c9d4 <tcp_output+0x160>
 800c9ce:	6a3b      	ldr	r3, [r7, #32]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	623b      	str	r3, [r7, #32]
 800c9d4:	6a3b      	ldr	r3, [r7, #32]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1f8      	bne.n	800c9ce <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c9dc:	e111      	b.n	800cc02 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	899b      	ldrh	r3, [r3, #12]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7f9 f8a0 	bl	8005b2c <lwip_htons>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	f003 0304 	and.w	r3, r3, #4
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d006      	beq.n	800ca06 <tcp_output+0x192>
 800c9f8:	4b42      	ldr	r3, [pc, #264]	; (800cb04 <tcp_output+0x290>)
 800c9fa:	f240 5237 	movw	r2, #1335	; 0x537
 800c9fe:	4946      	ldr	r1, [pc, #280]	; (800cb18 <tcp_output+0x2a4>)
 800ca00:	4842      	ldr	r0, [pc, #264]	; (800cb0c <tcp_output+0x298>)
 800ca02:	f003 fd13 	bl	801042c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d01f      	beq.n	800ca4e <tcp_output+0x1da>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	8b5b      	ldrh	r3, [r3, #26]
 800ca12:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d119      	bne.n	800ca4e <tcp_output+0x1da>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00b      	beq.n	800ca3a <tcp_output+0x1c6>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d110      	bne.n	800ca4e <tcp_output+0x1da>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca30:	891a      	ldrh	r2, [r3, #8]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d209      	bcs.n	800ca4e <tcp_output+0x1da>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d004      	beq.n	800ca4e <tcp_output+0x1da>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca4a:	2b08      	cmp	r3, #8
 800ca4c:	d901      	bls.n	800ca52 <tcp_output+0x1de>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e000      	b.n	800ca54 <tcp_output+0x1e0>
 800ca52:	2300      	movs	r3, #0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d106      	bne.n	800ca66 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	8b5b      	ldrh	r3, [r3, #26]
 800ca5c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f000 80e3 	beq.w	800cc2c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	7d1b      	ldrb	r3, [r3, #20]
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d00d      	beq.n	800ca8a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	899b      	ldrh	r3, [r3, #12]
 800ca74:	b29c      	uxth	r4, r3
 800ca76:	2010      	movs	r0, #16
 800ca78:	f7f9 f858 	bl	8005b2c <lwip_htons>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	461a      	mov	r2, r3
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	4322      	orrs	r2, r4
 800ca86:	b292      	uxth	r2, r2
 800ca88:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	6879      	ldr	r1, [r7, #4]
 800ca8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca90:	f000 f908 	bl	800cca4 <tcp_output_segment>
 800ca94:	4603      	mov	r3, r0
 800ca96:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ca98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d009      	beq.n	800cab4 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	8b5b      	ldrh	r3, [r3, #26]
 800caa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	835a      	strh	r2, [r3, #26]
      return err;
 800caae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cab2:	e0d2      	b.n	800cc5a <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	7d1b      	ldrb	r3, [r3, #20]
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	d006      	beq.n	800cad2 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	8b5b      	ldrh	r3, [r3, #26]
 800cac8:	f023 0303 	bic.w	r3, r3, #3
 800cacc:	b29a      	uxth	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	4618      	mov	r0, r3
 800cada:	f7f9 f83c 	bl	8005b56 <lwip_htonl>
 800cade:	4604      	mov	r4, r0
 800cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae2:	891b      	ldrh	r3, [r3, #8]
 800cae4:	461d      	mov	r5, r3
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	899b      	ldrh	r3, [r3, #12]
 800caec:	b29b      	uxth	r3, r3
 800caee:	4618      	mov	r0, r3
 800caf0:	f7f9 f81c 	bl	8005b2c <lwip_htons>
 800caf4:	4603      	mov	r3, r0
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	f003 0303 	and.w	r3, r3, #3
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00d      	beq.n	800cb1c <tcp_output+0x2a8>
 800cb00:	2301      	movs	r3, #1
 800cb02:	e00c      	b.n	800cb1e <tcp_output+0x2aa>
 800cb04:	080136cc 	.word	0x080136cc
 800cb08:	08013c10 	.word	0x08013c10
 800cb0c:	08013720 	.word	0x08013720
 800cb10:	08013c28 	.word	0x08013c28
 800cb14:	20006960 	.word	0x20006960
 800cb18:	08013c50 	.word	0x08013c50
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	442b      	add	r3, r5
 800cb20:	4423      	add	r3, r4
 800cb22:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	1ad3      	subs	r3, r2, r3
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	da02      	bge.n	800cb36 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800cb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb38:	891b      	ldrh	r3, [r3, #8]
 800cb3a:	461c      	mov	r4, r3
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	899b      	ldrh	r3, [r3, #12]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7f8 fff1 	bl	8005b2c <lwip_htons>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	f003 0303 	and.w	r3, r3, #3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <tcp_output+0x2e6>
 800cb56:	2301      	movs	r3, #1
 800cb58:	e000      	b.n	800cb5c <tcp_output+0x2e8>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	4423      	add	r3, r4
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d049      	beq.n	800cbf6 <tcp_output+0x382>
      seg->next = NULL;
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	2200      	movs	r2, #0
 800cb66:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d105      	bne.n	800cb7c <tcp_output+0x308>
        pcb->unacked = seg;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb74:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	623b      	str	r3, [r7, #32]
 800cb7a:	e03f      	b.n	800cbfc <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7f8 ffe7 	bl	8005b56 <lwip_htonl>
 800cb88:	4604      	mov	r4, r0
 800cb8a:	6a3b      	ldr	r3, [r7, #32]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7f8 ffe0 	bl	8005b56 <lwip_htonl>
 800cb96:	4603      	mov	r3, r0
 800cb98:	1ae3      	subs	r3, r4, r3
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	da24      	bge.n	800cbe8 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	3370      	adds	r3, #112	; 0x70
 800cba2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cba4:	e002      	b.n	800cbac <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d011      	beq.n	800cbd8 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7f8 ffca 	bl	8005b56 <lwip_htonl>
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7f8 ffc3 	bl	8005b56 <lwip_htonl>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	dbe6      	blt.n	800cba6 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbde:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbe4:	601a      	str	r2, [r3, #0]
 800cbe6:	e009      	b.n	800cbfc <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cbee:	6a3b      	ldr	r3, [r7, #32]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	623b      	str	r3, [r7, #32]
 800cbf4:	e002      	b.n	800cbfc <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cbf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbf8:	f7fb ff32 	bl	8008a60 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc00:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800cc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d012      	beq.n	800cc2e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7f8 ffa1 	bl	8005b56 <lwip_htonl>
 800cc14:	4602      	mov	r2, r0
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc1e:	8912      	ldrh	r2, [r2, #8]
 800cc20:	4413      	add	r3, r2
  while (seg != NULL &&
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	f4bf aeda 	bcs.w	800c9de <tcp_output+0x16a>
 800cc2a:	e000      	b.n	800cc2e <tcp_output+0x3ba>
      break;
 800cc2c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d108      	bne.n	800cc48 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800cc3e:	e004      	b.n	800cc4a <tcp_output+0x3d6>
    goto output_done;
 800cc40:	bf00      	nop
 800cc42:	e002      	b.n	800cc4a <tcp_output+0x3d6>
    goto output_done;
 800cc44:	bf00      	nop
 800cc46:	e000      	b.n	800cc4a <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cc48:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	8b5b      	ldrh	r3, [r3, #26]
 800cc4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3728      	adds	r7, #40	; 0x28
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bdb0      	pop	{r4, r5, r7, pc}
 800cc62:	bf00      	nop

0800cc64 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d106      	bne.n	800cc80 <tcp_output_segment_busy+0x1c>
 800cc72:	4b09      	ldr	r3, [pc, #36]	; (800cc98 <tcp_output_segment_busy+0x34>)
 800cc74:	f240 529a 	movw	r2, #1434	; 0x59a
 800cc78:	4908      	ldr	r1, [pc, #32]	; (800cc9c <tcp_output_segment_busy+0x38>)
 800cc7a:	4809      	ldr	r0, [pc, #36]	; (800cca0 <tcp_output_segment_busy+0x3c>)
 800cc7c:	f003 fbd6 	bl	801042c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	7b9b      	ldrb	r3, [r3, #14]
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d001      	beq.n	800cc8e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	080136cc 	.word	0x080136cc
 800cc9c:	08013c68 	.word	0x08013c68
 800cca0:	08013720 	.word	0x08013720

0800cca4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cca4:	b5b0      	push	{r4, r5, r7, lr}
 800cca6:	b08c      	sub	sp, #48	; 0x30
 800cca8:	af04      	add	r7, sp, #16
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d106      	bne.n	800ccc4 <tcp_output_segment+0x20>
 800ccb6:	4b64      	ldr	r3, [pc, #400]	; (800ce48 <tcp_output_segment+0x1a4>)
 800ccb8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ccbc:	4963      	ldr	r1, [pc, #396]	; (800ce4c <tcp_output_segment+0x1a8>)
 800ccbe:	4864      	ldr	r0, [pc, #400]	; (800ce50 <tcp_output_segment+0x1ac>)
 800ccc0:	f003 fbb4 	bl	801042c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d106      	bne.n	800ccd8 <tcp_output_segment+0x34>
 800ccca:	4b5f      	ldr	r3, [pc, #380]	; (800ce48 <tcp_output_segment+0x1a4>)
 800cccc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ccd0:	4960      	ldr	r1, [pc, #384]	; (800ce54 <tcp_output_segment+0x1b0>)
 800ccd2:	485f      	ldr	r0, [pc, #380]	; (800ce50 <tcp_output_segment+0x1ac>)
 800ccd4:	f003 fbaa 	bl	801042c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d106      	bne.n	800ccec <tcp_output_segment+0x48>
 800ccde:	4b5a      	ldr	r3, [pc, #360]	; (800ce48 <tcp_output_segment+0x1a4>)
 800cce0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800cce4:	495c      	ldr	r1, [pc, #368]	; (800ce58 <tcp_output_segment+0x1b4>)
 800cce6:	485a      	ldr	r0, [pc, #360]	; (800ce50 <tcp_output_segment+0x1ac>)
 800cce8:	f003 fba0 	bl	801042c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ccec:	68f8      	ldr	r0, [r7, #12]
 800ccee:	f7ff ffb9 	bl	800cc64 <tcp_output_segment_busy>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	e0a0      	b.n	800ce3e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	68dc      	ldr	r4, [r3, #12]
 800cd04:	4610      	mov	r0, r2
 800cd06:	f7f8 ff26 	bl	8005b56 <lwip_htonl>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	68dc      	ldr	r4, [r3, #12]
 800cd16:	4610      	mov	r0, r2
 800cd18:	f7f8 ff08 	bl	8005b2c <lwip_htons>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cd28:	441a      	add	r2, r3
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	3314      	adds	r3, #20
 800cd34:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	7a9b      	ldrb	r3, [r3, #10]
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d015      	beq.n	800cd6e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	3304      	adds	r3, #4
 800cd46:	461a      	mov	r2, r3
 800cd48:	6879      	ldr	r1, [r7, #4]
 800cd4a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cd4e:	f7fc fa33 	bl	80091b8 <tcp_eff_send_mss_netif>
 800cd52:	4603      	mov	r3, r0
 800cd54:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cd56:	8b7b      	ldrh	r3, [r7, #26]
 800cd58:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7f8 fefa 	bl	8005b56 <lwip_htonl>
 800cd62:	4602      	mov	r2, r0
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	3304      	adds	r3, #4
 800cd6c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	da02      	bge.n	800cd7e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10c      	bne.n	800cda0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800cd86:	4b35      	ldr	r3, [pc, #212]	; (800ce5c <tcp_output_segment+0x1b8>)
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7f8 fede 	bl	8005b56 <lwip_htonl>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	461a      	mov	r2, r3
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	1ad3      	subs	r3, r2, r3
 800cdae:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	8959      	ldrh	r1, [r3, #10]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	8b3a      	ldrh	r2, [r7, #24]
 800cdbc:	1a8a      	subs	r2, r1, r2
 800cdbe:	b292      	uxth	r2, r2
 800cdc0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	8919      	ldrh	r1, [r3, #8]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	8b3a      	ldrh	r2, [r7, #24]
 800cdce:	1a8a      	subs	r2, r1, r2
 800cdd0:	b292      	uxth	r2, r2
 800cdd2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	68d2      	ldr	r2, [r2, #12]
 800cddc:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	2200      	movs	r2, #0
 800cde4:	741a      	strb	r2, [r3, #16]
 800cde6:	2200      	movs	r2, #0
 800cde8:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	f103 0214 	add.w	r2, r3, #20
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	7a9b      	ldrb	r3, [r3, #10]
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	f003 0304 	and.w	r3, r3, #4
 800cdfc:	4413      	add	r3, r2
 800cdfe:	69fa      	ldr	r2, [r7, #28]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d006      	beq.n	800ce12 <tcp_output_segment+0x16e>
 800ce04:	4b10      	ldr	r3, [pc, #64]	; (800ce48 <tcp_output_segment+0x1a4>)
 800ce06:	f240 621c 	movw	r2, #1564	; 0x61c
 800ce0a:	4915      	ldr	r1, [pc, #84]	; (800ce60 <tcp_output_segment+0x1bc>)
 800ce0c:	4810      	ldr	r0, [pc, #64]	; (800ce50 <tcp_output_segment+0x1ac>)
 800ce0e:	f003 fb0d 	bl	801042c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6858      	ldr	r0, [r3, #4]
 800ce16:	68b9      	ldr	r1, [r7, #8]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	1d1c      	adds	r4, r3, #4
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	7add      	ldrb	r5, [r3, #11]
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	7a9b      	ldrb	r3, [r3, #10]
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	9202      	str	r2, [sp, #8]
 800ce28:	2206      	movs	r2, #6
 800ce2a:	9201      	str	r2, [sp, #4]
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	462b      	mov	r3, r5
 800ce30:	4622      	mov	r2, r4
 800ce32:	f002 fa77 	bl	800f324 <ip4_output_if>
 800ce36:	4603      	mov	r3, r0
 800ce38:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ce3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3720      	adds	r7, #32
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bdb0      	pop	{r4, r5, r7, pc}
 800ce46:	bf00      	nop
 800ce48:	080136cc 	.word	0x080136cc
 800ce4c:	08013c90 	.word	0x08013c90
 800ce50:	08013720 	.word	0x08013720
 800ce54:	08013cb0 	.word	0x08013cb0
 800ce58:	08013cd0 	.word	0x08013cd0
 800ce5c:	20006950 	.word	0x20006950
 800ce60:	08013cf4 	.word	0x08013cf4

0800ce64 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ce64:	b5b0      	push	{r4, r5, r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d106      	bne.n	800ce80 <tcp_rexmit_rto_prepare+0x1c>
 800ce72:	4b31      	ldr	r3, [pc, #196]	; (800cf38 <tcp_rexmit_rto_prepare+0xd4>)
 800ce74:	f240 6263 	movw	r2, #1635	; 0x663
 800ce78:	4930      	ldr	r1, [pc, #192]	; (800cf3c <tcp_rexmit_rto_prepare+0xd8>)
 800ce7a:	4831      	ldr	r0, [pc, #196]	; (800cf40 <tcp_rexmit_rto_prepare+0xdc>)
 800ce7c:	f003 fad6 	bl	801042c <iprintf>

  if (pcb->unacked == NULL) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d102      	bne.n	800ce8e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ce88:	f06f 0305 	mvn.w	r3, #5
 800ce8c:	e050      	b.n	800cf30 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce92:	60fb      	str	r3, [r7, #12]
 800ce94:	e00b      	b.n	800ceae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f7ff fee4 	bl	800cc64 <tcp_output_segment_busy>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cea2:	f06f 0305 	mvn.w	r3, #5
 800cea6:	e043      	b.n	800cf30 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	60fb      	str	r3, [r7, #12]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1ef      	bne.n	800ce96 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f7ff fed4 	bl	800cc64 <tcp_output_segment_busy>
 800cebc:	4603      	mov	r3, r0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cec2:	f06f 0305 	mvn.w	r3, #5
 800cec6:	e033      	b.n	800cf30 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	8b5b      	ldrh	r3, [r3, #26]
 800cee2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cee6:	b29a      	uxth	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7f8 fe2f 	bl	8005b56 <lwip_htonl>
 800cef8:	4604      	mov	r4, r0
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	891b      	ldrh	r3, [r3, #8]
 800cefe:	461d      	mov	r5, r3
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	899b      	ldrh	r3, [r3, #12]
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7f8 fe0f 	bl	8005b2c <lwip_htons>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	f003 0303 	and.w	r3, r3, #3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <tcp_rexmit_rto_prepare+0xba>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e000      	b.n	800cf20 <tcp_rexmit_rto_prepare+0xbc>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	442b      	add	r3, r5
 800cf22:	18e2      	adds	r2, r4, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3710      	adds	r7, #16
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bdb0      	pop	{r4, r5, r7, pc}
 800cf38:	080136cc 	.word	0x080136cc
 800cf3c:	08013d08 	.word	0x08013d08
 800cf40:	08013720 	.word	0x08013720

0800cf44 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d106      	bne.n	800cf60 <tcp_rexmit_rto_commit+0x1c>
 800cf52:	4b0d      	ldr	r3, [pc, #52]	; (800cf88 <tcp_rexmit_rto_commit+0x44>)
 800cf54:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cf58:	490c      	ldr	r1, [pc, #48]	; (800cf8c <tcp_rexmit_rto_commit+0x48>)
 800cf5a:	480d      	ldr	r0, [pc, #52]	; (800cf90 <tcp_rexmit_rto_commit+0x4c>)
 800cf5c:	f003 fa66 	bl	801042c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf66:	2bff      	cmp	r3, #255	; 0xff
 800cf68:	d007      	beq.n	800cf7a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf70:	3301      	adds	r3, #1
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f7ff fc7a 	bl	800c874 <tcp_output>
}
 800cf80:	bf00      	nop
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	080136cc 	.word	0x080136cc
 800cf8c:	08013d2c 	.word	0x08013d2c
 800cf90:	08013720 	.word	0x08013720

0800cf94 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d106      	bne.n	800cfb0 <tcp_rexmit_rto+0x1c>
 800cfa2:	4b0a      	ldr	r3, [pc, #40]	; (800cfcc <tcp_rexmit_rto+0x38>)
 800cfa4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cfa8:	4909      	ldr	r1, [pc, #36]	; (800cfd0 <tcp_rexmit_rto+0x3c>)
 800cfaa:	480a      	ldr	r0, [pc, #40]	; (800cfd4 <tcp_rexmit_rto+0x40>)
 800cfac:	f003 fa3e 	bl	801042c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7ff ff57 	bl	800ce64 <tcp_rexmit_rto_prepare>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d102      	bne.n	800cfc2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7ff ffc1 	bl	800cf44 <tcp_rexmit_rto_commit>
  }
}
 800cfc2:	bf00      	nop
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	080136cc 	.word	0x080136cc
 800cfd0:	08013d50 	.word	0x08013d50
 800cfd4:	08013720 	.word	0x08013720

0800cfd8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cfd8:	b590      	push	{r4, r7, lr}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d106      	bne.n	800cff4 <tcp_rexmit+0x1c>
 800cfe6:	4b2f      	ldr	r3, [pc, #188]	; (800d0a4 <tcp_rexmit+0xcc>)
 800cfe8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cfec:	492e      	ldr	r1, [pc, #184]	; (800d0a8 <tcp_rexmit+0xd0>)
 800cfee:	482f      	ldr	r0, [pc, #188]	; (800d0ac <tcp_rexmit+0xd4>)
 800cff0:	f003 fa1c 	bl	801042c <iprintf>

  if (pcb->unacked == NULL) {
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d102      	bne.n	800d002 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cffc:	f06f 0305 	mvn.w	r3, #5
 800d000:	e04c      	b.n	800d09c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d006:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d008:	68b8      	ldr	r0, [r7, #8]
 800d00a:	f7ff fe2b 	bl	800cc64 <tcp_output_segment_busy>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d002      	beq.n	800d01a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d014:	f06f 0305 	mvn.w	r3, #5
 800d018:	e040      	b.n	800d09c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	336c      	adds	r3, #108	; 0x6c
 800d026:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d028:	e002      	b.n	800d030 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d011      	beq.n	800d05c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	4618      	mov	r0, r3
 800d042:	f7f8 fd88 	bl	8005b56 <lwip_htonl>
 800d046:	4604      	mov	r4, r0
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	4618      	mov	r0, r3
 800d050:	f7f8 fd81 	bl	8005b56 <lwip_htonl>
 800d054:	4603      	mov	r3, r0
 800d056:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d058:	2b00      	cmp	r3, #0
 800d05a:	dbe6      	blt.n	800d02a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d103      	bne.n	800d07a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d080:	2bff      	cmp	r3, #255	; 0xff
 800d082:	d007      	beq.n	800d094 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d08a:	3301      	adds	r3, #1
 800d08c:	b2da      	uxtb	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd90      	pop	{r4, r7, pc}
 800d0a4:	080136cc 	.word	0x080136cc
 800d0a8:	08013d6c 	.word	0x08013d6c
 800d0ac:	08013720 	.word	0x08013720

0800d0b0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d106      	bne.n	800d0cc <tcp_rexmit_fast+0x1c>
 800d0be:	4b2e      	ldr	r3, [pc, #184]	; (800d178 <tcp_rexmit_fast+0xc8>)
 800d0c0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d0c4:	492d      	ldr	r1, [pc, #180]	; (800d17c <tcp_rexmit_fast+0xcc>)
 800d0c6:	482e      	ldr	r0, [pc, #184]	; (800d180 <tcp_rexmit_fast+0xd0>)
 800d0c8:	f003 f9b0 	bl	801042c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d04d      	beq.n	800d170 <tcp_rexmit_fast+0xc0>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	8b5b      	ldrh	r3, [r3, #26]
 800d0d8:	f003 0304 	and.w	r3, r3, #4
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d147      	bne.n	800d170 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff ff79 	bl	800cfd8 <tcp_rexmit>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d141      	bne.n	800d170 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d207      	bcs.n	800d10c <tcp_rexmit_fast+0x5c>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d102:	0fda      	lsrs	r2, r3, #31
 800d104:	4413      	add	r3, r2
 800d106:	105b      	asrs	r3, r3, #1
 800d108:	b29b      	uxth	r3, r3
 800d10a:	e006      	b.n	800d11a <tcp_rexmit_fast+0x6a>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d112:	0fda      	lsrs	r2, r3, #31
 800d114:	4413      	add	r3, r2
 800d116:	105b      	asrs	r3, r3, #1
 800d118:	b29b      	uxth	r3, r3
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d126:	461a      	mov	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	429a      	cmp	r2, r3
 800d130:	d206      	bcs.n	800d140 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d136:	005b      	lsls	r3, r3, #1
 800d138:	b29a      	uxth	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d14a:	4619      	mov	r1, r3
 800d14c:	0049      	lsls	r1, r1, #1
 800d14e:	440b      	add	r3, r1
 800d150:	b29b      	uxth	r3, r3
 800d152:	4413      	add	r3, r2
 800d154:	b29a      	uxth	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	8b5b      	ldrh	r3, [r3, #26]
 800d160:	f043 0304 	orr.w	r3, r3, #4
 800d164:	b29a      	uxth	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d170:	bf00      	nop
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	080136cc 	.word	0x080136cc
 800d17c:	08013d84 	.word	0x08013d84
 800d180:	08013720 	.word	0x08013720

0800d184 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b086      	sub	sp, #24
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	607b      	str	r3, [r7, #4]
 800d18e:	460b      	mov	r3, r1
 800d190:	817b      	strh	r3, [r7, #10]
 800d192:	4613      	mov	r3, r2
 800d194:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d196:	897a      	ldrh	r2, [r7, #10]
 800d198:	893b      	ldrh	r3, [r7, #8]
 800d19a:	4413      	add	r3, r2
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	3314      	adds	r3, #20
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	2022      	movs	r0, #34	; 0x22
 800d1aa:	f7f9 fcb7 	bl	8006b1c <pbuf_alloc>
 800d1ae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d04e      	beq.n	800d254 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	895b      	ldrh	r3, [r3, #10]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	897b      	ldrh	r3, [r7, #10]
 800d1be:	3314      	adds	r3, #20
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	da06      	bge.n	800d1d2 <tcp_output_alloc_header_common+0x4e>
 800d1c4:	4b26      	ldr	r3, [pc, #152]	; (800d260 <tcp_output_alloc_header_common+0xdc>)
 800d1c6:	f240 7224 	movw	r2, #1828	; 0x724
 800d1ca:	4926      	ldr	r1, [pc, #152]	; (800d264 <tcp_output_alloc_header_common+0xe0>)
 800d1cc:	4826      	ldr	r0, [pc, #152]	; (800d268 <tcp_output_alloc_header_common+0xe4>)
 800d1ce:	f003 f92d 	bl	801042c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d1d8:	8c3b      	ldrh	r3, [r7, #32]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7f8 fca6 	bl	8005b2c <lwip_htons>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d1e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7f8 fc9e 	bl	8005b2c <lwip_htons>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d1fe:	68f8      	ldr	r0, [r7, #12]
 800d200:	f7f8 fca9 	bl	8005b56 <lwip_htonl>
 800d204:	4602      	mov	r2, r0
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d20a:	897b      	ldrh	r3, [r7, #10]
 800d20c:	089b      	lsrs	r3, r3, #2
 800d20e:	b29b      	uxth	r3, r3
 800d210:	3305      	adds	r3, #5
 800d212:	b29b      	uxth	r3, r3
 800d214:	031b      	lsls	r3, r3, #12
 800d216:	b29a      	uxth	r2, r3
 800d218:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	4313      	orrs	r3, r2
 800d220:	b29b      	uxth	r3, r3
 800d222:	4618      	mov	r0, r3
 800d224:	f7f8 fc82 	bl	8005b2c <lwip_htons>
 800d228:	4603      	mov	r3, r0
 800d22a:	461a      	mov	r2, r3
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d230:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d232:	4618      	mov	r0, r3
 800d234:	f7f8 fc7a 	bl	8005b2c <lwip_htons>
 800d238:	4603      	mov	r3, r0
 800d23a:	461a      	mov	r2, r3
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	2200      	movs	r2, #0
 800d244:	741a      	strb	r2, [r3, #16]
 800d246:	2200      	movs	r2, #0
 800d248:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	2200      	movs	r2, #0
 800d24e:	749a      	strb	r2, [r3, #18]
 800d250:	2200      	movs	r2, #0
 800d252:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d254:	697b      	ldr	r3, [r7, #20]
}
 800d256:	4618      	mov	r0, r3
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	080136cc 	.word	0x080136cc
 800d264:	08013da4 	.word	0x08013da4
 800d268:	08013720 	.word	0x08013720

0800d26c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d26c:	b5b0      	push	{r4, r5, r7, lr}
 800d26e:	b08a      	sub	sp, #40	; 0x28
 800d270:	af04      	add	r7, sp, #16
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	607b      	str	r3, [r7, #4]
 800d276:	460b      	mov	r3, r1
 800d278:	817b      	strh	r3, [r7, #10]
 800d27a:	4613      	mov	r3, r2
 800d27c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d106      	bne.n	800d292 <tcp_output_alloc_header+0x26>
 800d284:	4b15      	ldr	r3, [pc, #84]	; (800d2dc <tcp_output_alloc_header+0x70>)
 800d286:	f240 7242 	movw	r2, #1858	; 0x742
 800d28a:	4915      	ldr	r1, [pc, #84]	; (800d2e0 <tcp_output_alloc_header+0x74>)
 800d28c:	4815      	ldr	r0, [pc, #84]	; (800d2e4 <tcp_output_alloc_header+0x78>)
 800d28e:	f003 f8cd 	bl	801042c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	8adb      	ldrh	r3, [r3, #22]
 800d29a:	68fa      	ldr	r2, [r7, #12]
 800d29c:	8b12      	ldrh	r2, [r2, #24]
 800d29e:	68f9      	ldr	r1, [r7, #12]
 800d2a0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d2a2:	893d      	ldrh	r5, [r7, #8]
 800d2a4:	897c      	ldrh	r4, [r7, #10]
 800d2a6:	9103      	str	r1, [sp, #12]
 800d2a8:	2110      	movs	r1, #16
 800d2aa:	9102      	str	r1, [sp, #8]
 800d2ac:	9201      	str	r2, [sp, #4]
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	462a      	mov	r2, r5
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	f7ff ff65 	bl	800d184 <tcp_output_alloc_header_common>
 800d2ba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d006      	beq.n	800d2d0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c6:	68fa      	ldr	r2, [r7, #12]
 800d2c8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d2ca:	441a      	add	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d2d0:	697b      	ldr	r3, [r7, #20]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3718      	adds	r7, #24
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bdb0      	pop	{r4, r5, r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	080136cc 	.word	0x080136cc
 800d2e0:	08013dd4 	.word	0x08013dd4
 800d2e4:	08013720 	.word	0x08013720

0800d2e8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b088      	sub	sp, #32
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	4611      	mov	r1, r2
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	71fb      	strb	r3, [r7, #7]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d106      	bne.n	800d316 <tcp_output_fill_options+0x2e>
 800d308:	4b13      	ldr	r3, [pc, #76]	; (800d358 <tcp_output_fill_options+0x70>)
 800d30a:	f240 7256 	movw	r2, #1878	; 0x756
 800d30e:	4913      	ldr	r1, [pc, #76]	; (800d35c <tcp_output_fill_options+0x74>)
 800d310:	4813      	ldr	r0, [pc, #76]	; (800d360 <tcp_output_fill_options+0x78>)
 800d312:	f003 f88b 	bl	801042c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d31c:	69bb      	ldr	r3, [r7, #24]
 800d31e:	3314      	adds	r3, #20
 800d320:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	f103 0214 	add.w	r2, r3, #20
 800d328:	8bfb      	ldrh	r3, [r7, #30]
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4619      	mov	r1, r3
 800d32e:	79fb      	ldrb	r3, [r7, #7]
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	f003 0304 	and.w	r3, r3, #4
 800d336:	440b      	add	r3, r1
 800d338:	4413      	add	r3, r2
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d006      	beq.n	800d34e <tcp_output_fill_options+0x66>
 800d340:	4b05      	ldr	r3, [pc, #20]	; (800d358 <tcp_output_fill_options+0x70>)
 800d342:	f240 7275 	movw	r2, #1909	; 0x775
 800d346:	4907      	ldr	r1, [pc, #28]	; (800d364 <tcp_output_fill_options+0x7c>)
 800d348:	4805      	ldr	r0, [pc, #20]	; (800d360 <tcp_output_fill_options+0x78>)
 800d34a:	f003 f86f 	bl	801042c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d34e:	bf00      	nop
 800d350:	3720      	adds	r7, #32
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	080136cc 	.word	0x080136cc
 800d35c:	08013dfc 	.word	0x08013dfc
 800d360:	08013720 	.word	0x08013720
 800d364:	08013cf4 	.word	0x08013cf4

0800d368 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b08a      	sub	sp, #40	; 0x28
 800d36c:	af04      	add	r7, sp, #16
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
 800d374:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d106      	bne.n	800d38a <tcp_output_control_segment+0x22>
 800d37c:	4b1c      	ldr	r3, [pc, #112]	; (800d3f0 <tcp_output_control_segment+0x88>)
 800d37e:	f240 7287 	movw	r2, #1927	; 0x787
 800d382:	491c      	ldr	r1, [pc, #112]	; (800d3f4 <tcp_output_control_segment+0x8c>)
 800d384:	481c      	ldr	r0, [pc, #112]	; (800d3f8 <tcp_output_control_segment+0x90>)
 800d386:	f003 f851 	bl	801042c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	6879      	ldr	r1, [r7, #4]
 800d38e:	68f8      	ldr	r0, [r7, #12]
 800d390:	f7fe fad6 	bl	800b940 <tcp_route>
 800d394:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d102      	bne.n	800d3a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d39c:	23fc      	movs	r3, #252	; 0xfc
 800d39e:	75fb      	strb	r3, [r7, #23]
 800d3a0:	e01c      	b.n	800d3dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d006      	beq.n	800d3b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	7adb      	ldrb	r3, [r3, #11]
 800d3ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	7a9b      	ldrb	r3, [r3, #10]
 800d3b2:	757b      	strb	r3, [r7, #21]
 800d3b4:	e003      	b.n	800d3be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d3b6:	23ff      	movs	r3, #255	; 0xff
 800d3b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d3be:	7dba      	ldrb	r2, [r7, #22]
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	9302      	str	r3, [sp, #8]
 800d3c4:	2306      	movs	r3, #6
 800d3c6:	9301      	str	r3, [sp, #4]
 800d3c8:	7d7b      	ldrb	r3, [r7, #21]
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	683a      	ldr	r2, [r7, #0]
 800d3d0:	6879      	ldr	r1, [r7, #4]
 800d3d2:	68b8      	ldr	r0, [r7, #8]
 800d3d4:	f001 ffa6 	bl	800f324 <ip4_output_if>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d3dc:	68b8      	ldr	r0, [r7, #8]
 800d3de:	f7f9 fe7d 	bl	80070dc <pbuf_free>
  return err;
 800d3e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3718      	adds	r7, #24
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	080136cc 	.word	0x080136cc
 800d3f4:	08013e24 	.word	0x08013e24
 800d3f8:	08013720 	.word	0x08013720

0800d3fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d3fc:	b590      	push	{r4, r7, lr}
 800d3fe:	b08b      	sub	sp, #44	; 0x2c
 800d400:	af04      	add	r7, sp, #16
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d106      	bne.n	800d41e <tcp_rst+0x22>
 800d410:	4b1f      	ldr	r3, [pc, #124]	; (800d490 <tcp_rst+0x94>)
 800d412:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d416:	491f      	ldr	r1, [pc, #124]	; (800d494 <tcp_rst+0x98>)
 800d418:	481f      	ldr	r0, [pc, #124]	; (800d498 <tcp_rst+0x9c>)
 800d41a:	f003 f807 	bl	801042c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d420:	2b00      	cmp	r3, #0
 800d422:	d106      	bne.n	800d432 <tcp_rst+0x36>
 800d424:	4b1a      	ldr	r3, [pc, #104]	; (800d490 <tcp_rst+0x94>)
 800d426:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d42a:	491c      	ldr	r1, [pc, #112]	; (800d49c <tcp_rst+0xa0>)
 800d42c:	481a      	ldr	r0, [pc, #104]	; (800d498 <tcp_rst+0x9c>)
 800d42e:	f002 fffd 	bl	801042c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d432:	2300      	movs	r3, #0
 800d434:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d436:	f246 0308 	movw	r3, #24584	; 0x6008
 800d43a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d43c:	7dfb      	ldrb	r3, [r7, #23]
 800d43e:	b29c      	uxth	r4, r3
 800d440:	68b8      	ldr	r0, [r7, #8]
 800d442:	f7f8 fb88 	bl	8005b56 <lwip_htonl>
 800d446:	4602      	mov	r2, r0
 800d448:	8abb      	ldrh	r3, [r7, #20]
 800d44a:	9303      	str	r3, [sp, #12]
 800d44c:	2314      	movs	r3, #20
 800d44e:	9302      	str	r3, [sp, #8]
 800d450:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d452:	9301      	str	r3, [sp, #4]
 800d454:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	4613      	mov	r3, r2
 800d45a:	2200      	movs	r2, #0
 800d45c:	4621      	mov	r1, r4
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7ff fe90 	bl	800d184 <tcp_output_alloc_header_common>
 800d464:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00c      	beq.n	800d486 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d46c:	7dfb      	ldrb	r3, [r7, #23]
 800d46e:	2200      	movs	r2, #0
 800d470:	6939      	ldr	r1, [r7, #16]
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f7ff ff38 	bl	800d2e8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	6939      	ldr	r1, [r7, #16]
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f7ff ff72 	bl	800d368 <tcp_output_control_segment>
 800d484:	e000      	b.n	800d488 <tcp_rst+0x8c>
    return;
 800d486:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d488:	371c      	adds	r7, #28
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd90      	pop	{r4, r7, pc}
 800d48e:	bf00      	nop
 800d490:	080136cc 	.word	0x080136cc
 800d494:	08013e50 	.word	0x08013e50
 800d498:	08013720 	.word	0x08013720
 800d49c:	08013e6c 	.word	0x08013e6c

0800d4a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d4a0:	b590      	push	{r4, r7, lr}
 800d4a2:	b087      	sub	sp, #28
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d106      	bne.n	800d4c4 <tcp_send_empty_ack+0x24>
 800d4b6:	4b28      	ldr	r3, [pc, #160]	; (800d558 <tcp_send_empty_ack+0xb8>)
 800d4b8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d4bc:	4927      	ldr	r1, [pc, #156]	; (800d55c <tcp_send_empty_ack+0xbc>)
 800d4be:	4828      	ldr	r0, [pc, #160]	; (800d560 <tcp_send_empty_ack+0xc0>)
 800d4c0:	f002 ffb4 	bl	801042c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d4c4:	7dfb      	ldrb	r3, [r7, #23]
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	f003 0304 	and.w	r3, r3, #4
 800d4ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d4d0:	7d7b      	ldrb	r3, [r7, #21]
 800d4d2:	b29c      	uxth	r4, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7f8 fb3c 	bl	8005b56 <lwip_htonl>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff fec1 	bl	800d26c <tcp_output_alloc_header>
 800d4ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d109      	bne.n	800d506 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	8b5b      	ldrh	r3, [r3, #26]
 800d4f6:	f043 0303 	orr.w	r3, r3, #3
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d500:	f06f 0301 	mvn.w	r3, #1
 800d504:	e023      	b.n	800d54e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d506:	7dbb      	ldrb	r3, [r7, #22]
 800d508:	7dfa      	ldrb	r2, [r7, #23]
 800d50a:	6939      	ldr	r1, [r7, #16]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7ff feeb 	bl	800d2e8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	3304      	adds	r3, #4
 800d518:	6939      	ldr	r1, [r7, #16]
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7ff ff24 	bl	800d368 <tcp_output_control_segment>
 800d520:	4603      	mov	r3, r0
 800d522:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d007      	beq.n	800d53c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	8b5b      	ldrh	r3, [r3, #26]
 800d530:	f043 0303 	orr.w	r3, r3, #3
 800d534:	b29a      	uxth	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	835a      	strh	r2, [r3, #26]
 800d53a:	e006      	b.n	800d54a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	8b5b      	ldrh	r3, [r3, #26]
 800d540:	f023 0303 	bic.w	r3, r3, #3
 800d544:	b29a      	uxth	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d54a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	371c      	adds	r7, #28
 800d552:	46bd      	mov	sp, r7
 800d554:	bd90      	pop	{r4, r7, pc}
 800d556:	bf00      	nop
 800d558:	080136cc 	.word	0x080136cc
 800d55c:	08013e88 	.word	0x08013e88
 800d560:	08013720 	.word	0x08013720

0800d564 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d564:	b590      	push	{r4, r7, lr}
 800d566:	b087      	sub	sp, #28
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d56c:	2300      	movs	r3, #0
 800d56e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d106      	bne.n	800d584 <tcp_keepalive+0x20>
 800d576:	4b18      	ldr	r3, [pc, #96]	; (800d5d8 <tcp_keepalive+0x74>)
 800d578:	f640 0224 	movw	r2, #2084	; 0x824
 800d57c:	4917      	ldr	r1, [pc, #92]	; (800d5dc <tcp_keepalive+0x78>)
 800d57e:	4818      	ldr	r0, [pc, #96]	; (800d5e0 <tcp_keepalive+0x7c>)
 800d580:	f002 ff54 	bl	801042c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d584:	7dfb      	ldrb	r3, [r7, #23]
 800d586:	b29c      	uxth	r4, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d58c:	3b01      	subs	r3, #1
 800d58e:	4618      	mov	r0, r3
 800d590:	f7f8 fae1 	bl	8005b56 <lwip_htonl>
 800d594:	4603      	mov	r3, r0
 800d596:	2200      	movs	r2, #0
 800d598:	4621      	mov	r1, r4
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7ff fe66 	bl	800d26c <tcp_output_alloc_header>
 800d5a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d102      	bne.n	800d5ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ac:	e010      	b.n	800d5d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d5ae:	7dfb      	ldrb	r3, [r7, #23]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	6939      	ldr	r1, [r7, #16]
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f7ff fe97 	bl	800d2e8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	3304      	adds	r3, #4
 800d5c0:	6939      	ldr	r1, [r7, #16]
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f7ff fed0 	bl	800d368 <tcp_output_control_segment>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d5cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	371c      	adds	r7, #28
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd90      	pop	{r4, r7, pc}
 800d5d8:	080136cc 	.word	0x080136cc
 800d5dc:	08013ea8 	.word	0x08013ea8
 800d5e0:	08013720 	.word	0x08013720

0800d5e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d5e4:	b590      	push	{r4, r7, lr}
 800d5e6:	b08b      	sub	sp, #44	; 0x2c
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d106      	bne.n	800d606 <tcp_zero_window_probe+0x22>
 800d5f8:	4b4c      	ldr	r3, [pc, #304]	; (800d72c <tcp_zero_window_probe+0x148>)
 800d5fa:	f640 024f 	movw	r2, #2127	; 0x84f
 800d5fe:	494c      	ldr	r1, [pc, #304]	; (800d730 <tcp_zero_window_probe+0x14c>)
 800d600:	484c      	ldr	r0, [pc, #304]	; (800d734 <tcp_zero_window_probe+0x150>)
 800d602:	f002 ff13 	bl	801042c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d60a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	e086      	b.n	800d724 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d61c:	2bff      	cmp	r3, #255	; 0xff
 800d61e:	d007      	beq.n	800d630 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d626:	3301      	adds	r3, #1
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d630:	6a3b      	ldr	r3, [r7, #32]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	899b      	ldrh	r3, [r3, #12]
 800d636:	b29b      	uxth	r3, r3
 800d638:	4618      	mov	r0, r3
 800d63a:	f7f8 fa77 	bl	8005b2c <lwip_htons>
 800d63e:	4603      	mov	r3, r0
 800d640:	b2db      	uxtb	r3, r3
 800d642:	f003 0301 	and.w	r3, r3, #1
 800d646:	2b00      	cmp	r3, #0
 800d648:	d005      	beq.n	800d656 <tcp_zero_window_probe+0x72>
 800d64a:	6a3b      	ldr	r3, [r7, #32]
 800d64c:	891b      	ldrh	r3, [r3, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d101      	bne.n	800d656 <tcp_zero_window_probe+0x72>
 800d652:	2301      	movs	r3, #1
 800d654:	e000      	b.n	800d658 <tcp_zero_window_probe+0x74>
 800d656:	2300      	movs	r3, #0
 800d658:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d65a:	7ffb      	ldrb	r3, [r7, #31]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	bf0c      	ite	eq
 800d660:	2301      	moveq	r3, #1
 800d662:	2300      	movne	r3, #0
 800d664:	b2db      	uxtb	r3, r3
 800d666:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d66c:	b299      	uxth	r1, r3
 800d66e:	6a3b      	ldr	r3, [r7, #32]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	8bba      	ldrh	r2, [r7, #28]
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f7ff fdf8 	bl	800d26c <tcp_output_alloc_header>
 800d67c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d102      	bne.n	800d68a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d684:	f04f 33ff 	mov.w	r3, #4294967295
 800d688:	e04c      	b.n	800d724 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d68a:	69bb      	ldr	r3, [r7, #24]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d690:	7ffb      	ldrb	r3, [r7, #31]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d011      	beq.n	800d6ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	899b      	ldrh	r3, [r3, #12]
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	b21b      	sxth	r3, r3
 800d69e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d6a2:	b21c      	sxth	r4, r3
 800d6a4:	2011      	movs	r0, #17
 800d6a6:	f7f8 fa41 	bl	8005b2c <lwip_htons>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	b21b      	sxth	r3, r3
 800d6ae:	4323      	orrs	r3, r4
 800d6b0:	b21b      	sxth	r3, r3
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	819a      	strh	r2, [r3, #12]
 800d6b8:	e010      	b.n	800d6dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	3314      	adds	r3, #20
 800d6c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	6858      	ldr	r0, [r3, #4]
 800d6c6:	6a3b      	ldr	r3, [r7, #32]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	891a      	ldrh	r2, [r3, #8]
 800d6cc:	6a3b      	ldr	r3, [r7, #32]
 800d6ce:	891b      	ldrh	r3, [r3, #8]
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	6939      	ldr	r1, [r7, #16]
 800d6d8:	f7f9 feea 	bl	80074b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7f8 fa37 	bl	8005b56 <lwip_htonl>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	1ad3      	subs	r3, r2, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	da02      	bge.n	800d700 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	68fa      	ldr	r2, [r7, #12]
 800d6fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d704:	2200      	movs	r2, #0
 800d706:	69b9      	ldr	r1, [r7, #24]
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7ff fded 	bl	800d2e8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	3304      	adds	r3, #4
 800d714:	69b9      	ldr	r1, [r7, #24]
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7ff fe26 	bl	800d368 <tcp_output_control_segment>
 800d71c:	4603      	mov	r3, r0
 800d71e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d720:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d724:	4618      	mov	r0, r3
 800d726:	372c      	adds	r7, #44	; 0x2c
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd90      	pop	{r4, r7, pc}
 800d72c:	080136cc 	.word	0x080136cc
 800d730:	08013ec4 	.word	0x08013ec4
 800d734:	08013720 	.word	0x08013720

0800d738 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d740:	f7fa f808 	bl	8007754 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d744:	4b0a      	ldr	r3, [pc, #40]	; (800d770 <tcpip_tcp_timer+0x38>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d103      	bne.n	800d754 <tcpip_tcp_timer+0x1c>
 800d74c:	4b09      	ldr	r3, [pc, #36]	; (800d774 <tcpip_tcp_timer+0x3c>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d005      	beq.n	800d760 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d754:	2200      	movs	r2, #0
 800d756:	4908      	ldr	r1, [pc, #32]	; (800d778 <tcpip_tcp_timer+0x40>)
 800d758:	20fa      	movs	r0, #250	; 0xfa
 800d75a:	f000 f8f1 	bl	800d940 <sys_timeout>
 800d75e:	e002      	b.n	800d766 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d760:	4b06      	ldr	r3, [pc, #24]	; (800d77c <tcpip_tcp_timer+0x44>)
 800d762:	2200      	movs	r2, #0
 800d764:	601a      	str	r2, [r3, #0]
  }
}
 800d766:	bf00      	nop
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	2000694c 	.word	0x2000694c
 800d774:	2000695c 	.word	0x2000695c
 800d778:	0800d739 	.word	0x0800d739
 800d77c:	2000010c 	.word	0x2000010c

0800d780 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d784:	4b0a      	ldr	r3, [pc, #40]	; (800d7b0 <tcp_timer_needed+0x30>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d10f      	bne.n	800d7ac <tcp_timer_needed+0x2c>
 800d78c:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <tcp_timer_needed+0x34>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d103      	bne.n	800d79c <tcp_timer_needed+0x1c>
 800d794:	4b08      	ldr	r3, [pc, #32]	; (800d7b8 <tcp_timer_needed+0x38>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d007      	beq.n	800d7ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d79c:	4b04      	ldr	r3, [pc, #16]	; (800d7b0 <tcp_timer_needed+0x30>)
 800d79e:	2201      	movs	r2, #1
 800d7a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	4905      	ldr	r1, [pc, #20]	; (800d7bc <tcp_timer_needed+0x3c>)
 800d7a6:	20fa      	movs	r0, #250	; 0xfa
 800d7a8:	f000 f8ca 	bl	800d940 <sys_timeout>
  }
}
 800d7ac:	bf00      	nop
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	2000010c 	.word	0x2000010c
 800d7b4:	2000694c 	.word	0x2000694c
 800d7b8:	2000695c 	.word	0x2000695c
 800d7bc:	0800d739 	.word	0x0800d739

0800d7c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d7cc:	2006      	movs	r0, #6
 800d7ce:	f7f8 fe2b 	bl	8006428 <memp_malloc>
 800d7d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d109      	bne.n	800d7ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d151      	bne.n	800d884 <sys_timeout_abs+0xc4>
 800d7e0:	4b2a      	ldr	r3, [pc, #168]	; (800d88c <sys_timeout_abs+0xcc>)
 800d7e2:	22be      	movs	r2, #190	; 0xbe
 800d7e4:	492a      	ldr	r1, [pc, #168]	; (800d890 <sys_timeout_abs+0xd0>)
 800d7e6:	482b      	ldr	r0, [pc, #172]	; (800d894 <sys_timeout_abs+0xd4>)
 800d7e8:	f002 fe20 	bl	801042c <iprintf>
    return;
 800d7ec:	e04a      	b.n	800d884 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d806:	4b24      	ldr	r3, [pc, #144]	; (800d898 <sys_timeout_abs+0xd8>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d103      	bne.n	800d816 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d80e:	4a22      	ldr	r2, [pc, #136]	; (800d898 <sys_timeout_abs+0xd8>)
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	6013      	str	r3, [r2, #0]
    return;
 800d814:	e037      	b.n	800d886 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	685a      	ldr	r2, [r3, #4]
 800d81a:	4b1f      	ldr	r3, [pc, #124]	; (800d898 <sys_timeout_abs+0xd8>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	0fdb      	lsrs	r3, r3, #31
 800d824:	f003 0301 	and.w	r3, r3, #1
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d007      	beq.n	800d83e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d82e:	4b1a      	ldr	r3, [pc, #104]	; (800d898 <sys_timeout_abs+0xd8>)
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d836:	4a18      	ldr	r2, [pc, #96]	; (800d898 <sys_timeout_abs+0xd8>)
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	6013      	str	r3, [r2, #0]
 800d83c:	e023      	b.n	800d886 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d83e:	4b16      	ldr	r3, [pc, #88]	; (800d898 <sys_timeout_abs+0xd8>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	617b      	str	r3, [r7, #20]
 800d844:	e01a      	b.n	800d87c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00b      	beq.n	800d866 <sys_timeout_abs+0xa6>
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	1ad3      	subs	r3, r2, r3
 800d85a:	0fdb      	lsrs	r3, r3, #31
 800d85c:	f003 0301 	and.w	r3, r3, #1
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b00      	cmp	r3, #0
 800d864:	d007      	beq.n	800d876 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	693a      	ldr	r2, [r7, #16]
 800d872:	601a      	str	r2, [r3, #0]
        break;
 800d874:	e007      	b.n	800d886 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	617b      	str	r3, [r7, #20]
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1e1      	bne.n	800d846 <sys_timeout_abs+0x86>
 800d882:	e000      	b.n	800d886 <sys_timeout_abs+0xc6>
    return;
 800d884:	bf00      	nop
      }
    }
  }
}
 800d886:	3718      	adds	r7, #24
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	08013ee8 	.word	0x08013ee8
 800d890:	08013f1c 	.word	0x08013f1c
 800d894:	08013f5c 	.word	0x08013f5c
 800d898:	20000104 	.word	0x20000104

0800d89c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	4798      	blx	r3

  now = sys_now();
 800d8ae:	f7f6 fb9d 	bl	8003fec <sys_now>
 800d8b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	4b0f      	ldr	r3, [pc, #60]	; (800d8f8 <lwip_cyclic_timer+0x5c>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4413      	add	r3, r2
 800d8be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	0fdb      	lsrs	r3, r3, #31
 800d8c8:	f003 0301 	and.w	r3, r3, #1
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d009      	beq.n	800d8e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	4413      	add	r3, r2
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	4907      	ldr	r1, [pc, #28]	; (800d8fc <lwip_cyclic_timer+0x60>)
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff ff6e 	bl	800d7c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d8e4:	e004      	b.n	800d8f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	4904      	ldr	r1, [pc, #16]	; (800d8fc <lwip_cyclic_timer+0x60>)
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f7ff ff68 	bl	800d7c0 <sys_timeout_abs>
}
 800d8f0:	bf00      	nop
 800d8f2:	3718      	adds	r7, #24
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	20000108 	.word	0x20000108
 800d8fc:	0800d89d 	.word	0x0800d89d

0800d900 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d906:	2301      	movs	r3, #1
 800d908:	607b      	str	r3, [r7, #4]
 800d90a:	e00e      	b.n	800d92a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d90c:	4a0a      	ldr	r2, [pc, #40]	; (800d938 <sys_timeouts_init+0x38>)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	00db      	lsls	r3, r3, #3
 800d918:	4a07      	ldr	r2, [pc, #28]	; (800d938 <sys_timeouts_init+0x38>)
 800d91a:	4413      	add	r3, r2
 800d91c:	461a      	mov	r2, r3
 800d91e:	4907      	ldr	r1, [pc, #28]	; (800d93c <sys_timeouts_init+0x3c>)
 800d920:	f000 f80e 	bl	800d940 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	3301      	adds	r3, #1
 800d928:	607b      	str	r3, [r7, #4]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d9ed      	bls.n	800d90c <sys_timeouts_init+0xc>
  }
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	08014ac0 	.word	0x08014ac0
 800d93c:	0800d89d 	.word	0x0800d89d

0800d940 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d952:	d306      	bcc.n	800d962 <sys_timeout+0x22>
 800d954:	4b0a      	ldr	r3, [pc, #40]	; (800d980 <sys_timeout+0x40>)
 800d956:	f240 1229 	movw	r2, #297	; 0x129
 800d95a:	490a      	ldr	r1, [pc, #40]	; (800d984 <sys_timeout+0x44>)
 800d95c:	480a      	ldr	r0, [pc, #40]	; (800d988 <sys_timeout+0x48>)
 800d95e:	f002 fd65 	bl	801042c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d962:	f7f6 fb43 	bl	8003fec <sys_now>
 800d966:	4602      	mov	r2, r0
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	4413      	add	r3, r2
 800d96c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	68b9      	ldr	r1, [r7, #8]
 800d972:	6978      	ldr	r0, [r7, #20]
 800d974:	f7ff ff24 	bl	800d7c0 <sys_timeout_abs>
#endif
}
 800d978:	bf00      	nop
 800d97a:	3718      	adds	r7, #24
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	08013ee8 	.word	0x08013ee8
 800d984:	08013f84 	.word	0x08013f84
 800d988:	08013f5c 	.word	0x08013f5c

0800d98c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800d996:	4b19      	ldr	r3, [pc, #100]	; (800d9fc <sys_untimeout+0x70>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d02a      	beq.n	800d9f4 <sys_untimeout+0x68>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800d99e:	4b17      	ldr	r3, [pc, #92]	; (800d9fc <sys_untimeout+0x70>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	60bb      	str	r3, [r7, #8]
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	60fb      	str	r3, [r7, #12]
 800d9a8:	e01f      	b.n	800d9ea <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	689b      	ldr	r3, [r3, #8]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d115      	bne.n	800d9e0 <sys_untimeout+0x54>
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	683a      	ldr	r2, [r7, #0]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d110      	bne.n	800d9e0 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d104      	bne.n	800d9ce <sys_untimeout+0x42>
        next_timeout = t->next;
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a0c      	ldr	r2, [pc, #48]	; (800d9fc <sys_untimeout+0x70>)
 800d9ca:	6013      	str	r3, [r2, #0]
 800d9cc:	e003      	b.n	800d9d6 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800d9d6:	68b9      	ldr	r1, [r7, #8]
 800d9d8:	2006      	movs	r0, #6
 800d9da:	f7f8 fd71 	bl	80064c0 <memp_free>
      return;
 800d9de:	e00a      	b.n	800d9f6 <sys_untimeout+0x6a>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	60fb      	str	r3, [r7, #12]
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	60bb      	str	r3, [r7, #8]
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d1dc      	bne.n	800d9aa <sys_untimeout+0x1e>
    }
  }
  return;
 800d9f0:	bf00      	nop
 800d9f2:	e000      	b.n	800d9f6 <sys_untimeout+0x6a>
    return;
 800d9f4:	bf00      	nop
}
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	20000104 	.word	0x20000104

0800da00 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800da06:	f7f6 faf1 	bl	8003fec <sys_now>
 800da0a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800da0c:	4b1a      	ldr	r3, [pc, #104]	; (800da78 <sys_check_timeouts+0x78>)
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b00      	cmp	r3, #0
 800da14:	d001      	beq.n	800da1a <sys_check_timeouts+0x1a>
 800da16:	f7f9 f82b 	bl	8006a70 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800da1a:	4b18      	ldr	r3, [pc, #96]	; (800da7c <sys_check_timeouts+0x7c>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d022      	beq.n	800da6c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	1ad3      	subs	r3, r2, r3
 800da2e:	0fdb      	lsrs	r3, r3, #31
 800da30:	f003 0301 	and.w	r3, r3, #1
 800da34:	b2db      	uxtb	r3, r3
 800da36:	2b00      	cmp	r3, #0
 800da38:	d11a      	bne.n	800da70 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a0f      	ldr	r2, [pc, #60]	; (800da7c <sys_check_timeouts+0x7c>)
 800da40:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	4a0b      	ldr	r2, [pc, #44]	; (800da80 <sys_check_timeouts+0x80>)
 800da54:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800da56:	68b9      	ldr	r1, [r7, #8]
 800da58:	2006      	movs	r0, #6
 800da5a:	f7f8 fd31 	bl	80064c0 <memp_free>
    if (handler != NULL) {
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d0d3      	beq.n	800da0c <sys_check_timeouts+0xc>
      handler(arg);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6838      	ldr	r0, [r7, #0]
 800da68:	4798      	blx	r3
  do {
 800da6a:	e7cf      	b.n	800da0c <sys_check_timeouts+0xc>
      return;
 800da6c:	bf00      	nop
 800da6e:	e000      	b.n	800da72 <sys_check_timeouts+0x72>
      return;
 800da70:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800da72:	3710      	adds	r7, #16
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}
 800da78:	20006944 	.word	0x20006944
 800da7c:	20000104 	.word	0x20000104
 800da80:	20000108 	.word	0x20000108

0800da84 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800da88:	f002 fd4c 	bl	8010524 <rand>
 800da8c:	4603      	mov	r3, r0
 800da8e:	b29b      	uxth	r3, r3
 800da90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800da94:	b29b      	uxth	r3, r3
 800da96:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	4b01      	ldr	r3, [pc, #4]	; (800daa4 <udp_init+0x20>)
 800da9e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800daa0:	bf00      	nop
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	20000010 	.word	0x20000010

0800daa8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	4613      	mov	r3, r2
 800dab4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d105      	bne.n	800dac8 <udp_input_local_match+0x20>
 800dabc:	4b27      	ldr	r3, [pc, #156]	; (800db5c <udp_input_local_match+0xb4>)
 800dabe:	2287      	movs	r2, #135	; 0x87
 800dac0:	4927      	ldr	r1, [pc, #156]	; (800db60 <udp_input_local_match+0xb8>)
 800dac2:	4828      	ldr	r0, [pc, #160]	; (800db64 <udp_input_local_match+0xbc>)
 800dac4:	f002 fcb2 	bl	801042c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d105      	bne.n	800dada <udp_input_local_match+0x32>
 800dace:	4b23      	ldr	r3, [pc, #140]	; (800db5c <udp_input_local_match+0xb4>)
 800dad0:	2288      	movs	r2, #136	; 0x88
 800dad2:	4925      	ldr	r1, [pc, #148]	; (800db68 <udp_input_local_match+0xc0>)
 800dad4:	4823      	ldr	r0, [pc, #140]	; (800db64 <udp_input_local_match+0xbc>)
 800dad6:	f002 fca9 	bl	801042c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	7a1b      	ldrb	r3, [r3, #8]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00b      	beq.n	800dafa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	7a1a      	ldrb	r2, [r3, #8]
 800dae6:	4b21      	ldr	r3, [pc, #132]	; (800db6c <udp_input_local_match+0xc4>)
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800daee:	3301      	adds	r3, #1
 800daf0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d001      	beq.n	800dafa <udp_input_local_match+0x52>
    return 0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	e02b      	b.n	800db52 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800dafa:	79fb      	ldrb	r3, [r7, #7]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d018      	beq.n	800db32 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d013      	beq.n	800db2e <udp_input_local_match+0x86>
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d00f      	beq.n	800db2e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800db0e:	4b17      	ldr	r3, [pc, #92]	; (800db6c <udp_input_local_match+0xc4>)
 800db10:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800db12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db16:	d00a      	beq.n	800db2e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	4b13      	ldr	r3, [pc, #76]	; (800db6c <udp_input_local_match+0xc4>)
 800db1e:	695b      	ldr	r3, [r3, #20]
 800db20:	405a      	eors	r2, r3
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	3308      	adds	r3, #8
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d110      	bne.n	800db50 <udp_input_local_match+0xa8>
          return 1;
 800db2e:	2301      	movs	r3, #1
 800db30:	e00f      	b.n	800db52 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d009      	beq.n	800db4c <udp_input_local_match+0xa4>
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d005      	beq.n	800db4c <udp_input_local_match+0xa4>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	4b09      	ldr	r3, [pc, #36]	; (800db6c <udp_input_local_match+0xc4>)
 800db46:	695b      	ldr	r3, [r3, #20]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d101      	bne.n	800db50 <udp_input_local_match+0xa8>
        return 1;
 800db4c:	2301      	movs	r3, #1
 800db4e:	e000      	b.n	800db52 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800db50:	2300      	movs	r3, #0
}
 800db52:	4618      	mov	r0, r3
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	08013fd0 	.word	0x08013fd0
 800db60:	08014000 	.word	0x08014000
 800db64:	08014024 	.word	0x08014024
 800db68:	0801404c 	.word	0x0801404c
 800db6c:	20003408 	.word	0x20003408

0800db70 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800db70:	b590      	push	{r4, r7, lr}
 800db72:	b08d      	sub	sp, #52	; 0x34
 800db74:	af02      	add	r7, sp, #8
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d105      	bne.n	800db90 <udp_input+0x20>
 800db84:	4b7c      	ldr	r3, [pc, #496]	; (800dd78 <udp_input+0x208>)
 800db86:	22cf      	movs	r2, #207	; 0xcf
 800db88:	497c      	ldr	r1, [pc, #496]	; (800dd7c <udp_input+0x20c>)
 800db8a:	487d      	ldr	r0, [pc, #500]	; (800dd80 <udp_input+0x210>)
 800db8c:	f002 fc4e 	bl	801042c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d105      	bne.n	800dba2 <udp_input+0x32>
 800db96:	4b78      	ldr	r3, [pc, #480]	; (800dd78 <udp_input+0x208>)
 800db98:	22d0      	movs	r2, #208	; 0xd0
 800db9a:	497a      	ldr	r1, [pc, #488]	; (800dd84 <udp_input+0x214>)
 800db9c:	4878      	ldr	r0, [pc, #480]	; (800dd80 <udp_input+0x210>)
 800db9e:	f002 fc45 	bl	801042c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	895b      	ldrh	r3, [r3, #10]
 800dba6:	2b07      	cmp	r3, #7
 800dba8:	d803      	bhi.n	800dbb2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7f9 fa96 	bl	80070dc <pbuf_free>
    goto end;
 800dbb0:	e0de      	b.n	800dd70 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dbb8:	4b73      	ldr	r3, [pc, #460]	; (800dd88 <udp_input+0x218>)
 800dbba:	695a      	ldr	r2, [r3, #20]
 800dbbc:	4b72      	ldr	r3, [pc, #456]	; (800dd88 <udp_input+0x218>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	4610      	mov	r0, r2
 800dbc4:	f001 fc86 	bl	800f4d4 <ip4_addr_isbroadcast_u32>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	881b      	ldrh	r3, [r3, #0]
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7f7 ffaa 	bl	8005b2c <lwip_htons>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	885b      	ldrh	r3, [r3, #2]
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7f7 ffa2 	bl	8005b2c <lwip_htons>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800dbec:	2300      	movs	r3, #0
 800dbee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbf8:	4b64      	ldr	r3, [pc, #400]	; (800dd8c <udp_input+0x21c>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	627b      	str	r3, [r7, #36]	; 0x24
 800dbfe:	e054      	b.n	800dcaa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	8a5b      	ldrh	r3, [r3, #18]
 800dc04:	89fa      	ldrh	r2, [r7, #14]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d14a      	bne.n	800dca0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800dc0a:	7cfb      	ldrb	r3, [r7, #19]
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	6839      	ldr	r1, [r7, #0]
 800dc10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc12:	f7ff ff49 	bl	800daa8 <udp_input_local_match>
 800dc16:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d041      	beq.n	800dca0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1e:	7c1b      	ldrb	r3, [r3, #16]
 800dc20:	f003 0304 	and.w	r3, r3, #4
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d11d      	bne.n	800dc64 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d102      	bne.n	800dc34 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800dc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc30:	61fb      	str	r3, [r7, #28]
 800dc32:	e017      	b.n	800dc64 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800dc34:	7cfb      	ldrb	r3, [r7, #19]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d014      	beq.n	800dc64 <udp_input+0xf4>
 800dc3a:	4b53      	ldr	r3, [pc, #332]	; (800dd88 <udp_input+0x218>)
 800dc3c:	695b      	ldr	r3, [r3, #20]
 800dc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc42:	d10f      	bne.n	800dc64 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	3304      	adds	r3, #4
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d008      	beq.n	800dc64 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	3304      	adds	r3, #4
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d101      	bne.n	800dc64 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800dc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc62:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc66:	8a9b      	ldrh	r3, [r3, #20]
 800dc68:	8a3a      	ldrh	r2, [r7, #16]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d118      	bne.n	800dca0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc70:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d005      	beq.n	800dc82 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800dc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc78:	685a      	ldr	r2, [r3, #4]
 800dc7a:	4b43      	ldr	r3, [pc, #268]	; (800dd88 <udp_input+0x218>)
 800dc7c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d10e      	bne.n	800dca0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800dc82:	6a3b      	ldr	r3, [r7, #32]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d014      	beq.n	800dcb2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	68da      	ldr	r2, [r3, #12]
 800dc8c:	6a3b      	ldr	r3, [r7, #32]
 800dc8e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800dc90:	4b3e      	ldr	r3, [pc, #248]	; (800dd8c <udp_input+0x21c>)
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc96:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800dc98:	4a3c      	ldr	r2, [pc, #240]	; (800dd8c <udp_input+0x21c>)
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800dc9e:	e008      	b.n	800dcb2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	627b      	str	r3, [r7, #36]	; 0x24
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d1a7      	bne.n	800dc00 <udp_input+0x90>
 800dcb0:	e000      	b.n	800dcb4 <udp_input+0x144>
        break;
 800dcb2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d101      	bne.n	800dcbe <udp_input+0x14e>
    pcb = uncon_pcb;
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d002      	beq.n	800dcca <udp_input+0x15a>
    for_us = 1;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	76fb      	strb	r3, [r7, #27]
 800dcc8:	e00a      	b.n	800dce0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	3304      	adds	r3, #4
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	4b2d      	ldr	r3, [pc, #180]	; (800dd88 <udp_input+0x218>)
 800dcd2:	695b      	ldr	r3, [r3, #20]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	bf0c      	ite	eq
 800dcd8:	2301      	moveq	r3, #1
 800dcda:	2300      	movne	r3, #0
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800dce0:	7efb      	ldrb	r3, [r7, #27]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d041      	beq.n	800dd6a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800dce6:	2108      	movs	r1, #8
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f7f9 f971 	bl	8006fd0 <pbuf_remove_header>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00a      	beq.n	800dd0a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800dcf4:	4b20      	ldr	r3, [pc, #128]	; (800dd78 <udp_input+0x208>)
 800dcf6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800dcfa:	4925      	ldr	r1, [pc, #148]	; (800dd90 <udp_input+0x220>)
 800dcfc:	4820      	ldr	r0, [pc, #128]	; (800dd80 <udp_input+0x210>)
 800dcfe:	f002 fb95 	bl	801042c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f7f9 f9ea 	bl	80070dc <pbuf_free>
      goto end;
 800dd08:	e032      	b.n	800dd70 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d012      	beq.n	800dd36 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800dd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd12:	699b      	ldr	r3, [r3, #24]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00a      	beq.n	800dd2e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1a:	699c      	ldr	r4, [r3, #24]
 800dd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1e:	69d8      	ldr	r0, [r3, #28]
 800dd20:	8a3b      	ldrh	r3, [r7, #16]
 800dd22:	9300      	str	r3, [sp, #0]
 800dd24:	4b1b      	ldr	r3, [pc, #108]	; (800dd94 <udp_input+0x224>)
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd2a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800dd2c:	e021      	b.n	800dd72 <udp_input+0x202>
        pbuf_free(p);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f7f9 f9d4 	bl	80070dc <pbuf_free>
        goto end;
 800dd34:	e01c      	b.n	800dd70 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800dd36:	7cfb      	ldrb	r3, [r7, #19]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d112      	bne.n	800dd62 <udp_input+0x1f2>
 800dd3c:	4b12      	ldr	r3, [pc, #72]	; (800dd88 <udp_input+0x218>)
 800dd3e:	695b      	ldr	r3, [r3, #20]
 800dd40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd44:	2be0      	cmp	r3, #224	; 0xe0
 800dd46:	d00c      	beq.n	800dd62 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dd48:	4b0f      	ldr	r3, [pc, #60]	; (800dd88 <udp_input+0x218>)
 800dd4a:	899b      	ldrh	r3, [r3, #12]
 800dd4c:	3308      	adds	r3, #8
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	b21b      	sxth	r3, r3
 800dd52:	4619      	mov	r1, r3
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f7f9 f9ae 	bl	80070b6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800dd5a:	2103      	movs	r1, #3
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f001 f89b 	bl	800ee98 <icmp_dest_unreach>
      pbuf_free(p);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7f9 f9ba 	bl	80070dc <pbuf_free>
  return;
 800dd68:	e003      	b.n	800dd72 <udp_input+0x202>
    pbuf_free(p);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f7f9 f9b6 	bl	80070dc <pbuf_free>
  return;
 800dd70:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dd72:	372c      	adds	r7, #44	; 0x2c
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd90      	pop	{r4, r7, pc}
 800dd78:	08013fd0 	.word	0x08013fd0
 800dd7c:	08014074 	.word	0x08014074
 800dd80:	08014024 	.word	0x08014024
 800dd84:	0801408c 	.word	0x0801408c
 800dd88:	20003408 	.word	0x20003408
 800dd8c:	20006964 	.word	0x20006964
 800dd90:	080140a8 	.word	0x080140a8
 800dd94:	20003418 	.word	0x20003418

0800dd98 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d01e      	beq.n	800dde6 <udp_netif_ip_addr_changed+0x4e>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d01a      	beq.n	800dde6 <udp_netif_ip_addr_changed+0x4e>
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d017      	beq.n	800dde6 <udp_netif_ip_addr_changed+0x4e>
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d013      	beq.n	800dde6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ddbe:	4b0d      	ldr	r3, [pc, #52]	; (800ddf4 <udp_netif_ip_addr_changed+0x5c>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	60fb      	str	r3, [r7, #12]
 800ddc4:	e00c      	b.n	800dde0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d103      	bne.n	800ddda <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	60fb      	str	r3, [r7, #12]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d1ef      	bne.n	800ddc6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800dde6:	bf00      	nop
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	20006964 	.word	0x20006964

0800ddf8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800de00:	4915      	ldr	r1, [pc, #84]	; (800de58 <etharp_free_entry+0x60>)
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	4613      	mov	r3, r2
 800de06:	005b      	lsls	r3, r3, #1
 800de08:	4413      	add	r3, r2
 800de0a:	00db      	lsls	r3, r3, #3
 800de0c:	440b      	add	r3, r1
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d013      	beq.n	800de3c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800de14:	4910      	ldr	r1, [pc, #64]	; (800de58 <etharp_free_entry+0x60>)
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	4613      	mov	r3, r2
 800de1a:	005b      	lsls	r3, r3, #1
 800de1c:	4413      	add	r3, r2
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	440b      	add	r3, r1
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4618      	mov	r0, r3
 800de26:	f7f9 f959 	bl	80070dc <pbuf_free>
    arp_table[i].q = NULL;
 800de2a:	490b      	ldr	r1, [pc, #44]	; (800de58 <etharp_free_entry+0x60>)
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	4613      	mov	r3, r2
 800de30:	005b      	lsls	r3, r3, #1
 800de32:	4413      	add	r3, r2
 800de34:	00db      	lsls	r3, r3, #3
 800de36:	440b      	add	r3, r1
 800de38:	2200      	movs	r2, #0
 800de3a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800de3c:	4906      	ldr	r1, [pc, #24]	; (800de58 <etharp_free_entry+0x60>)
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	4613      	mov	r3, r2
 800de42:	005b      	lsls	r3, r3, #1
 800de44:	4413      	add	r3, r2
 800de46:	00db      	lsls	r3, r3, #3
 800de48:	440b      	add	r3, r1
 800de4a:	3314      	adds	r3, #20
 800de4c:	2200      	movs	r2, #0
 800de4e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	20000110 	.word	0x20000110

0800de5c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de62:	2300      	movs	r3, #0
 800de64:	607b      	str	r3, [r7, #4]
 800de66:	e096      	b.n	800df96 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800de68:	494f      	ldr	r1, [pc, #316]	; (800dfa8 <etharp_tmr+0x14c>)
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	4613      	mov	r3, r2
 800de6e:	005b      	lsls	r3, r3, #1
 800de70:	4413      	add	r3, r2
 800de72:	00db      	lsls	r3, r3, #3
 800de74:	440b      	add	r3, r1
 800de76:	3314      	adds	r3, #20
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800de7c:	78fb      	ldrb	r3, [r7, #3]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 8086 	beq.w	800df90 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800de84:	4948      	ldr	r1, [pc, #288]	; (800dfa8 <etharp_tmr+0x14c>)
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	4613      	mov	r3, r2
 800de8a:	005b      	lsls	r3, r3, #1
 800de8c:	4413      	add	r3, r2
 800de8e:	00db      	lsls	r3, r3, #3
 800de90:	440b      	add	r3, r1
 800de92:	3312      	adds	r3, #18
 800de94:	881b      	ldrh	r3, [r3, #0]
 800de96:	3301      	adds	r3, #1
 800de98:	b298      	uxth	r0, r3
 800de9a:	4943      	ldr	r1, [pc, #268]	; (800dfa8 <etharp_tmr+0x14c>)
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	4613      	mov	r3, r2
 800dea0:	005b      	lsls	r3, r3, #1
 800dea2:	4413      	add	r3, r2
 800dea4:	00db      	lsls	r3, r3, #3
 800dea6:	440b      	add	r3, r1
 800dea8:	3312      	adds	r3, #18
 800deaa:	4602      	mov	r2, r0
 800deac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800deae:	493e      	ldr	r1, [pc, #248]	; (800dfa8 <etharp_tmr+0x14c>)
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	4613      	mov	r3, r2
 800deb4:	005b      	lsls	r3, r3, #1
 800deb6:	4413      	add	r3, r2
 800deb8:	00db      	lsls	r3, r3, #3
 800deba:	440b      	add	r3, r1
 800debc:	3312      	adds	r3, #18
 800debe:	881b      	ldrh	r3, [r3, #0]
 800dec0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dec4:	d215      	bcs.n	800def2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dec6:	4938      	ldr	r1, [pc, #224]	; (800dfa8 <etharp_tmr+0x14c>)
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	4613      	mov	r3, r2
 800decc:	005b      	lsls	r3, r3, #1
 800dece:	4413      	add	r3, r2
 800ded0:	00db      	lsls	r3, r3, #3
 800ded2:	440b      	add	r3, r1
 800ded4:	3314      	adds	r3, #20
 800ded6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d10e      	bne.n	800defa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800dedc:	4932      	ldr	r1, [pc, #200]	; (800dfa8 <etharp_tmr+0x14c>)
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	4613      	mov	r3, r2
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	4413      	add	r3, r2
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	440b      	add	r3, r1
 800deea:	3312      	adds	r3, #18
 800deec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800deee:	2b04      	cmp	r3, #4
 800def0:	d903      	bls.n	800defa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f7ff ff80 	bl	800ddf8 <etharp_free_entry>
 800def8:	e04a      	b.n	800df90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800defa:	492b      	ldr	r1, [pc, #172]	; (800dfa8 <etharp_tmr+0x14c>)
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	4613      	mov	r3, r2
 800df00:	005b      	lsls	r3, r3, #1
 800df02:	4413      	add	r3, r2
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	440b      	add	r3, r1
 800df08:	3314      	adds	r3, #20
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	2b03      	cmp	r3, #3
 800df0e:	d10a      	bne.n	800df26 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800df10:	4925      	ldr	r1, [pc, #148]	; (800dfa8 <etharp_tmr+0x14c>)
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	4613      	mov	r3, r2
 800df16:	005b      	lsls	r3, r3, #1
 800df18:	4413      	add	r3, r2
 800df1a:	00db      	lsls	r3, r3, #3
 800df1c:	440b      	add	r3, r1
 800df1e:	3314      	adds	r3, #20
 800df20:	2204      	movs	r2, #4
 800df22:	701a      	strb	r2, [r3, #0]
 800df24:	e034      	b.n	800df90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800df26:	4920      	ldr	r1, [pc, #128]	; (800dfa8 <etharp_tmr+0x14c>)
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	4613      	mov	r3, r2
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	4413      	add	r3, r2
 800df30:	00db      	lsls	r3, r3, #3
 800df32:	440b      	add	r3, r1
 800df34:	3314      	adds	r3, #20
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	2b04      	cmp	r3, #4
 800df3a:	d10a      	bne.n	800df52 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800df3c:	491a      	ldr	r1, [pc, #104]	; (800dfa8 <etharp_tmr+0x14c>)
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	4613      	mov	r3, r2
 800df42:	005b      	lsls	r3, r3, #1
 800df44:	4413      	add	r3, r2
 800df46:	00db      	lsls	r3, r3, #3
 800df48:	440b      	add	r3, r1
 800df4a:	3314      	adds	r3, #20
 800df4c:	2202      	movs	r2, #2
 800df4e:	701a      	strb	r2, [r3, #0]
 800df50:	e01e      	b.n	800df90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800df52:	4915      	ldr	r1, [pc, #84]	; (800dfa8 <etharp_tmr+0x14c>)
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	4613      	mov	r3, r2
 800df58:	005b      	lsls	r3, r3, #1
 800df5a:	4413      	add	r3, r2
 800df5c:	00db      	lsls	r3, r3, #3
 800df5e:	440b      	add	r3, r1
 800df60:	3314      	adds	r3, #20
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d113      	bne.n	800df90 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800df68:	490f      	ldr	r1, [pc, #60]	; (800dfa8 <etharp_tmr+0x14c>)
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	4613      	mov	r3, r2
 800df6e:	005b      	lsls	r3, r3, #1
 800df70:	4413      	add	r3, r2
 800df72:	00db      	lsls	r3, r3, #3
 800df74:	440b      	add	r3, r1
 800df76:	3308      	adds	r3, #8
 800df78:	6818      	ldr	r0, [r3, #0]
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	4613      	mov	r3, r2
 800df7e:	005b      	lsls	r3, r3, #1
 800df80:	4413      	add	r3, r2
 800df82:	00db      	lsls	r3, r3, #3
 800df84:	4a08      	ldr	r2, [pc, #32]	; (800dfa8 <etharp_tmr+0x14c>)
 800df86:	4413      	add	r3, r2
 800df88:	3304      	adds	r3, #4
 800df8a:	4619      	mov	r1, r3
 800df8c:	f000 fe6e 	bl	800ec6c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	3301      	adds	r3, #1
 800df94:	607b      	str	r3, [r7, #4]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2b09      	cmp	r3, #9
 800df9a:	f77f af65 	ble.w	800de68 <etharp_tmr+0xc>
      }
    }
  }
}
 800df9e:	bf00      	nop
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	20000110 	.word	0x20000110

0800dfac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b08a      	sub	sp, #40	; 0x28
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	607a      	str	r2, [r7, #4]
 800dfb8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800dfba:	230a      	movs	r3, #10
 800dfbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dfbe:	230a      	movs	r3, #10
 800dfc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800dfc2:	230a      	movs	r3, #10
 800dfc4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800dfca:	230a      	movs	r3, #10
 800dfcc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	83bb      	strh	r3, [r7, #28]
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	837b      	strh	r3, [r7, #26]
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dfda:	2300      	movs	r3, #0
 800dfdc:	843b      	strh	r3, [r7, #32]
 800dfde:	e0ae      	b.n	800e13e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800dfe0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dfe4:	49a6      	ldr	r1, [pc, #664]	; (800e280 <etharp_find_entry+0x2d4>)
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	4413      	add	r3, r2
 800dfec:	00db      	lsls	r3, r3, #3
 800dfee:	440b      	add	r3, r1
 800dff0:	3314      	adds	r3, #20
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dff6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dffa:	2b0a      	cmp	r3, #10
 800dffc:	d105      	bne.n	800e00a <etharp_find_entry+0x5e>
 800dffe:	7dfb      	ldrb	r3, [r7, #23]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d102      	bne.n	800e00a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e004:	8c3b      	ldrh	r3, [r7, #32]
 800e006:	847b      	strh	r3, [r7, #34]	; 0x22
 800e008:	e095      	b.n	800e136 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e00a:	7dfb      	ldrb	r3, [r7, #23]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 8092 	beq.w	800e136 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e012:	7dfb      	ldrb	r3, [r7, #23]
 800e014:	2b01      	cmp	r3, #1
 800e016:	d009      	beq.n	800e02c <etharp_find_entry+0x80>
 800e018:	7dfb      	ldrb	r3, [r7, #23]
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d806      	bhi.n	800e02c <etharp_find_entry+0x80>
 800e01e:	4b99      	ldr	r3, [pc, #612]	; (800e284 <etharp_find_entry+0x2d8>)
 800e020:	f44f 7292 	mov.w	r2, #292	; 0x124
 800e024:	4998      	ldr	r1, [pc, #608]	; (800e288 <etharp_find_entry+0x2dc>)
 800e026:	4899      	ldr	r0, [pc, #612]	; (800e28c <etharp_find_entry+0x2e0>)
 800e028:	f002 fa00 	bl	801042c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d020      	beq.n	800e074 <etharp_find_entry+0xc8>
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6819      	ldr	r1, [r3, #0]
 800e036:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e03a:	4891      	ldr	r0, [pc, #580]	; (800e280 <etharp_find_entry+0x2d4>)
 800e03c:	4613      	mov	r3, r2
 800e03e:	005b      	lsls	r3, r3, #1
 800e040:	4413      	add	r3, r2
 800e042:	00db      	lsls	r3, r3, #3
 800e044:	4403      	add	r3, r0
 800e046:	3304      	adds	r3, #4
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4299      	cmp	r1, r3
 800e04c:	d112      	bne.n	800e074 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00c      	beq.n	800e06e <etharp_find_entry+0xc2>
 800e054:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e058:	4989      	ldr	r1, [pc, #548]	; (800e280 <etharp_find_entry+0x2d4>)
 800e05a:	4613      	mov	r3, r2
 800e05c:	005b      	lsls	r3, r3, #1
 800e05e:	4413      	add	r3, r2
 800e060:	00db      	lsls	r3, r3, #3
 800e062:	440b      	add	r3, r1
 800e064:	3308      	adds	r3, #8
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d102      	bne.n	800e074 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e06e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e072:	e100      	b.n	800e276 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e074:	7dfb      	ldrb	r3, [r7, #23]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d140      	bne.n	800e0fc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e07a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e07e:	4980      	ldr	r1, [pc, #512]	; (800e280 <etharp_find_entry+0x2d4>)
 800e080:	4613      	mov	r3, r2
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	4413      	add	r3, r2
 800e086:	00db      	lsls	r3, r3, #3
 800e088:	440b      	add	r3, r1
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d01a      	beq.n	800e0c6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e090:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e094:	497a      	ldr	r1, [pc, #488]	; (800e280 <etharp_find_entry+0x2d4>)
 800e096:	4613      	mov	r3, r2
 800e098:	005b      	lsls	r3, r3, #1
 800e09a:	4413      	add	r3, r2
 800e09c:	00db      	lsls	r3, r3, #3
 800e09e:	440b      	add	r3, r1
 800e0a0:	3312      	adds	r3, #18
 800e0a2:	881b      	ldrh	r3, [r3, #0]
 800e0a4:	8bba      	ldrh	r2, [r7, #28]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d845      	bhi.n	800e136 <etharp_find_entry+0x18a>
            old_queue = i;
 800e0aa:	8c3b      	ldrh	r3, [r7, #32]
 800e0ac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e0ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0b2:	4973      	ldr	r1, [pc, #460]	; (800e280 <etharp_find_entry+0x2d4>)
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	005b      	lsls	r3, r3, #1
 800e0b8:	4413      	add	r3, r2
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	440b      	add	r3, r1
 800e0be:	3312      	adds	r3, #18
 800e0c0:	881b      	ldrh	r3, [r3, #0]
 800e0c2:	83bb      	strh	r3, [r7, #28]
 800e0c4:	e037      	b.n	800e136 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e0c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0ca:	496d      	ldr	r1, [pc, #436]	; (800e280 <etharp_find_entry+0x2d4>)
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	005b      	lsls	r3, r3, #1
 800e0d0:	4413      	add	r3, r2
 800e0d2:	00db      	lsls	r3, r3, #3
 800e0d4:	440b      	add	r3, r1
 800e0d6:	3312      	adds	r3, #18
 800e0d8:	881b      	ldrh	r3, [r3, #0]
 800e0da:	8b7a      	ldrh	r2, [r7, #26]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d82a      	bhi.n	800e136 <etharp_find_entry+0x18a>
            old_pending = i;
 800e0e0:	8c3b      	ldrh	r3, [r7, #32]
 800e0e2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e0e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e0e8:	4965      	ldr	r1, [pc, #404]	; (800e280 <etharp_find_entry+0x2d4>)
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	005b      	lsls	r3, r3, #1
 800e0ee:	4413      	add	r3, r2
 800e0f0:	00db      	lsls	r3, r3, #3
 800e0f2:	440b      	add	r3, r1
 800e0f4:	3312      	adds	r3, #18
 800e0f6:	881b      	ldrh	r3, [r3, #0]
 800e0f8:	837b      	strh	r3, [r7, #26]
 800e0fa:	e01c      	b.n	800e136 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e0fc:	7dfb      	ldrb	r3, [r7, #23]
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d919      	bls.n	800e136 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e102:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e106:	495e      	ldr	r1, [pc, #376]	; (800e280 <etharp_find_entry+0x2d4>)
 800e108:	4613      	mov	r3, r2
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	4413      	add	r3, r2
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	440b      	add	r3, r1
 800e112:	3312      	adds	r3, #18
 800e114:	881b      	ldrh	r3, [r3, #0]
 800e116:	8b3a      	ldrh	r2, [r7, #24]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d80c      	bhi.n	800e136 <etharp_find_entry+0x18a>
            old_stable = i;
 800e11c:	8c3b      	ldrh	r3, [r7, #32]
 800e11e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e120:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e124:	4956      	ldr	r1, [pc, #344]	; (800e280 <etharp_find_entry+0x2d4>)
 800e126:	4613      	mov	r3, r2
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	4413      	add	r3, r2
 800e12c:	00db      	lsls	r3, r3, #3
 800e12e:	440b      	add	r3, r1
 800e130:	3312      	adds	r3, #18
 800e132:	881b      	ldrh	r3, [r3, #0]
 800e134:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e136:	8c3b      	ldrh	r3, [r7, #32]
 800e138:	3301      	adds	r3, #1
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	843b      	strh	r3, [r7, #32]
 800e13e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e142:	2b09      	cmp	r3, #9
 800e144:	f77f af4c 	ble.w	800dfe0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e148:	7afb      	ldrb	r3, [r7, #11]
 800e14a:	f003 0302 	and.w	r3, r3, #2
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d108      	bne.n	800e164 <etharp_find_entry+0x1b8>
 800e152:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e156:	2b0a      	cmp	r3, #10
 800e158:	d107      	bne.n	800e16a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e15a:	7afb      	ldrb	r3, [r7, #11]
 800e15c:	f003 0301 	and.w	r3, r3, #1
 800e160:	2b00      	cmp	r3, #0
 800e162:	d102      	bne.n	800e16a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e164:	f04f 33ff 	mov.w	r3, #4294967295
 800e168:	e085      	b.n	800e276 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e16a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e16e:	2b09      	cmp	r3, #9
 800e170:	dc02      	bgt.n	800e178 <etharp_find_entry+0x1cc>
    i = empty;
 800e172:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e174:	843b      	strh	r3, [r7, #32]
 800e176:	e039      	b.n	800e1ec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e178:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e17c:	2b09      	cmp	r3, #9
 800e17e:	dc14      	bgt.n	800e1aa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e182:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e184:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e188:	493d      	ldr	r1, [pc, #244]	; (800e280 <etharp_find_entry+0x2d4>)
 800e18a:	4613      	mov	r3, r2
 800e18c:	005b      	lsls	r3, r3, #1
 800e18e:	4413      	add	r3, r2
 800e190:	00db      	lsls	r3, r3, #3
 800e192:	440b      	add	r3, r1
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d018      	beq.n	800e1cc <etharp_find_entry+0x220>
 800e19a:	4b3a      	ldr	r3, [pc, #232]	; (800e284 <etharp_find_entry+0x2d8>)
 800e19c:	f240 126d 	movw	r2, #365	; 0x16d
 800e1a0:	493b      	ldr	r1, [pc, #236]	; (800e290 <etharp_find_entry+0x2e4>)
 800e1a2:	483a      	ldr	r0, [pc, #232]	; (800e28c <etharp_find_entry+0x2e0>)
 800e1a4:	f002 f942 	bl	801042c <iprintf>
 800e1a8:	e010      	b.n	800e1cc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e1aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e1ae:	2b09      	cmp	r3, #9
 800e1b0:	dc02      	bgt.n	800e1b8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e1b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e1b4:	843b      	strh	r3, [r7, #32]
 800e1b6:	e009      	b.n	800e1cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e1b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e1bc:	2b09      	cmp	r3, #9
 800e1be:	dc02      	bgt.n	800e1c6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e1c0:	8bfb      	ldrh	r3, [r7, #30]
 800e1c2:	843b      	strh	r3, [r7, #32]
 800e1c4:	e002      	b.n	800e1cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ca:	e054      	b.n	800e276 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e1cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e1d0:	2b09      	cmp	r3, #9
 800e1d2:	dd06      	ble.n	800e1e2 <etharp_find_entry+0x236>
 800e1d4:	4b2b      	ldr	r3, [pc, #172]	; (800e284 <etharp_find_entry+0x2d8>)
 800e1d6:	f240 127f 	movw	r2, #383	; 0x17f
 800e1da:	492e      	ldr	r1, [pc, #184]	; (800e294 <etharp_find_entry+0x2e8>)
 800e1dc:	482b      	ldr	r0, [pc, #172]	; (800e28c <etharp_find_entry+0x2e0>)
 800e1de:	f002 f925 	bl	801042c <iprintf>
    etharp_free_entry(i);
 800e1e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7ff fe06 	bl	800ddf8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e1ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e1f0:	2b09      	cmp	r3, #9
 800e1f2:	dd06      	ble.n	800e202 <etharp_find_entry+0x256>
 800e1f4:	4b23      	ldr	r3, [pc, #140]	; (800e284 <etharp_find_entry+0x2d8>)
 800e1f6:	f240 1283 	movw	r2, #387	; 0x183
 800e1fa:	4926      	ldr	r1, [pc, #152]	; (800e294 <etharp_find_entry+0x2e8>)
 800e1fc:	4823      	ldr	r0, [pc, #140]	; (800e28c <etharp_find_entry+0x2e0>)
 800e1fe:	f002 f915 	bl	801042c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e202:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e206:	491e      	ldr	r1, [pc, #120]	; (800e280 <etharp_find_entry+0x2d4>)
 800e208:	4613      	mov	r3, r2
 800e20a:	005b      	lsls	r3, r3, #1
 800e20c:	4413      	add	r3, r2
 800e20e:	00db      	lsls	r3, r3, #3
 800e210:	440b      	add	r3, r1
 800e212:	3314      	adds	r3, #20
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d006      	beq.n	800e228 <etharp_find_entry+0x27c>
 800e21a:	4b1a      	ldr	r3, [pc, #104]	; (800e284 <etharp_find_entry+0x2d8>)
 800e21c:	f240 1285 	movw	r2, #389	; 0x185
 800e220:	491d      	ldr	r1, [pc, #116]	; (800e298 <etharp_find_entry+0x2ec>)
 800e222:	481a      	ldr	r0, [pc, #104]	; (800e28c <etharp_find_entry+0x2e0>)
 800e224:	f002 f902 	bl	801042c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00b      	beq.n	800e246 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e22e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6819      	ldr	r1, [r3, #0]
 800e236:	4812      	ldr	r0, [pc, #72]	; (800e280 <etharp_find_entry+0x2d4>)
 800e238:	4613      	mov	r3, r2
 800e23a:	005b      	lsls	r3, r3, #1
 800e23c:	4413      	add	r3, r2
 800e23e:	00db      	lsls	r3, r3, #3
 800e240:	4403      	add	r3, r0
 800e242:	3304      	adds	r3, #4
 800e244:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e246:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e24a:	490d      	ldr	r1, [pc, #52]	; (800e280 <etharp_find_entry+0x2d4>)
 800e24c:	4613      	mov	r3, r2
 800e24e:	005b      	lsls	r3, r3, #1
 800e250:	4413      	add	r3, r2
 800e252:	00db      	lsls	r3, r3, #3
 800e254:	440b      	add	r3, r1
 800e256:	3312      	adds	r3, #18
 800e258:	2200      	movs	r2, #0
 800e25a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e25c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e260:	4907      	ldr	r1, [pc, #28]	; (800e280 <etharp_find_entry+0x2d4>)
 800e262:	4613      	mov	r3, r2
 800e264:	005b      	lsls	r3, r3, #1
 800e266:	4413      	add	r3, r2
 800e268:	00db      	lsls	r3, r3, #3
 800e26a:	440b      	add	r3, r1
 800e26c:	3308      	adds	r3, #8
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e272:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e276:	4618      	mov	r0, r3
 800e278:	3728      	adds	r7, #40	; 0x28
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	20000110 	.word	0x20000110
 800e284:	08014334 	.word	0x08014334
 800e288:	0801436c 	.word	0x0801436c
 800e28c:	080143ac 	.word	0x080143ac
 800e290:	080143d4 	.word	0x080143d4
 800e294:	080143ec 	.word	0x080143ec
 800e298:	08014400 	.word	0x08014400

0800e29c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b088      	sub	sp, #32
 800e2a0:	af02      	add	r7, sp, #8
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
 800e2a8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e2b0:	2b06      	cmp	r3, #6
 800e2b2:	d006      	beq.n	800e2c2 <etharp_update_arp_entry+0x26>
 800e2b4:	4b48      	ldr	r3, [pc, #288]	; (800e3d8 <etharp_update_arp_entry+0x13c>)
 800e2b6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e2ba:	4948      	ldr	r1, [pc, #288]	; (800e3dc <etharp_update_arp_entry+0x140>)
 800e2bc:	4848      	ldr	r0, [pc, #288]	; (800e3e0 <etharp_update_arp_entry+0x144>)
 800e2be:	f002 f8b5 	bl	801042c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d012      	beq.n	800e2ee <etharp_update_arp_entry+0x52>
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00e      	beq.n	800e2ee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	68f9      	ldr	r1, [r7, #12]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f001 f8fc 	bl	800f4d4 <ip4_addr_isbroadcast_u32>
 800e2dc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d105      	bne.n	800e2ee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e2ea:	2be0      	cmp	r3, #224	; 0xe0
 800e2ec:	d102      	bne.n	800e2f4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e2ee:	f06f 030f 	mvn.w	r3, #15
 800e2f2:	e06c      	b.n	800e3ce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e2f4:	78fb      	ldrb	r3, [r7, #3]
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	68b8      	ldr	r0, [r7, #8]
 800e2fc:	f7ff fe56 	bl	800dfac <etharp_find_entry>
 800e300:	4603      	mov	r3, r0
 800e302:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e304:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	da02      	bge.n	800e312 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e30c:	8afb      	ldrh	r3, [r7, #22]
 800e30e:	b25b      	sxtb	r3, r3
 800e310:	e05d      	b.n	800e3ce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e312:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e316:	4933      	ldr	r1, [pc, #204]	; (800e3e4 <etharp_update_arp_entry+0x148>)
 800e318:	4613      	mov	r3, r2
 800e31a:	005b      	lsls	r3, r3, #1
 800e31c:	4413      	add	r3, r2
 800e31e:	00db      	lsls	r3, r3, #3
 800e320:	440b      	add	r3, r1
 800e322:	3314      	adds	r3, #20
 800e324:	2202      	movs	r2, #2
 800e326:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e328:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e32c:	492d      	ldr	r1, [pc, #180]	; (800e3e4 <etharp_update_arp_entry+0x148>)
 800e32e:	4613      	mov	r3, r2
 800e330:	005b      	lsls	r3, r3, #1
 800e332:	4413      	add	r3, r2
 800e334:	00db      	lsls	r3, r3, #3
 800e336:	440b      	add	r3, r1
 800e338:	3308      	adds	r3, #8
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e33e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e342:	4613      	mov	r3, r2
 800e344:	005b      	lsls	r3, r3, #1
 800e346:	4413      	add	r3, r2
 800e348:	00db      	lsls	r3, r3, #3
 800e34a:	3308      	adds	r3, #8
 800e34c:	4a25      	ldr	r2, [pc, #148]	; (800e3e4 <etharp_update_arp_entry+0x148>)
 800e34e:	4413      	add	r3, r2
 800e350:	3304      	adds	r3, #4
 800e352:	2206      	movs	r2, #6
 800e354:	6879      	ldr	r1, [r7, #4]
 800e356:	4618      	mov	r0, r3
 800e358:	f002 f83b 	bl	80103d2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e35c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e360:	4920      	ldr	r1, [pc, #128]	; (800e3e4 <etharp_update_arp_entry+0x148>)
 800e362:	4613      	mov	r3, r2
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	4413      	add	r3, r2
 800e368:	00db      	lsls	r3, r3, #3
 800e36a:	440b      	add	r3, r1
 800e36c:	3312      	adds	r3, #18
 800e36e:	2200      	movs	r2, #0
 800e370:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e372:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e376:	491b      	ldr	r1, [pc, #108]	; (800e3e4 <etharp_update_arp_entry+0x148>)
 800e378:	4613      	mov	r3, r2
 800e37a:	005b      	lsls	r3, r3, #1
 800e37c:	4413      	add	r3, r2
 800e37e:	00db      	lsls	r3, r3, #3
 800e380:	440b      	add	r3, r1
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d021      	beq.n	800e3cc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e388:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e38c:	4915      	ldr	r1, [pc, #84]	; (800e3e4 <etharp_update_arp_entry+0x148>)
 800e38e:	4613      	mov	r3, r2
 800e390:	005b      	lsls	r3, r3, #1
 800e392:	4413      	add	r3, r2
 800e394:	00db      	lsls	r3, r3, #3
 800e396:	440b      	add	r3, r1
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e39c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e3a0:	4910      	ldr	r1, [pc, #64]	; (800e3e4 <etharp_update_arp_entry+0x148>)
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	005b      	lsls	r3, r3, #1
 800e3a6:	4413      	add	r3, r2
 800e3a8:	00db      	lsls	r3, r3, #3
 800e3aa:	440b      	add	r3, r1
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e3b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3ba:	9300      	str	r3, [sp, #0]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6939      	ldr	r1, [r7, #16]
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f001 ff8b 	bl	80102dc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e3c6:	6938      	ldr	r0, [r7, #16]
 800e3c8:	f7f8 fe88 	bl	80070dc <pbuf_free>
  }
  return ERR_OK;
 800e3cc:	2300      	movs	r3, #0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3718      	adds	r7, #24
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	08014334 	.word	0x08014334
 800e3dc:	0801442c 	.word	0x0801442c
 800e3e0:	080143ac 	.word	0x080143ac
 800e3e4:	20000110 	.word	0x20000110

0800e3e8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	60fb      	str	r3, [r7, #12]
 800e3f4:	e01e      	b.n	800e434 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e3f6:	4913      	ldr	r1, [pc, #76]	; (800e444 <etharp_cleanup_netif+0x5c>)
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	005b      	lsls	r3, r3, #1
 800e3fe:	4413      	add	r3, r2
 800e400:	00db      	lsls	r3, r3, #3
 800e402:	440b      	add	r3, r1
 800e404:	3314      	adds	r3, #20
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e40a:	7afb      	ldrb	r3, [r7, #11]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d00e      	beq.n	800e42e <etharp_cleanup_netif+0x46>
 800e410:	490c      	ldr	r1, [pc, #48]	; (800e444 <etharp_cleanup_netif+0x5c>)
 800e412:	68fa      	ldr	r2, [r7, #12]
 800e414:	4613      	mov	r3, r2
 800e416:	005b      	lsls	r3, r3, #1
 800e418:	4413      	add	r3, r2
 800e41a:	00db      	lsls	r3, r3, #3
 800e41c:	440b      	add	r3, r1
 800e41e:	3308      	adds	r3, #8
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	429a      	cmp	r2, r3
 800e426:	d102      	bne.n	800e42e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f7ff fce5 	bl	800ddf8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	3301      	adds	r3, #1
 800e432:	60fb      	str	r3, [r7, #12]
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2b09      	cmp	r3, #9
 800e438:	dddd      	ble.n	800e3f6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e43a:	bf00      	nop
 800e43c:	3710      	adds	r7, #16
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	20000110 	.word	0x20000110

0800e448 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e448:	b5b0      	push	{r4, r5, r7, lr}
 800e44a:	b08a      	sub	sp, #40	; 0x28
 800e44c:	af04      	add	r7, sp, #16
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d107      	bne.n	800e468 <etharp_input+0x20>
 800e458:	4b3d      	ldr	r3, [pc, #244]	; (800e550 <etharp_input+0x108>)
 800e45a:	f240 228a 	movw	r2, #650	; 0x28a
 800e45e:	493d      	ldr	r1, [pc, #244]	; (800e554 <etharp_input+0x10c>)
 800e460:	483d      	ldr	r0, [pc, #244]	; (800e558 <etharp_input+0x110>)
 800e462:	f001 ffe3 	bl	801042c <iprintf>
 800e466:	e06f      	b.n	800e548 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	881b      	ldrh	r3, [r3, #0]
 800e472:	b29b      	uxth	r3, r3
 800e474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e478:	d10c      	bne.n	800e494 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e47e:	2b06      	cmp	r3, #6
 800e480:	d108      	bne.n	800e494 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e486:	2b04      	cmp	r3, #4
 800e488:	d104      	bne.n	800e494 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	885b      	ldrh	r3, [r3, #2]
 800e48e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e490:	2b08      	cmp	r3, #8
 800e492:	d003      	beq.n	800e49c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f7f8 fe21 	bl	80070dc <pbuf_free>
    return;
 800e49a:	e055      	b.n	800e548 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	330e      	adds	r3, #14
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	3318      	adds	r3, #24
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	3304      	adds	r3, #4
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d102      	bne.n	800e4bc <etharp_input+0x74>
    for_us = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	75fb      	strb	r3, [r7, #23]
 800e4ba:	e009      	b.n	800e4d0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e4bc:	68ba      	ldr	r2, [r7, #8]
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	3304      	adds	r3, #4
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	bf0c      	ite	eq
 800e4c8:	2301      	moveq	r3, #1
 800e4ca:	2300      	movne	r3, #0
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	f103 0208 	add.w	r2, r3, #8
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d001      	beq.n	800e4e0 <etharp_input+0x98>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e000      	b.n	800e4e2 <etharp_input+0x9a>
 800e4e0:	2302      	movs	r3, #2
 800e4e2:	f107 010c 	add.w	r1, r7, #12
 800e4e6:	6838      	ldr	r0, [r7, #0]
 800e4e8:	f7ff fed8 	bl	800e29c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	88db      	ldrh	r3, [r3, #6]
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4f6:	d003      	beq.n	800e500 <etharp_input+0xb8>
 800e4f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4fc:	d01e      	beq.n	800e53c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e4fe:	e020      	b.n	800e542 <etharp_input+0xfa>
      if (for_us) {
 800e500:	7dfb      	ldrb	r3, [r7, #23]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d01c      	beq.n	800e540 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e51c:	693a      	ldr	r2, [r7, #16]
 800e51e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e520:	2102      	movs	r1, #2
 800e522:	9103      	str	r1, [sp, #12]
 800e524:	f107 010c 	add.w	r1, r7, #12
 800e528:	9102      	str	r1, [sp, #8]
 800e52a:	9201      	str	r2, [sp, #4]
 800e52c:	9300      	str	r3, [sp, #0]
 800e52e:	462b      	mov	r3, r5
 800e530:	4622      	mov	r2, r4
 800e532:	4601      	mov	r1, r0
 800e534:	6838      	ldr	r0, [r7, #0]
 800e536:	f000 faeb 	bl	800eb10 <etharp_raw>
      break;
 800e53a:	e001      	b.n	800e540 <etharp_input+0xf8>
      break;
 800e53c:	bf00      	nop
 800e53e:	e000      	b.n	800e542 <etharp_input+0xfa>
      break;
 800e540:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f7f8 fdca 	bl	80070dc <pbuf_free>
}
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bdb0      	pop	{r4, r5, r7, pc}
 800e54e:	bf00      	nop
 800e550:	08014334 	.word	0x08014334
 800e554:	08014484 	.word	0x08014484
 800e558:	080143ac 	.word	0x080143ac

0800e55c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af02      	add	r7, sp, #8
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	4613      	mov	r3, r2
 800e568:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e56a:	79fa      	ldrb	r2, [r7, #7]
 800e56c:	4944      	ldr	r1, [pc, #272]	; (800e680 <etharp_output_to_arp_index+0x124>)
 800e56e:	4613      	mov	r3, r2
 800e570:	005b      	lsls	r3, r3, #1
 800e572:	4413      	add	r3, r2
 800e574:	00db      	lsls	r3, r3, #3
 800e576:	440b      	add	r3, r1
 800e578:	3314      	adds	r3, #20
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d806      	bhi.n	800e58e <etharp_output_to_arp_index+0x32>
 800e580:	4b40      	ldr	r3, [pc, #256]	; (800e684 <etharp_output_to_arp_index+0x128>)
 800e582:	f240 22ef 	movw	r2, #751	; 0x2ef
 800e586:	4940      	ldr	r1, [pc, #256]	; (800e688 <etharp_output_to_arp_index+0x12c>)
 800e588:	4840      	ldr	r0, [pc, #256]	; (800e68c <etharp_output_to_arp_index+0x130>)
 800e58a:	f001 ff4f 	bl	801042c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e58e:	79fa      	ldrb	r2, [r7, #7]
 800e590:	493b      	ldr	r1, [pc, #236]	; (800e680 <etharp_output_to_arp_index+0x124>)
 800e592:	4613      	mov	r3, r2
 800e594:	005b      	lsls	r3, r3, #1
 800e596:	4413      	add	r3, r2
 800e598:	00db      	lsls	r3, r3, #3
 800e59a:	440b      	add	r3, r1
 800e59c:	3314      	adds	r3, #20
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	2b02      	cmp	r3, #2
 800e5a2:	d153      	bne.n	800e64c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e5a4:	79fa      	ldrb	r2, [r7, #7]
 800e5a6:	4936      	ldr	r1, [pc, #216]	; (800e680 <etharp_output_to_arp_index+0x124>)
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	005b      	lsls	r3, r3, #1
 800e5ac:	4413      	add	r3, r2
 800e5ae:	00db      	lsls	r3, r3, #3
 800e5b0:	440b      	add	r3, r1
 800e5b2:	3312      	adds	r3, #18
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e5ba:	d919      	bls.n	800e5f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e5bc:	79fa      	ldrb	r2, [r7, #7]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	005b      	lsls	r3, r3, #1
 800e5c2:	4413      	add	r3, r2
 800e5c4:	00db      	lsls	r3, r3, #3
 800e5c6:	4a2e      	ldr	r2, [pc, #184]	; (800e680 <etharp_output_to_arp_index+0x124>)
 800e5c8:	4413      	add	r3, r2
 800e5ca:	3304      	adds	r3, #4
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f000 fb4c 	bl	800ec6c <etharp_request>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d138      	bne.n	800e64c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e5da:	79fa      	ldrb	r2, [r7, #7]
 800e5dc:	4928      	ldr	r1, [pc, #160]	; (800e680 <etharp_output_to_arp_index+0x124>)
 800e5de:	4613      	mov	r3, r2
 800e5e0:	005b      	lsls	r3, r3, #1
 800e5e2:	4413      	add	r3, r2
 800e5e4:	00db      	lsls	r3, r3, #3
 800e5e6:	440b      	add	r3, r1
 800e5e8:	3314      	adds	r3, #20
 800e5ea:	2203      	movs	r2, #3
 800e5ec:	701a      	strb	r2, [r3, #0]
 800e5ee:	e02d      	b.n	800e64c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e5f0:	79fa      	ldrb	r2, [r7, #7]
 800e5f2:	4923      	ldr	r1, [pc, #140]	; (800e680 <etharp_output_to_arp_index+0x124>)
 800e5f4:	4613      	mov	r3, r2
 800e5f6:	005b      	lsls	r3, r3, #1
 800e5f8:	4413      	add	r3, r2
 800e5fa:	00db      	lsls	r3, r3, #3
 800e5fc:	440b      	add	r3, r1
 800e5fe:	3312      	adds	r3, #18
 800e600:	881b      	ldrh	r3, [r3, #0]
 800e602:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e606:	d321      	bcc.n	800e64c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e608:	79fa      	ldrb	r2, [r7, #7]
 800e60a:	4613      	mov	r3, r2
 800e60c:	005b      	lsls	r3, r3, #1
 800e60e:	4413      	add	r3, r2
 800e610:	00db      	lsls	r3, r3, #3
 800e612:	4a1b      	ldr	r2, [pc, #108]	; (800e680 <etharp_output_to_arp_index+0x124>)
 800e614:	4413      	add	r3, r2
 800e616:	1d19      	adds	r1, r3, #4
 800e618:	79fa      	ldrb	r2, [r7, #7]
 800e61a:	4613      	mov	r3, r2
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	4413      	add	r3, r2
 800e620:	00db      	lsls	r3, r3, #3
 800e622:	3308      	adds	r3, #8
 800e624:	4a16      	ldr	r2, [pc, #88]	; (800e680 <etharp_output_to_arp_index+0x124>)
 800e626:	4413      	add	r3, r2
 800e628:	3304      	adds	r3, #4
 800e62a:	461a      	mov	r2, r3
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f000 fafb 	bl	800ec28 <etharp_request_dst>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d109      	bne.n	800e64c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e638:	79fa      	ldrb	r2, [r7, #7]
 800e63a:	4911      	ldr	r1, [pc, #68]	; (800e680 <etharp_output_to_arp_index+0x124>)
 800e63c:	4613      	mov	r3, r2
 800e63e:	005b      	lsls	r3, r3, #1
 800e640:	4413      	add	r3, r2
 800e642:	00db      	lsls	r3, r3, #3
 800e644:	440b      	add	r3, r1
 800e646:	3314      	adds	r3, #20
 800e648:	2203      	movs	r2, #3
 800e64a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e652:	79fa      	ldrb	r2, [r7, #7]
 800e654:	4613      	mov	r3, r2
 800e656:	005b      	lsls	r3, r3, #1
 800e658:	4413      	add	r3, r2
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	3308      	adds	r3, #8
 800e65e:	4a08      	ldr	r2, [pc, #32]	; (800e680 <etharp_output_to_arp_index+0x124>)
 800e660:	4413      	add	r3, r2
 800e662:	1d1a      	adds	r2, r3, #4
 800e664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	4613      	mov	r3, r2
 800e66c:	460a      	mov	r2, r1
 800e66e:	68b9      	ldr	r1, [r7, #8]
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f001 fe33 	bl	80102dc <ethernet_output>
 800e676:	4603      	mov	r3, r0
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3710      	adds	r7, #16
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	20000110 	.word	0x20000110
 800e684:	08014334 	.word	0x08014334
 800e688:	080144a4 	.word	0x080144a4
 800e68c:	080143ac 	.word	0x080143ac

0800e690 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b08a      	sub	sp, #40	; 0x28
 800e694:	af02      	add	r7, sp, #8
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d106      	bne.n	800e6b4 <etharp_output+0x24>
 800e6a6:	4b73      	ldr	r3, [pc, #460]	; (800e874 <etharp_output+0x1e4>)
 800e6a8:	f240 321e 	movw	r2, #798	; 0x31e
 800e6ac:	4972      	ldr	r1, [pc, #456]	; (800e878 <etharp_output+0x1e8>)
 800e6ae:	4873      	ldr	r0, [pc, #460]	; (800e87c <etharp_output+0x1ec>)
 800e6b0:	f001 febc 	bl	801042c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d106      	bne.n	800e6c8 <etharp_output+0x38>
 800e6ba:	4b6e      	ldr	r3, [pc, #440]	; (800e874 <etharp_output+0x1e4>)
 800e6bc:	f240 321f 	movw	r2, #799	; 0x31f
 800e6c0:	496f      	ldr	r1, [pc, #444]	; (800e880 <etharp_output+0x1f0>)
 800e6c2:	486e      	ldr	r0, [pc, #440]	; (800e87c <etharp_output+0x1ec>)
 800e6c4:	f001 feb2 	bl	801042c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d106      	bne.n	800e6dc <etharp_output+0x4c>
 800e6ce:	4b69      	ldr	r3, [pc, #420]	; (800e874 <etharp_output+0x1e4>)
 800e6d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e6d4:	496b      	ldr	r1, [pc, #428]	; (800e884 <etharp_output+0x1f4>)
 800e6d6:	4869      	ldr	r0, [pc, #420]	; (800e87c <etharp_output+0x1ec>)
 800e6d8:	f001 fea8 	bl	801042c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	68f9      	ldr	r1, [r7, #12]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 fef6 	bl	800f4d4 <ip4_addr_isbroadcast_u32>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d002      	beq.n	800e6f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e6ee:	4b66      	ldr	r3, [pc, #408]	; (800e888 <etharp_output+0x1f8>)
 800e6f0:	61fb      	str	r3, [r7, #28]
 800e6f2:	e0af      	b.n	800e854 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6fc:	2be0      	cmp	r3, #224	; 0xe0
 800e6fe:	d118      	bne.n	800e732 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e700:	2301      	movs	r3, #1
 800e702:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e704:	2300      	movs	r3, #0
 800e706:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e708:	235e      	movs	r3, #94	; 0x5e
 800e70a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	3301      	adds	r3, #1
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e716:	b2db      	uxtb	r3, r3
 800e718:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	3302      	adds	r3, #2
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	3303      	adds	r3, #3
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e72a:	f107 0310 	add.w	r3, r7, #16
 800e72e:	61fb      	str	r3, [r7, #28]
 800e730:	e090      	b.n	800e854 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	3304      	adds	r3, #4
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	405a      	eors	r2, r3
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	3308      	adds	r3, #8
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4013      	ands	r3, r2
 800e746:	2b00      	cmp	r3, #0
 800e748:	d012      	beq.n	800e770 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e750:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e754:	4293      	cmp	r3, r2
 800e756:	d00b      	beq.n	800e770 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	330c      	adds	r3, #12
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d003      	beq.n	800e76a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	330c      	adds	r3, #12
 800e766:	61bb      	str	r3, [r7, #24]
 800e768:	e002      	b.n	800e770 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e76a:	f06f 0303 	mvn.w	r3, #3
 800e76e:	e07d      	b.n	800e86c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e770:	4b46      	ldr	r3, [pc, #280]	; (800e88c <etharp_output+0x1fc>)
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	4619      	mov	r1, r3
 800e776:	4a46      	ldr	r2, [pc, #280]	; (800e890 <etharp_output+0x200>)
 800e778:	460b      	mov	r3, r1
 800e77a:	005b      	lsls	r3, r3, #1
 800e77c:	440b      	add	r3, r1
 800e77e:	00db      	lsls	r3, r3, #3
 800e780:	4413      	add	r3, r2
 800e782:	3314      	adds	r3, #20
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	2b01      	cmp	r3, #1
 800e788:	d925      	bls.n	800e7d6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e78a:	4b40      	ldr	r3, [pc, #256]	; (800e88c <etharp_output+0x1fc>)
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	4619      	mov	r1, r3
 800e790:	4a3f      	ldr	r2, [pc, #252]	; (800e890 <etharp_output+0x200>)
 800e792:	460b      	mov	r3, r1
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	440b      	add	r3, r1
 800e798:	00db      	lsls	r3, r3, #3
 800e79a:	4413      	add	r3, r2
 800e79c:	3308      	adds	r3, #8
 800e79e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d117      	bne.n	800e7d6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	4b38      	ldr	r3, [pc, #224]	; (800e88c <etharp_output+0x1fc>)
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	4937      	ldr	r1, [pc, #220]	; (800e890 <etharp_output+0x200>)
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	005b      	lsls	r3, r3, #1
 800e7b6:	4403      	add	r3, r0
 800e7b8:	00db      	lsls	r3, r3, #3
 800e7ba:	440b      	add	r3, r1
 800e7bc:	3304      	adds	r3, #4
 800e7be:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d108      	bne.n	800e7d6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e7c4:	4b31      	ldr	r3, [pc, #196]	; (800e88c <etharp_output+0x1fc>)
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	68b9      	ldr	r1, [r7, #8]
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f7ff fec5 	bl	800e55c <etharp_output_to_arp_index>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	e04a      	b.n	800e86c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	75fb      	strb	r3, [r7, #23]
 800e7da:	e031      	b.n	800e840 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e7dc:	7dfa      	ldrb	r2, [r7, #23]
 800e7de:	492c      	ldr	r1, [pc, #176]	; (800e890 <etharp_output+0x200>)
 800e7e0:	4613      	mov	r3, r2
 800e7e2:	005b      	lsls	r3, r3, #1
 800e7e4:	4413      	add	r3, r2
 800e7e6:	00db      	lsls	r3, r3, #3
 800e7e8:	440b      	add	r3, r1
 800e7ea:	3314      	adds	r3, #20
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d923      	bls.n	800e83a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e7f2:	7dfa      	ldrb	r2, [r7, #23]
 800e7f4:	4926      	ldr	r1, [pc, #152]	; (800e890 <etharp_output+0x200>)
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	005b      	lsls	r3, r3, #1
 800e7fa:	4413      	add	r3, r2
 800e7fc:	00db      	lsls	r3, r3, #3
 800e7fe:	440b      	add	r3, r1
 800e800:	3308      	adds	r3, #8
 800e802:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	429a      	cmp	r2, r3
 800e808:	d117      	bne.n	800e83a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	6819      	ldr	r1, [r3, #0]
 800e80e:	7dfa      	ldrb	r2, [r7, #23]
 800e810:	481f      	ldr	r0, [pc, #124]	; (800e890 <etharp_output+0x200>)
 800e812:	4613      	mov	r3, r2
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	4413      	add	r3, r2
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	4403      	add	r3, r0
 800e81c:	3304      	adds	r3, #4
 800e81e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e820:	4299      	cmp	r1, r3
 800e822:	d10a      	bne.n	800e83a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e824:	4a19      	ldr	r2, [pc, #100]	; (800e88c <etharp_output+0x1fc>)
 800e826:	7dfb      	ldrb	r3, [r7, #23]
 800e828:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e82a:	7dfb      	ldrb	r3, [r7, #23]
 800e82c:	461a      	mov	r2, r3
 800e82e:	68b9      	ldr	r1, [r7, #8]
 800e830:	68f8      	ldr	r0, [r7, #12]
 800e832:	f7ff fe93 	bl	800e55c <etharp_output_to_arp_index>
 800e836:	4603      	mov	r3, r0
 800e838:	e018      	b.n	800e86c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e83a:	7dfb      	ldrb	r3, [r7, #23]
 800e83c:	3301      	adds	r3, #1
 800e83e:	75fb      	strb	r3, [r7, #23]
 800e840:	7dfb      	ldrb	r3, [r7, #23]
 800e842:	2b09      	cmp	r3, #9
 800e844:	d9ca      	bls.n	800e7dc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e846:	68ba      	ldr	r2, [r7, #8]
 800e848:	69b9      	ldr	r1, [r7, #24]
 800e84a:	68f8      	ldr	r0, [r7, #12]
 800e84c:	f000 f822 	bl	800e894 <etharp_query>
 800e850:	4603      	mov	r3, r0
 800e852:	e00b      	b.n	800e86c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e85a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	68b9      	ldr	r1, [r7, #8]
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f001 fd39 	bl	80102dc <ethernet_output>
 800e86a:	4603      	mov	r3, r0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3720      	adds	r7, #32
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	08014334 	.word	0x08014334
 800e878:	08014484 	.word	0x08014484
 800e87c:	080143ac 	.word	0x080143ac
 800e880:	080144d4 	.word	0x080144d4
 800e884:	08014474 	.word	0x08014474
 800e888:	08014adc 	.word	0x08014adc
 800e88c:	20000200 	.word	0x20000200
 800e890:	20000110 	.word	0x20000110

0800e894 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b08c      	sub	sp, #48	; 0x30
 800e898:	af02      	add	r7, sp, #8
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	3326      	adds	r3, #38	; 0x26
 800e8a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e8a6:	23ff      	movs	r3, #255	; 0xff
 800e8a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	68f9      	ldr	r1, [r7, #12]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f000 fe0c 	bl	800f4d4 <ip4_addr_isbroadcast_u32>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d10c      	bne.n	800e8dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e8ca:	2be0      	cmp	r3, #224	; 0xe0
 800e8cc:	d006      	beq.n	800e8dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d003      	beq.n	800e8dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e8dc:	f06f 030f 	mvn.w	r3, #15
 800e8e0:	e102      	b.n	800eae8 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e8e2:	68fa      	ldr	r2, [r7, #12]
 800e8e4:	2101      	movs	r1, #1
 800e8e6:	68b8      	ldr	r0, [r7, #8]
 800e8e8:	f7ff fb60 	bl	800dfac <etharp_find_entry>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e8f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	da02      	bge.n	800e8fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e8f8:	8a7b      	ldrh	r3, [r7, #18]
 800e8fa:	b25b      	sxtb	r3, r3
 800e8fc:	e0f4      	b.n	800eae8 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e8fe:	8a7b      	ldrh	r3, [r7, #18]
 800e900:	2b7e      	cmp	r3, #126	; 0x7e
 800e902:	d906      	bls.n	800e912 <etharp_query+0x7e>
 800e904:	4b7a      	ldr	r3, [pc, #488]	; (800eaf0 <etharp_query+0x25c>)
 800e906:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e90a:	497a      	ldr	r1, [pc, #488]	; (800eaf4 <etharp_query+0x260>)
 800e90c:	487a      	ldr	r0, [pc, #488]	; (800eaf8 <etharp_query+0x264>)
 800e90e:	f001 fd8d 	bl	801042c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e912:	8a7b      	ldrh	r3, [r7, #18]
 800e914:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e916:	7c7a      	ldrb	r2, [r7, #17]
 800e918:	4978      	ldr	r1, [pc, #480]	; (800eafc <etharp_query+0x268>)
 800e91a:	4613      	mov	r3, r2
 800e91c:	005b      	lsls	r3, r3, #1
 800e91e:	4413      	add	r3, r2
 800e920:	00db      	lsls	r3, r3, #3
 800e922:	440b      	add	r3, r1
 800e924:	3314      	adds	r3, #20
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d115      	bne.n	800e958 <etharp_query+0xc4>
    is_new_entry = 1;
 800e92c:	2301      	movs	r3, #1
 800e92e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e930:	7c7a      	ldrb	r2, [r7, #17]
 800e932:	4972      	ldr	r1, [pc, #456]	; (800eafc <etharp_query+0x268>)
 800e934:	4613      	mov	r3, r2
 800e936:	005b      	lsls	r3, r3, #1
 800e938:	4413      	add	r3, r2
 800e93a:	00db      	lsls	r3, r3, #3
 800e93c:	440b      	add	r3, r1
 800e93e:	3314      	adds	r3, #20
 800e940:	2201      	movs	r2, #1
 800e942:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e944:	7c7a      	ldrb	r2, [r7, #17]
 800e946:	496d      	ldr	r1, [pc, #436]	; (800eafc <etharp_query+0x268>)
 800e948:	4613      	mov	r3, r2
 800e94a:	005b      	lsls	r3, r3, #1
 800e94c:	4413      	add	r3, r2
 800e94e:	00db      	lsls	r3, r3, #3
 800e950:	440b      	add	r3, r1
 800e952:	3308      	adds	r3, #8
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e958:	7c7a      	ldrb	r2, [r7, #17]
 800e95a:	4968      	ldr	r1, [pc, #416]	; (800eafc <etharp_query+0x268>)
 800e95c:	4613      	mov	r3, r2
 800e95e:	005b      	lsls	r3, r3, #1
 800e960:	4413      	add	r3, r2
 800e962:	00db      	lsls	r3, r3, #3
 800e964:	440b      	add	r3, r1
 800e966:	3314      	adds	r3, #20
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d011      	beq.n	800e992 <etharp_query+0xfe>
 800e96e:	7c7a      	ldrb	r2, [r7, #17]
 800e970:	4962      	ldr	r1, [pc, #392]	; (800eafc <etharp_query+0x268>)
 800e972:	4613      	mov	r3, r2
 800e974:	005b      	lsls	r3, r3, #1
 800e976:	4413      	add	r3, r2
 800e978:	00db      	lsls	r3, r3, #3
 800e97a:	440b      	add	r3, r1
 800e97c:	3314      	adds	r3, #20
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	2b01      	cmp	r3, #1
 800e982:	d806      	bhi.n	800e992 <etharp_query+0xfe>
 800e984:	4b5a      	ldr	r3, [pc, #360]	; (800eaf0 <etharp_query+0x25c>)
 800e986:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e98a:	495d      	ldr	r1, [pc, #372]	; (800eb00 <etharp_query+0x26c>)
 800e98c:	485a      	ldr	r0, [pc, #360]	; (800eaf8 <etharp_query+0x264>)
 800e98e:	f001 fd4d 	bl	801042c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e992:	6a3b      	ldr	r3, [r7, #32]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d102      	bne.n	800e99e <etharp_query+0x10a>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d10c      	bne.n	800e9b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e99e:	68b9      	ldr	r1, [r7, #8]
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f000 f963 	bl	800ec6c <etharp_request>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d102      	bne.n	800e9b8 <etharp_query+0x124>
      return result;
 800e9b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e9b6:	e097      	b.n	800eae8 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d106      	bne.n	800e9cc <etharp_query+0x138>
 800e9be:	4b4c      	ldr	r3, [pc, #304]	; (800eaf0 <etharp_query+0x25c>)
 800e9c0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e9c4:	494f      	ldr	r1, [pc, #316]	; (800eb04 <etharp_query+0x270>)
 800e9c6:	484c      	ldr	r0, [pc, #304]	; (800eaf8 <etharp_query+0x264>)
 800e9c8:	f001 fd30 	bl	801042c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e9cc:	7c7a      	ldrb	r2, [r7, #17]
 800e9ce:	494b      	ldr	r1, [pc, #300]	; (800eafc <etharp_query+0x268>)
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	005b      	lsls	r3, r3, #1
 800e9d4:	4413      	add	r3, r2
 800e9d6:	00db      	lsls	r3, r3, #3
 800e9d8:	440b      	add	r3, r1
 800e9da:	3314      	adds	r3, #20
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d918      	bls.n	800ea14 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e9e2:	4a49      	ldr	r2, [pc, #292]	; (800eb08 <etharp_query+0x274>)
 800e9e4:	7c7b      	ldrb	r3, [r7, #17]
 800e9e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e9e8:	7c7a      	ldrb	r2, [r7, #17]
 800e9ea:	4613      	mov	r3, r2
 800e9ec:	005b      	lsls	r3, r3, #1
 800e9ee:	4413      	add	r3, r2
 800e9f0:	00db      	lsls	r3, r3, #3
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	4a41      	ldr	r2, [pc, #260]	; (800eafc <etharp_query+0x268>)
 800e9f6:	4413      	add	r3, r2
 800e9f8:	1d1a      	adds	r2, r3, #4
 800e9fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	4613      	mov	r3, r2
 800ea02:	697a      	ldr	r2, [r7, #20]
 800ea04:	6879      	ldr	r1, [r7, #4]
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f001 fc68 	bl	80102dc <ethernet_output>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea12:	e067      	b.n	800eae4 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ea14:	7c7a      	ldrb	r2, [r7, #17]
 800ea16:	4939      	ldr	r1, [pc, #228]	; (800eafc <etharp_query+0x268>)
 800ea18:	4613      	mov	r3, r2
 800ea1a:	005b      	lsls	r3, r3, #1
 800ea1c:	4413      	add	r3, r2
 800ea1e:	00db      	lsls	r3, r3, #3
 800ea20:	440b      	add	r3, r1
 800ea22:	3314      	adds	r3, #20
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	2b01      	cmp	r3, #1
 800ea28:	d15c      	bne.n	800eae4 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ea32:	e01c      	b.n	800ea6e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	895a      	ldrh	r2, [r3, #10]
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	891b      	ldrh	r3, [r3, #8]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d10a      	bne.n	800ea56 <etharp_query+0x1c2>
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d006      	beq.n	800ea56 <etharp_query+0x1c2>
 800ea48:	4b29      	ldr	r3, [pc, #164]	; (800eaf0 <etharp_query+0x25c>)
 800ea4a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ea4e:	492f      	ldr	r1, [pc, #188]	; (800eb0c <etharp_query+0x278>)
 800ea50:	4829      	ldr	r0, [pc, #164]	; (800eaf8 <etharp_query+0x264>)
 800ea52:	f001 fceb 	bl	801042c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	7b1b      	ldrb	r3, [r3, #12]
 800ea5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d002      	beq.n	800ea68 <etharp_query+0x1d4>
        copy_needed = 1;
 800ea62:	2301      	movs	r3, #1
 800ea64:	61bb      	str	r3, [r7, #24]
        break;
 800ea66:	e005      	b.n	800ea74 <etharp_query+0x1e0>
      }
      p = p->next;
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ea6e:	69fb      	ldr	r3, [r7, #28]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1df      	bne.n	800ea34 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d007      	beq.n	800ea8a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ea80:	200e      	movs	r0, #14
 800ea82:	f7f8 fdb1 	bl	80075e8 <pbuf_clone>
 800ea86:	61f8      	str	r0, [r7, #28]
 800ea88:	e004      	b.n	800ea94 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ea8e:	69f8      	ldr	r0, [r7, #28]
 800ea90:	f7f8 fbc4 	bl	800721c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d021      	beq.n	800eade <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ea9a:	7c7a      	ldrb	r2, [r7, #17]
 800ea9c:	4917      	ldr	r1, [pc, #92]	; (800eafc <etharp_query+0x268>)
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	005b      	lsls	r3, r3, #1
 800eaa2:	4413      	add	r3, r2
 800eaa4:	00db      	lsls	r3, r3, #3
 800eaa6:	440b      	add	r3, r1
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00a      	beq.n	800eac4 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800eaae:	7c7a      	ldrb	r2, [r7, #17]
 800eab0:	4912      	ldr	r1, [pc, #72]	; (800eafc <etharp_query+0x268>)
 800eab2:	4613      	mov	r3, r2
 800eab4:	005b      	lsls	r3, r3, #1
 800eab6:	4413      	add	r3, r2
 800eab8:	00db      	lsls	r3, r3, #3
 800eaba:	440b      	add	r3, r1
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7f8 fb0c 	bl	80070dc <pbuf_free>
      }
      arp_table[i].q = p;
 800eac4:	7c7a      	ldrb	r2, [r7, #17]
 800eac6:	490d      	ldr	r1, [pc, #52]	; (800eafc <etharp_query+0x268>)
 800eac8:	4613      	mov	r3, r2
 800eaca:	005b      	lsls	r3, r3, #1
 800eacc:	4413      	add	r3, r2
 800eace:	00db      	lsls	r3, r3, #3
 800ead0:	440b      	add	r3, r1
 800ead2:	69fa      	ldr	r2, [r7, #28]
 800ead4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ead6:	2300      	movs	r3, #0
 800ead8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eadc:	e002      	b.n	800eae4 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800eade:	23ff      	movs	r3, #255	; 0xff
 800eae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800eae4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3728      	adds	r7, #40	; 0x28
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	08014334 	.word	0x08014334
 800eaf4:	080144e0 	.word	0x080144e0
 800eaf8:	080143ac 	.word	0x080143ac
 800eafc:	20000110 	.word	0x20000110
 800eb00:	080144f0 	.word	0x080144f0
 800eb04:	080144d4 	.word	0x080144d4
 800eb08:	20000200 	.word	0x20000200
 800eb0c:	08014518 	.word	0x08014518

0800eb10 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b08a      	sub	sp, #40	; 0x28
 800eb14:	af02      	add	r7, sp, #8
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	607a      	str	r2, [r7, #4]
 800eb1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d106      	bne.n	800eb36 <etharp_raw+0x26>
 800eb28:	4b3a      	ldr	r3, [pc, #232]	; (800ec14 <etharp_raw+0x104>)
 800eb2a:	f240 4257 	movw	r2, #1111	; 0x457
 800eb2e:	493a      	ldr	r1, [pc, #232]	; (800ec18 <etharp_raw+0x108>)
 800eb30:	483a      	ldr	r0, [pc, #232]	; (800ec1c <etharp_raw+0x10c>)
 800eb32:	f001 fc7b 	bl	801042c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800eb36:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eb3a:	211c      	movs	r1, #28
 800eb3c:	200e      	movs	r0, #14
 800eb3e:	f7f7 ffed 	bl	8006b1c <pbuf_alloc>
 800eb42:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d102      	bne.n	800eb50 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800eb4a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb4e:	e05d      	b.n	800ec0c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800eb50:	69bb      	ldr	r3, [r7, #24]
 800eb52:	895b      	ldrh	r3, [r3, #10]
 800eb54:	2b1b      	cmp	r3, #27
 800eb56:	d806      	bhi.n	800eb66 <etharp_raw+0x56>
 800eb58:	4b2e      	ldr	r3, [pc, #184]	; (800ec14 <etharp_raw+0x104>)
 800eb5a:	f240 4263 	movw	r2, #1123	; 0x463
 800eb5e:	4930      	ldr	r1, [pc, #192]	; (800ec20 <etharp_raw+0x110>)
 800eb60:	482e      	ldr	r0, [pc, #184]	; (800ec1c <etharp_raw+0x10c>)
 800eb62:	f001 fc63 	bl	801042c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800eb66:	69bb      	ldr	r3, [r7, #24]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800eb6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7f6 ffdc 	bl	8005b2c <lwip_htons>
 800eb74:	4603      	mov	r3, r0
 800eb76:	461a      	mov	r2, r3
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb82:	2b06      	cmp	r3, #6
 800eb84:	d006      	beq.n	800eb94 <etharp_raw+0x84>
 800eb86:	4b23      	ldr	r3, [pc, #140]	; (800ec14 <etharp_raw+0x104>)
 800eb88:	f240 426a 	movw	r2, #1130	; 0x46a
 800eb8c:	4925      	ldr	r1, [pc, #148]	; (800ec24 <etharp_raw+0x114>)
 800eb8e:	4823      	ldr	r0, [pc, #140]	; (800ec1c <etharp_raw+0x10c>)
 800eb90:	f001 fc4c 	bl	801042c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	3308      	adds	r3, #8
 800eb98:	2206      	movs	r2, #6
 800eb9a:	6839      	ldr	r1, [r7, #0]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f001 fc18 	bl	80103d2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	3312      	adds	r3, #18
 800eba6:	2206      	movs	r2, #6
 800eba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f001 fc11 	bl	80103d2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	330e      	adds	r3, #14
 800ebb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebb6:	6812      	ldr	r2, [r2, #0]
 800ebb8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	3318      	adds	r3, #24
 800ebbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebc0:	6812      	ldr	r2, [r2, #0]
 800ebc2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	701a      	strb	r2, [r3, #0]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f042 0201 	orr.w	r2, r2, #1
 800ebd0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f042 0208 	orr.w	r2, r2, #8
 800ebda:	709a      	strb	r2, [r3, #2]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	2206      	movs	r2, #6
 800ebe4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	2204      	movs	r2, #4
 800ebea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ebec:	f640 0306 	movw	r3, #2054	; 0x806
 800ebf0:	9300      	str	r3, [sp, #0]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	69b9      	ldr	r1, [r7, #24]
 800ebf8:	68f8      	ldr	r0, [r7, #12]
 800ebfa:	f001 fb6f 	bl	80102dc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ebfe:	69b8      	ldr	r0, [r7, #24]
 800ec00:	f7f8 fa6c 	bl	80070dc <pbuf_free>
  p = NULL;
 800ec04:	2300      	movs	r3, #0
 800ec06:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ec08:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3720      	adds	r7, #32
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	08014334 	.word	0x08014334
 800ec18:	08014484 	.word	0x08014484
 800ec1c:	080143ac 	.word	0x080143ac
 800ec20:	08014534 	.word	0x08014534
 800ec24:	08014568 	.word	0x08014568

0800ec28 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b088      	sub	sp, #32
 800ec2c:	af04      	add	r7, sp, #16
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ec44:	2201      	movs	r2, #1
 800ec46:	9203      	str	r2, [sp, #12]
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	9202      	str	r2, [sp, #8]
 800ec4c:	4a06      	ldr	r2, [pc, #24]	; (800ec68 <etharp_request_dst+0x40>)
 800ec4e:	9201      	str	r2, [sp, #4]
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	4603      	mov	r3, r0
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	68f8      	ldr	r0, [r7, #12]
 800ec58:	f7ff ff5a 	bl	800eb10 <etharp_raw>
 800ec5c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	08014ae4 	.word	0x08014ae4

0800ec6c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ec76:	4a05      	ldr	r2, [pc, #20]	; (800ec8c <etharp_request+0x20>)
 800ec78:	6839      	ldr	r1, [r7, #0]
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f7ff ffd4 	bl	800ec28 <etharp_request_dst>
 800ec80:	4603      	mov	r3, r0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	08014adc 	.word	0x08014adc

0800ec90 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b08e      	sub	sp, #56	; 0x38
 800ec94:	af04      	add	r7, sp, #16
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ec9a:	4b79      	ldr	r3, [pc, #484]	; (800ee80 <icmp_input+0x1f0>)
 800ec9c:	689b      	ldr	r3, [r3, #8]
 800ec9e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800eca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	f003 030f 	and.w	r3, r3, #15
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ecb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecb2:	2b13      	cmp	r3, #19
 800ecb4:	f240 80cd 	bls.w	800ee52 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	895b      	ldrh	r3, [r3, #10]
 800ecbc:	2b03      	cmp	r3, #3
 800ecbe:	f240 80ca 	bls.w	800ee56 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800eccc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f000 80b7 	beq.w	800ee44 <icmp_input+0x1b4>
 800ecd6:	2b08      	cmp	r3, #8
 800ecd8:	f040 80b7 	bne.w	800ee4a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ecdc:	4b69      	ldr	r3, [pc, #420]	; (800ee84 <icmp_input+0x1f4>)
 800ecde:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ece0:	4b67      	ldr	r3, [pc, #412]	; (800ee80 <icmp_input+0x1f0>)
 800ece2:	695b      	ldr	r3, [r3, #20]
 800ece4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ece8:	2be0      	cmp	r3, #224	; 0xe0
 800ecea:	f000 80bb 	beq.w	800ee64 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ecee:	4b64      	ldr	r3, [pc, #400]	; (800ee80 <icmp_input+0x1f0>)
 800ecf0:	695a      	ldr	r2, [r3, #20]
 800ecf2:	4b63      	ldr	r3, [pc, #396]	; (800ee80 <icmp_input+0x1f0>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	4610      	mov	r0, r2
 800ecfa:	f000 fbeb 	bl	800f4d4 <ip4_addr_isbroadcast_u32>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f040 80b1 	bne.w	800ee68 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	891b      	ldrh	r3, [r3, #8]
 800ed0a:	2b07      	cmp	r3, #7
 800ed0c:	f240 80a5 	bls.w	800ee5a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ed10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed12:	330e      	adds	r3, #14
 800ed14:	4619      	mov	r1, r3
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f7f8 f94a 	bl	8006fb0 <pbuf_add_header>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d04b      	beq.n	800edba <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	891a      	ldrh	r2, [r3, #8]
 800ed26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed28:	4413      	add	r3, r2
 800ed2a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	891b      	ldrh	r3, [r3, #8]
 800ed30:	8b7a      	ldrh	r2, [r7, #26]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	f0c0 809a 	bcc.w	800ee6c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ed38:	8b7b      	ldrh	r3, [r7, #26]
 800ed3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed3e:	4619      	mov	r1, r3
 800ed40:	200e      	movs	r0, #14
 800ed42:	f7f7 feeb 	bl	8006b1c <pbuf_alloc>
 800ed46:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	f000 8090 	beq.w	800ee70 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	895b      	ldrh	r3, [r3, #10]
 800ed54:	461a      	mov	r2, r3
 800ed56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed58:	3308      	adds	r3, #8
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d203      	bcs.n	800ed66 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ed5e:	6978      	ldr	r0, [r7, #20]
 800ed60:	f7f8 f9bc 	bl	80070dc <pbuf_free>
          goto icmperr;
 800ed64:	e085      	b.n	800ee72 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ed6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f001 fb2f 	bl	80103d2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ed74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed76:	4619      	mov	r1, r3
 800ed78:	6978      	ldr	r0, [r7, #20]
 800ed7a:	f7f8 f929 	bl	8006fd0 <pbuf_remove_header>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d009      	beq.n	800ed98 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ed84:	4b40      	ldr	r3, [pc, #256]	; (800ee88 <icmp_input+0x1f8>)
 800ed86:	22b6      	movs	r2, #182	; 0xb6
 800ed88:	4940      	ldr	r1, [pc, #256]	; (800ee8c <icmp_input+0x1fc>)
 800ed8a:	4841      	ldr	r0, [pc, #260]	; (800ee90 <icmp_input+0x200>)
 800ed8c:	f001 fb4e 	bl	801042c <iprintf>
          pbuf_free(r);
 800ed90:	6978      	ldr	r0, [r7, #20]
 800ed92:	f7f8 f9a3 	bl	80070dc <pbuf_free>
          goto icmperr;
 800ed96:	e06c      	b.n	800ee72 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ed98:	6879      	ldr	r1, [r7, #4]
 800ed9a:	6978      	ldr	r0, [r7, #20]
 800ed9c:	f7f8 fab6 	bl	800730c <pbuf_copy>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d003      	beq.n	800edae <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800eda6:	6978      	ldr	r0, [r7, #20]
 800eda8:	f7f8 f998 	bl	80070dc <pbuf_free>
          goto icmperr;
 800edac:	e061      	b.n	800ee72 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f7f8 f994 	bl	80070dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	607b      	str	r3, [r7, #4]
 800edb8:	e00f      	b.n	800edda <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800edba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edbc:	330e      	adds	r3, #14
 800edbe:	4619      	mov	r1, r3
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f7f8 f905 	bl	8006fd0 <pbuf_remove_header>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d006      	beq.n	800edda <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800edcc:	4b2e      	ldr	r3, [pc, #184]	; (800ee88 <icmp_input+0x1f8>)
 800edce:	22c7      	movs	r2, #199	; 0xc7
 800edd0:	4930      	ldr	r1, [pc, #192]	; (800ee94 <icmp_input+0x204>)
 800edd2:	482f      	ldr	r0, [pc, #188]	; (800ee90 <icmp_input+0x200>)
 800edd4:	f001 fb2a 	bl	801042c <iprintf>
          goto icmperr;
 800edd8:	e04b      	b.n	800ee72 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ede0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ede2:	4619      	mov	r1, r3
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f7f8 f8e3 	bl	8006fb0 <pbuf_add_header>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d12b      	bne.n	800ee48 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800edfe:	4b20      	ldr	r3, [pc, #128]	; (800ee80 <icmp_input+0x1f0>)
 800ee00:	691a      	ldr	r2, [r3, #16]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	709a      	strb	r2, [r3, #2]
 800ee12:	2200      	movs	r2, #0
 800ee14:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	22ff      	movs	r2, #255	; 0xff
 800ee1a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	729a      	strb	r2, [r3, #10]
 800ee22:	2200      	movs	r2, #0
 800ee24:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	9302      	str	r3, [sp, #8]
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	9301      	str	r3, [sp, #4]
 800ee2e:	2300      	movs	r3, #0
 800ee30:	9300      	str	r3, [sp, #0]
 800ee32:	23ff      	movs	r3, #255	; 0xff
 800ee34:	2200      	movs	r2, #0
 800ee36:	69f9      	ldr	r1, [r7, #28]
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 fa73 	bl	800f324 <ip4_output_if>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ee42:	e001      	b.n	800ee48 <icmp_input+0x1b8>
      break;
 800ee44:	bf00      	nop
 800ee46:	e000      	b.n	800ee4a <icmp_input+0x1ba>
      break;
 800ee48:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7f8 f946 	bl	80070dc <pbuf_free>
  return;
 800ee50:	e013      	b.n	800ee7a <icmp_input+0x1ea>
    goto lenerr;
 800ee52:	bf00      	nop
 800ee54:	e002      	b.n	800ee5c <icmp_input+0x1cc>
    goto lenerr;
 800ee56:	bf00      	nop
 800ee58:	e000      	b.n	800ee5c <icmp_input+0x1cc>
        goto lenerr;
 800ee5a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f7f8 f93d 	bl	80070dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ee62:	e00a      	b.n	800ee7a <icmp_input+0x1ea>
        goto icmperr;
 800ee64:	bf00      	nop
 800ee66:	e004      	b.n	800ee72 <icmp_input+0x1e2>
        goto icmperr;
 800ee68:	bf00      	nop
 800ee6a:	e002      	b.n	800ee72 <icmp_input+0x1e2>
          goto icmperr;
 800ee6c:	bf00      	nop
 800ee6e:	e000      	b.n	800ee72 <icmp_input+0x1e2>
          goto icmperr;
 800ee70:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f7f8 f932 	bl	80070dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ee78:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ee7a:	3728      	adds	r7, #40	; 0x28
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	20003408 	.word	0x20003408
 800ee84:	2000341c 	.word	0x2000341c
 800ee88:	080145ac 	.word	0x080145ac
 800ee8c:	080145e4 	.word	0x080145e4
 800ee90:	0801461c 	.word	0x0801461c
 800ee94:	08014644 	.word	0x08014644

0800ee98 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	460b      	mov	r3, r1
 800eea2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800eea4:	78fb      	ldrb	r3, [r7, #3]
 800eea6:	461a      	mov	r2, r3
 800eea8:	2103      	movs	r1, #3
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 f814 	bl	800eed8 <icmp_send_response>
}
 800eeb0:	bf00      	nop
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	460b      	mov	r3, r1
 800eec2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800eec4:	78fb      	ldrb	r3, [r7, #3]
 800eec6:	461a      	mov	r2, r3
 800eec8:	210b      	movs	r1, #11
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 f804 	bl	800eed8 <icmp_send_response>
}
 800eed0:	bf00      	nop
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b08c      	sub	sp, #48	; 0x30
 800eedc:	af04      	add	r7, sp, #16
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	460b      	mov	r3, r1
 800eee2:	70fb      	strb	r3, [r7, #3]
 800eee4:	4613      	mov	r3, r2
 800eee6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800eee8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eeec:	2124      	movs	r1, #36	; 0x24
 800eeee:	2022      	movs	r0, #34	; 0x22
 800eef0:	f7f7 fe14 	bl	8006b1c <pbuf_alloc>
 800eef4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d04c      	beq.n	800ef96 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	895b      	ldrh	r3, [r3, #10]
 800ef00:	2b23      	cmp	r3, #35	; 0x23
 800ef02:	d806      	bhi.n	800ef12 <icmp_send_response+0x3a>
 800ef04:	4b26      	ldr	r3, [pc, #152]	; (800efa0 <icmp_send_response+0xc8>)
 800ef06:	f240 1269 	movw	r2, #361	; 0x169
 800ef0a:	4926      	ldr	r1, [pc, #152]	; (800efa4 <icmp_send_response+0xcc>)
 800ef0c:	4826      	ldr	r0, [pc, #152]	; (800efa8 <icmp_send_response+0xd0>)
 800ef0e:	f001 fa8d 	bl	801042c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	78fa      	ldrb	r2, [r7, #3]
 800ef22:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	78ba      	ldrb	r2, [r7, #2]
 800ef28:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	711a      	strb	r2, [r3, #4]
 800ef30:	2200      	movs	r2, #0
 800ef32:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	2200      	movs	r2, #0
 800ef38:	719a      	strb	r2, [r3, #6]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	f103 0008 	add.w	r0, r3, #8
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	221c      	movs	r2, #28
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	f001 fa40 	bl	80103d2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ef58:	f107 030c 	add.w	r3, r7, #12
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f000 f825 	bl	800efac <ip4_route>
 800ef62:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d011      	beq.n	800ef8e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	709a      	strb	r2, [r3, #2]
 800ef70:	2200      	movs	r2, #0
 800ef72:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ef74:	f107 020c 	add.w	r2, r7, #12
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	9302      	str	r3, [sp, #8]
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	9301      	str	r3, [sp, #4]
 800ef80:	2300      	movs	r3, #0
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	23ff      	movs	r3, #255	; 0xff
 800ef86:	2100      	movs	r1, #0
 800ef88:	69f8      	ldr	r0, [r7, #28]
 800ef8a:	f000 f9cb 	bl	800f324 <ip4_output_if>
  }
  pbuf_free(q);
 800ef8e:	69f8      	ldr	r0, [r7, #28]
 800ef90:	f7f8 f8a4 	bl	80070dc <pbuf_free>
 800ef94:	e000      	b.n	800ef98 <icmp_send_response+0xc0>
    return;
 800ef96:	bf00      	nop
}
 800ef98:	3720      	adds	r7, #32
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	080145ac 	.word	0x080145ac
 800efa4:	08014678 	.word	0x08014678
 800efa8:	0801461c 	.word	0x0801461c

0800efac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800efac:	b480      	push	{r7}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800efb4:	4b33      	ldr	r3, [pc, #204]	; (800f084 <ip4_route+0xd8>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	60fb      	str	r3, [r7, #12]
 800efba:	e036      	b.n	800f02a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efc2:	f003 0301 	and.w	r3, r3, #1
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d02b      	beq.n	800f024 <ip4_route+0x78>
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efd2:	089b      	lsrs	r3, r3, #2
 800efd4:	f003 0301 	and.w	r3, r3, #1
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d022      	beq.n	800f024 <ip4_route+0x78>
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	3304      	adds	r3, #4
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d01d      	beq.n	800f024 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	3304      	adds	r3, #4
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	405a      	eors	r2, r3
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	3308      	adds	r3, #8
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4013      	ands	r3, r2
 800effc:	2b00      	cmp	r3, #0
 800effe:	d101      	bne.n	800f004 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	e038      	b.n	800f076 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f00a:	f003 0302 	and.w	r3, r3, #2
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d108      	bne.n	800f024 <ip4_route+0x78>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	330c      	adds	r3, #12
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d101      	bne.n	800f024 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	e028      	b.n	800f076 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	60fb      	str	r3, [r7, #12]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d1c5      	bne.n	800efbc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f030:	4b15      	ldr	r3, [pc, #84]	; (800f088 <ip4_route+0xdc>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d01a      	beq.n	800f06e <ip4_route+0xc2>
 800f038:	4b13      	ldr	r3, [pc, #76]	; (800f088 <ip4_route+0xdc>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f040:	f003 0301 	and.w	r3, r3, #1
 800f044:	2b00      	cmp	r3, #0
 800f046:	d012      	beq.n	800f06e <ip4_route+0xc2>
 800f048:	4b0f      	ldr	r3, [pc, #60]	; (800f088 <ip4_route+0xdc>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f050:	f003 0304 	and.w	r3, r3, #4
 800f054:	2b00      	cmp	r3, #0
 800f056:	d00a      	beq.n	800f06e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f058:	4b0b      	ldr	r3, [pc, #44]	; (800f088 <ip4_route+0xdc>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	3304      	adds	r3, #4
 800f05e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f060:	2b00      	cmp	r3, #0
 800f062:	d004      	beq.n	800f06e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	2b7f      	cmp	r3, #127	; 0x7f
 800f06c:	d101      	bne.n	800f072 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f06e:	2300      	movs	r3, #0
 800f070:	e001      	b.n	800f076 <ip4_route+0xca>
  }

  return netif_default;
 800f072:	4b05      	ldr	r3, [pc, #20]	; (800f088 <ip4_route+0xdc>)
 800f074:	681b      	ldr	r3, [r3, #0]
}
 800f076:	4618      	mov	r0, r3
 800f078:	3714      	adds	r7, #20
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop
 800f084:	2000693c 	.word	0x2000693c
 800f088:	20006940 	.word	0x20006940

0800f08c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f09a:	f003 0301 	and.w	r3, r3, #1
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d016      	beq.n	800f0d2 <ip4_input_accept+0x46>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	3304      	adds	r3, #4
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d011      	beq.n	800f0d2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f0ae:	4b0b      	ldr	r3, [pc, #44]	; (800f0dc <ip4_input_accept+0x50>)
 800f0b0:	695a      	ldr	r2, [r3, #20]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	3304      	adds	r3, #4
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d008      	beq.n	800f0ce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f0bc:	4b07      	ldr	r3, [pc, #28]	; (800f0dc <ip4_input_accept+0x50>)
 800f0be:	695b      	ldr	r3, [r3, #20]
 800f0c0:	6879      	ldr	r1, [r7, #4]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f000 fa06 	bl	800f4d4 <ip4_addr_isbroadcast_u32>
 800f0c8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e000      	b.n	800f0d4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3708      	adds	r7, #8
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}
 800f0dc:	20003408 	.word	0x20003408

0800f0e0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b086      	sub	sp, #24
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	091b      	lsrs	r3, r3, #4
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	2b04      	cmp	r3, #4
 800f0fa:	d004      	beq.n	800f106 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f7f7 ffed 	bl	80070dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f102:	2300      	movs	r3, #0
 800f104:	e105      	b.n	800f312 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	f003 030f 	and.w	r3, r3, #15
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	b2db      	uxtb	r3, r3
 800f114:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	885b      	ldrh	r3, [r3, #2]
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7f6 fd05 	bl	8005b2c <lwip_htons>
 800f122:	4603      	mov	r3, r0
 800f124:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	891b      	ldrh	r3, [r3, #8]
 800f12a:	89ba      	ldrh	r2, [r7, #12]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d204      	bcs.n	800f13a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f130:	89bb      	ldrh	r3, [r7, #12]
 800f132:	4619      	mov	r1, r3
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7f7 fe4b 	bl	8006dd0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	895b      	ldrh	r3, [r3, #10]
 800f13e:	89fa      	ldrh	r2, [r7, #14]
 800f140:	429a      	cmp	r2, r3
 800f142:	d807      	bhi.n	800f154 <ip4_input+0x74>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	891b      	ldrh	r3, [r3, #8]
 800f148:	89ba      	ldrh	r2, [r7, #12]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d802      	bhi.n	800f154 <ip4_input+0x74>
 800f14e:	89fb      	ldrh	r3, [r7, #14]
 800f150:	2b13      	cmp	r3, #19
 800f152:	d804      	bhi.n	800f15e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f7f7 ffc1 	bl	80070dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f15a:	2300      	movs	r3, #0
 800f15c:	e0d9      	b.n	800f312 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	691b      	ldr	r3, [r3, #16]
 800f162:	4a6e      	ldr	r2, [pc, #440]	; (800f31c <ip4_input+0x23c>)
 800f164:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	4a6c      	ldr	r2, [pc, #432]	; (800f31c <ip4_input+0x23c>)
 800f16c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f16e:	4b6b      	ldr	r3, [pc, #428]	; (800f31c <ip4_input+0x23c>)
 800f170:	695b      	ldr	r3, [r3, #20]
 800f172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f176:	2be0      	cmp	r3, #224	; 0xe0
 800f178:	d112      	bne.n	800f1a0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f180:	f003 0301 	and.w	r3, r3, #1
 800f184:	b2db      	uxtb	r3, r3
 800f186:	2b00      	cmp	r3, #0
 800f188:	d007      	beq.n	800f19a <ip4_input+0xba>
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	3304      	adds	r3, #4
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d002      	beq.n	800f19a <ip4_input+0xba>
      netif = inp;
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	613b      	str	r3, [r7, #16]
 800f198:	e02a      	b.n	800f1f0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f19a:	2300      	movs	r3, #0
 800f19c:	613b      	str	r3, [r7, #16]
 800f19e:	e027      	b.n	800f1f0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f1a0:	6838      	ldr	r0, [r7, #0]
 800f1a2:	f7ff ff73 	bl	800f08c <ip4_input_accept>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d002      	beq.n	800f1b2 <ip4_input+0xd2>
      netif = inp;
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	613b      	str	r3, [r7, #16]
 800f1b0:	e01e      	b.n	800f1f0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f1b6:	4b59      	ldr	r3, [pc, #356]	; (800f31c <ip4_input+0x23c>)
 800f1b8:	695b      	ldr	r3, [r3, #20]
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	2b7f      	cmp	r3, #127	; 0x7f
 800f1be:	d017      	beq.n	800f1f0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f1c0:	4b57      	ldr	r3, [pc, #348]	; (800f320 <ip4_input+0x240>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	613b      	str	r3, [r7, #16]
 800f1c6:	e00e      	b.n	800f1e6 <ip4_input+0x106>
          if (netif == inp) {
 800f1c8:	693a      	ldr	r2, [r7, #16]
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d006      	beq.n	800f1de <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f1d0:	6938      	ldr	r0, [r7, #16]
 800f1d2:	f7ff ff5b 	bl	800f08c <ip4_input_accept>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d108      	bne.n	800f1ee <ip4_input+0x10e>
 800f1dc:	e000      	b.n	800f1e0 <ip4_input+0x100>
            continue;
 800f1de:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	613b      	str	r3, [r7, #16]
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d1ed      	bne.n	800f1c8 <ip4_input+0xe8>
 800f1ec:	e000      	b.n	800f1f0 <ip4_input+0x110>
            break;
 800f1ee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f1f0:	4b4a      	ldr	r3, [pc, #296]	; (800f31c <ip4_input+0x23c>)
 800f1f2:	691b      	ldr	r3, [r3, #16]
 800f1f4:	6839      	ldr	r1, [r7, #0]
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f000 f96c 	bl	800f4d4 <ip4_addr_isbroadcast_u32>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d105      	bne.n	800f20e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f202:	4b46      	ldr	r3, [pc, #280]	; (800f31c <ip4_input+0x23c>)
 800f204:	691b      	ldr	r3, [r3, #16]
 800f206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f20a:	2be0      	cmp	r3, #224	; 0xe0
 800f20c:	d104      	bne.n	800f218 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f7f7 ff64 	bl	80070dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f214:	2300      	movs	r3, #0
 800f216:	e07c      	b.n	800f312 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d104      	bne.n	800f228 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7f7 ff5c 	bl	80070dc <pbuf_free>
    return ERR_OK;
 800f224:	2300      	movs	r3, #0
 800f226:	e074      	b.n	800f312 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	88db      	ldrh	r3, [r3, #6]
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	461a      	mov	r2, r3
 800f230:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f234:	4013      	ands	r3, r2
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00b      	beq.n	800f252 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fc90 	bl	800fb60 <ip4_reass>
 800f240:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d101      	bne.n	800f24c <ip4_input+0x16c>
      return ERR_OK;
 800f248:	2300      	movs	r3, #0
 800f24a:	e062      	b.n	800f312 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f252:	4a32      	ldr	r2, [pc, #200]	; (800f31c <ip4_input+0x23c>)
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f258:	4a30      	ldr	r2, [pc, #192]	; (800f31c <ip4_input+0x23c>)
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f25e:	4a2f      	ldr	r2, [pc, #188]	; (800f31c <ip4_input+0x23c>)
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	f003 030f 	and.w	r3, r3, #15
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	b2db      	uxtb	r3, r3
 800f272:	b29a      	uxth	r2, r3
 800f274:	4b29      	ldr	r3, [pc, #164]	; (800f31c <ip4_input+0x23c>)
 800f276:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f278:	89fb      	ldrh	r3, [r7, #14]
 800f27a:	4619      	mov	r1, r3
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f7f7 fea7 	bl	8006fd0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	7a5b      	ldrb	r3, [r3, #9]
 800f286:	2b06      	cmp	r3, #6
 800f288:	d009      	beq.n	800f29e <ip4_input+0x1be>
 800f28a:	2b11      	cmp	r3, #17
 800f28c:	d002      	beq.n	800f294 <ip4_input+0x1b4>
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d00a      	beq.n	800f2a8 <ip4_input+0x1c8>
 800f292:	e00e      	b.n	800f2b2 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f294:	6839      	ldr	r1, [r7, #0]
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7fe fc6a 	bl	800db70 <udp_input>
        break;
 800f29c:	e026      	b.n	800f2ec <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f29e:	6839      	ldr	r1, [r7, #0]
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7fa f847 	bl	8009334 <tcp_input>
        break;
 800f2a6:	e021      	b.n	800f2ec <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f2a8:	6839      	ldr	r1, [r7, #0]
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7ff fcf0 	bl	800ec90 <icmp_input>
        break;
 800f2b0:	e01c      	b.n	800f2ec <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f2b2:	4b1a      	ldr	r3, [pc, #104]	; (800f31c <ip4_input+0x23c>)
 800f2b4:	695b      	ldr	r3, [r3, #20]
 800f2b6:	6939      	ldr	r1, [r7, #16]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f000 f90b 	bl	800f4d4 <ip4_addr_isbroadcast_u32>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d10f      	bne.n	800f2e4 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f2c4:	4b15      	ldr	r3, [pc, #84]	; (800f31c <ip4_input+0x23c>)
 800f2c6:	695b      	ldr	r3, [r3, #20]
 800f2c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f2cc:	2be0      	cmp	r3, #224	; 0xe0
 800f2ce:	d009      	beq.n	800f2e4 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f2d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7f7 feed 	bl	80070b6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f2dc:	2102      	movs	r1, #2
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7ff fdda 	bl	800ee98 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7f7 fef9 	bl	80070dc <pbuf_free>
        break;
 800f2ea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f2ec:	4b0b      	ldr	r3, [pc, #44]	; (800f31c <ip4_input+0x23c>)
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f2f2:	4b0a      	ldr	r3, [pc, #40]	; (800f31c <ip4_input+0x23c>)
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f2f8:	4b08      	ldr	r3, [pc, #32]	; (800f31c <ip4_input+0x23c>)
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f2fe:	4b07      	ldr	r3, [pc, #28]	; (800f31c <ip4_input+0x23c>)
 800f300:	2200      	movs	r2, #0
 800f302:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f304:	4b05      	ldr	r3, [pc, #20]	; (800f31c <ip4_input+0x23c>)
 800f306:	2200      	movs	r2, #0
 800f308:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f30a:	4b04      	ldr	r3, [pc, #16]	; (800f31c <ip4_input+0x23c>)
 800f30c:	2200      	movs	r2, #0
 800f30e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f310:	2300      	movs	r3, #0
}
 800f312:	4618      	mov	r0, r3
 800f314:	3718      	adds	r7, #24
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	20003408 	.word	0x20003408
 800f320:	2000693c 	.word	0x2000693c

0800f324 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b08a      	sub	sp, #40	; 0x28
 800f328:	af04      	add	r7, sp, #16
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	607a      	str	r2, [r7, #4]
 800f330:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d009      	beq.n	800f350 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d003      	beq.n	800f34a <ip4_output_if+0x26>
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d102      	bne.n	800f350 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34c:	3304      	adds	r3, #4
 800f34e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f350:	78fa      	ldrb	r2, [r7, #3]
 800f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f354:	9302      	str	r3, [sp, #8]
 800f356:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f35a:	9301      	str	r3, [sp, #4]
 800f35c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	4613      	mov	r3, r2
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	6979      	ldr	r1, [r7, #20]
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f000 f805 	bl	800f378 <ip4_output_if_src>
 800f36e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f370:	4618      	mov	r0, r3
 800f372:	3718      	adds	r7, #24
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b088      	sub	sp, #32
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
 800f384:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	7b9b      	ldrb	r3, [r3, #14]
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d006      	beq.n	800f39c <ip4_output_if_src+0x24>
 800f38e:	4b4b      	ldr	r3, [pc, #300]	; (800f4bc <ip4_output_if_src+0x144>)
 800f390:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f394:	494a      	ldr	r1, [pc, #296]	; (800f4c0 <ip4_output_if_src+0x148>)
 800f396:	484b      	ldr	r0, [pc, #300]	; (800f4c4 <ip4_output_if_src+0x14c>)
 800f398:	f001 f848 	bl	801042c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d060      	beq.n	800f464 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f3a2:	2314      	movs	r3, #20
 800f3a4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f3a6:	2114      	movs	r1, #20
 800f3a8:	68f8      	ldr	r0, [r7, #12]
 800f3aa:	f7f7 fe01 	bl	8006fb0 <pbuf_add_header>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f3b4:	f06f 0301 	mvn.w	r3, #1
 800f3b8:	e07c      	b.n	800f4b4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	895b      	ldrh	r3, [r3, #10]
 800f3c4:	2b13      	cmp	r3, #19
 800f3c6:	d806      	bhi.n	800f3d6 <ip4_output_if_src+0x5e>
 800f3c8:	4b3c      	ldr	r3, [pc, #240]	; (800f4bc <ip4_output_if_src+0x144>)
 800f3ca:	f240 3289 	movw	r2, #905	; 0x389
 800f3ce:	493e      	ldr	r1, [pc, #248]	; (800f4c8 <ip4_output_if_src+0x150>)
 800f3d0:	483c      	ldr	r0, [pc, #240]	; (800f4c4 <ip4_output_if_src+0x14c>)
 800f3d2:	f001 f82b 	bl	801042c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	78fa      	ldrb	r2, [r7, #3]
 800f3da:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f3e2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f3ec:	8b7b      	ldrh	r3, [r7, #26]
 800f3ee:	089b      	lsrs	r3, r3, #2
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3f8:	b2da      	uxtb	r2, r3
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f404:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	891b      	ldrh	r3, [r3, #8]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7f6 fb8e 	bl	8005b2c <lwip_htons>
 800f410:	4603      	mov	r3, r0
 800f412:	461a      	mov	r2, r3
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	2200      	movs	r2, #0
 800f41c:	719a      	strb	r2, [r3, #6]
 800f41e:	2200      	movs	r2, #0
 800f420:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f422:	4b2a      	ldr	r3, [pc, #168]	; (800f4cc <ip4_output_if_src+0x154>)
 800f424:	881b      	ldrh	r3, [r3, #0]
 800f426:	4618      	mov	r0, r3
 800f428:	f7f6 fb80 	bl	8005b2c <lwip_htons>
 800f42c:	4603      	mov	r3, r0
 800f42e:	461a      	mov	r2, r3
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f434:	4b25      	ldr	r3, [pc, #148]	; (800f4cc <ip4_output_if_src+0x154>)
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	3301      	adds	r3, #1
 800f43a:	b29a      	uxth	r2, r3
 800f43c:	4b23      	ldr	r3, [pc, #140]	; (800f4cc <ip4_output_if_src+0x154>)
 800f43e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d104      	bne.n	800f450 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f446:	4b22      	ldr	r3, [pc, #136]	; (800f4d0 <ip4_output_if_src+0x158>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	60da      	str	r2, [r3, #12]
 800f44e:	e003      	b.n	800f458 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	2200      	movs	r2, #0
 800f45c:	729a      	strb	r2, [r3, #10]
 800f45e:	2200      	movs	r2, #0
 800f460:	72da      	strb	r2, [r3, #11]
 800f462:	e00f      	b.n	800f484 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	895b      	ldrh	r3, [r3, #10]
 800f468:	2b13      	cmp	r3, #19
 800f46a:	d802      	bhi.n	800f472 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f46c:	f06f 0301 	mvn.w	r3, #1
 800f470:	e020      	b.n	800f4b4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	691b      	ldr	r3, [r3, #16]
 800f47c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f47e:	f107 0314 	add.w	r3, r7, #20
 800f482:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f486:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d00c      	beq.n	800f4a6 <ip4_output_if_src+0x12e>
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	891a      	ldrh	r2, [r3, #8]
 800f490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f492:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f494:	429a      	cmp	r2, r3
 800f496:	d906      	bls.n	800f4a6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	f000 fd4b 	bl	800ff38 <ip4_frag>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	e006      	b.n	800f4b4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a8:	695b      	ldr	r3, [r3, #20]
 800f4aa:	687a      	ldr	r2, [r7, #4]
 800f4ac:	68f9      	ldr	r1, [r7, #12]
 800f4ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4b0:	4798      	blx	r3
 800f4b2:	4603      	mov	r3, r0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3720      	adds	r7, #32
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	080146a4 	.word	0x080146a4
 800f4c0:	080146d8 	.word	0x080146d8
 800f4c4:	080146e4 	.word	0x080146e4
 800f4c8:	0801470c 	.word	0x0801470c
 800f4cc:	20000202 	.word	0x20000202
 800f4d0:	08014ad8 	.word	0x08014ad8

0800f4d4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e8:	d002      	beq.n	800f4f0 <ip4_addr_isbroadcast_u32+0x1c>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d101      	bne.n	800f4f4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e02a      	b.n	800f54a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f4fa:	f003 0302 	and.w	r3, r3, #2
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d101      	bne.n	800f506 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f502:	2300      	movs	r3, #0
 800f504:	e021      	b.n	800f54a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	3304      	adds	r3, #4
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d101      	bne.n	800f516 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f512:	2300      	movs	r3, #0
 800f514:	e019      	b.n	800f54a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f516:	68fa      	ldr	r2, [r7, #12]
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	3304      	adds	r3, #4
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	405a      	eors	r2, r3
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	3308      	adds	r3, #8
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	4013      	ands	r3, r2
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d10d      	bne.n	800f548 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	3308      	adds	r3, #8
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	43da      	mvns	r2, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	3308      	adds	r3, #8
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f540:	429a      	cmp	r2, r3
 800f542:	d101      	bne.n	800f548 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f544:	2301      	movs	r3, #1
 800f546:	e000      	b.n	800f54a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f548:	2300      	movs	r3, #0
  }
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3714      	adds	r7, #20
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
	...

0800f558 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f55e:	2300      	movs	r3, #0
 800f560:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f562:	4b12      	ldr	r3, [pc, #72]	; (800f5ac <ip_reass_tmr+0x54>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f568:	e018      	b.n	800f59c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	7fdb      	ldrb	r3, [r3, #31]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d00b      	beq.n	800f58a <ip_reass_tmr+0x32>
      r->timer--;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	7fdb      	ldrb	r3, [r3, #31]
 800f576:	3b01      	subs	r3, #1
 800f578:	b2da      	uxtb	r2, r3
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	60fb      	str	r3, [r7, #12]
 800f588:	e008      	b.n	800f59c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f594:	68b9      	ldr	r1, [r7, #8]
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 f80a 	bl	800f5b0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d1e3      	bne.n	800f56a <ip_reass_tmr+0x12>
    }
  }
}
 800f5a2:	bf00      	nop
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20000204 	.word	0x20000204

0800f5b0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b088      	sub	sp, #32
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f5be:	683a      	ldr	r2, [r7, #0]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d105      	bne.n	800f5d2 <ip_reass_free_complete_datagram+0x22>
 800f5c6:	4b45      	ldr	r3, [pc, #276]	; (800f6dc <ip_reass_free_complete_datagram+0x12c>)
 800f5c8:	22ab      	movs	r2, #171	; 0xab
 800f5ca:	4945      	ldr	r1, [pc, #276]	; (800f6e0 <ip_reass_free_complete_datagram+0x130>)
 800f5cc:	4845      	ldr	r0, [pc, #276]	; (800f6e4 <ip_reass_free_complete_datagram+0x134>)
 800f5ce:	f000 ff2d 	bl	801042c <iprintf>
  if (prev != NULL) {
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00a      	beq.n	800f5ee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d005      	beq.n	800f5ee <ip_reass_free_complete_datagram+0x3e>
 800f5e2:	4b3e      	ldr	r3, [pc, #248]	; (800f6dc <ip_reass_free_complete_datagram+0x12c>)
 800f5e4:	22ad      	movs	r2, #173	; 0xad
 800f5e6:	4940      	ldr	r1, [pc, #256]	; (800f6e8 <ip_reass_free_complete_datagram+0x138>)
 800f5e8:	483e      	ldr	r0, [pc, #248]	; (800f6e4 <ip_reass_free_complete_datagram+0x134>)
 800f5ea:	f000 ff1f 	bl	801042c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	889b      	ldrh	r3, [r3, #4]
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d12a      	bne.n	800f656 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f60e:	69bb      	ldr	r3, [r7, #24]
 800f610:	6858      	ldr	r0, [r3, #4]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	3308      	adds	r3, #8
 800f616:	2214      	movs	r2, #20
 800f618:	4619      	mov	r1, r3
 800f61a:	f000 feda 	bl	80103d2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f61e:	2101      	movs	r1, #1
 800f620:	69b8      	ldr	r0, [r7, #24]
 800f622:	f7ff fc49 	bl	800eeb8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f626:	69b8      	ldr	r0, [r7, #24]
 800f628:	f7f7 fde0 	bl	80071ec <pbuf_clen>
 800f62c:	4603      	mov	r3, r0
 800f62e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f630:	8bfa      	ldrh	r2, [r7, #30]
 800f632:	8a7b      	ldrh	r3, [r7, #18]
 800f634:	4413      	add	r3, r2
 800f636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f63a:	db05      	blt.n	800f648 <ip_reass_free_complete_datagram+0x98>
 800f63c:	4b27      	ldr	r3, [pc, #156]	; (800f6dc <ip_reass_free_complete_datagram+0x12c>)
 800f63e:	22bc      	movs	r2, #188	; 0xbc
 800f640:	492a      	ldr	r1, [pc, #168]	; (800f6ec <ip_reass_free_complete_datagram+0x13c>)
 800f642:	4828      	ldr	r0, [pc, #160]	; (800f6e4 <ip_reass_free_complete_datagram+0x134>)
 800f644:	f000 fef2 	bl	801042c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f648:	8bfa      	ldrh	r2, [r7, #30]
 800f64a:	8a7b      	ldrh	r3, [r7, #18]
 800f64c:	4413      	add	r3, r2
 800f64e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f650:	69b8      	ldr	r0, [r7, #24]
 800f652:	f7f7 fd43 	bl	80070dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f65c:	e01f      	b.n	800f69e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f66e:	68f8      	ldr	r0, [r7, #12]
 800f670:	f7f7 fdbc 	bl	80071ec <pbuf_clen>
 800f674:	4603      	mov	r3, r0
 800f676:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f678:	8bfa      	ldrh	r2, [r7, #30]
 800f67a:	8a7b      	ldrh	r3, [r7, #18]
 800f67c:	4413      	add	r3, r2
 800f67e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f682:	db05      	blt.n	800f690 <ip_reass_free_complete_datagram+0xe0>
 800f684:	4b15      	ldr	r3, [pc, #84]	; (800f6dc <ip_reass_free_complete_datagram+0x12c>)
 800f686:	22cc      	movs	r2, #204	; 0xcc
 800f688:	4918      	ldr	r1, [pc, #96]	; (800f6ec <ip_reass_free_complete_datagram+0x13c>)
 800f68a:	4816      	ldr	r0, [pc, #88]	; (800f6e4 <ip_reass_free_complete_datagram+0x134>)
 800f68c:	f000 fece 	bl	801042c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f690:	8bfa      	ldrh	r2, [r7, #30]
 800f692:	8a7b      	ldrh	r3, [r7, #18]
 800f694:	4413      	add	r3, r2
 800f696:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f7f7 fd1f 	bl	80070dc <pbuf_free>
  while (p != NULL) {
 800f69e:	69bb      	ldr	r3, [r7, #24]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1dc      	bne.n	800f65e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f6a4:	6839      	ldr	r1, [r7, #0]
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 f8c2 	bl	800f830 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f6ac:	4b10      	ldr	r3, [pc, #64]	; (800f6f0 <ip_reass_free_complete_datagram+0x140>)
 800f6ae:	881b      	ldrh	r3, [r3, #0]
 800f6b0:	8bfa      	ldrh	r2, [r7, #30]
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d905      	bls.n	800f6c2 <ip_reass_free_complete_datagram+0x112>
 800f6b6:	4b09      	ldr	r3, [pc, #36]	; (800f6dc <ip_reass_free_complete_datagram+0x12c>)
 800f6b8:	22d2      	movs	r2, #210	; 0xd2
 800f6ba:	490e      	ldr	r1, [pc, #56]	; (800f6f4 <ip_reass_free_complete_datagram+0x144>)
 800f6bc:	4809      	ldr	r0, [pc, #36]	; (800f6e4 <ip_reass_free_complete_datagram+0x134>)
 800f6be:	f000 feb5 	bl	801042c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f6c2:	4b0b      	ldr	r3, [pc, #44]	; (800f6f0 <ip_reass_free_complete_datagram+0x140>)
 800f6c4:	881a      	ldrh	r2, [r3, #0]
 800f6c6:	8bfb      	ldrh	r3, [r7, #30]
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	4b08      	ldr	r3, [pc, #32]	; (800f6f0 <ip_reass_free_complete_datagram+0x140>)
 800f6ce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f6d0:	8bfb      	ldrh	r3, [r7, #30]
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3720      	adds	r7, #32
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	0801473c 	.word	0x0801473c
 800f6e0:	08014778 	.word	0x08014778
 800f6e4:	08014784 	.word	0x08014784
 800f6e8:	080147ac 	.word	0x080147ac
 800f6ec:	080147c0 	.word	0x080147c0
 800f6f0:	20000208 	.word	0x20000208
 800f6f4:	080147e0 	.word	0x080147e0

0800f6f8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b08a      	sub	sp, #40	; 0x28
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f702:	2300      	movs	r3, #0
 800f704:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f706:	2300      	movs	r3, #0
 800f708:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f70a:	2300      	movs	r3, #0
 800f70c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f70e:	2300      	movs	r3, #0
 800f710:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f712:	2300      	movs	r3, #0
 800f714:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f716:	4b28      	ldr	r3, [pc, #160]	; (800f7b8 <ip_reass_remove_oldest_datagram+0xc0>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f71c:	e030      	b.n	800f780 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f720:	695a      	ldr	r2, [r3, #20]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	429a      	cmp	r2, r3
 800f728:	d10c      	bne.n	800f744 <ip_reass_remove_oldest_datagram+0x4c>
 800f72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72c:	699a      	ldr	r2, [r3, #24]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	691b      	ldr	r3, [r3, #16]
 800f732:	429a      	cmp	r2, r3
 800f734:	d106      	bne.n	800f744 <ip_reass_remove_oldest_datagram+0x4c>
 800f736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f738:	899a      	ldrh	r2, [r3, #12]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	889b      	ldrh	r3, [r3, #4]
 800f73e:	b29b      	uxth	r3, r3
 800f740:	429a      	cmp	r2, r3
 800f742:	d014      	beq.n	800f76e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	3301      	adds	r3, #1
 800f748:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f74a:	6a3b      	ldr	r3, [r7, #32]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d104      	bne.n	800f75a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f752:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	61bb      	str	r3, [r7, #24]
 800f758:	e009      	b.n	800f76e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75c:	7fda      	ldrb	r2, [r3, #31]
 800f75e:	6a3b      	ldr	r3, [r7, #32]
 800f760:	7fdb      	ldrb	r3, [r3, #31]
 800f762:	429a      	cmp	r2, r3
 800f764:	d803      	bhi.n	800f76e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f768:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d001      	beq.n	800f77a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f778:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f782:	2b00      	cmp	r3, #0
 800f784:	d1cb      	bne.n	800f71e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f786:	6a3b      	ldr	r3, [r7, #32]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d008      	beq.n	800f79e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f78c:	69b9      	ldr	r1, [r7, #24]
 800f78e:	6a38      	ldr	r0, [r7, #32]
 800f790:	f7ff ff0e 	bl	800f5b0 <ip_reass_free_complete_datagram>
 800f794:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f796:	697a      	ldr	r2, [r7, #20]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	4413      	add	r3, r2
 800f79c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f79e:	697a      	ldr	r2, [r7, #20]
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	da02      	bge.n	800f7ac <ip_reass_remove_oldest_datagram+0xb4>
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	dcac      	bgt.n	800f706 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f7ac:	697b      	ldr	r3, [r7, #20]
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3728      	adds	r7, #40	; 0x28
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	20000204 	.word	0x20000204

0800f7bc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f7c6:	2004      	movs	r0, #4
 800f7c8:	f7f6 fe2e 	bl	8006428 <memp_malloc>
 800f7cc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d110      	bne.n	800f7f6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f7d4:	6839      	ldr	r1, [r7, #0]
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f7ff ff8e 	bl	800f6f8 <ip_reass_remove_oldest_datagram>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	dc03      	bgt.n	800f7ec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f7e4:	2004      	movs	r0, #4
 800f7e6:	f7f6 fe1f 	bl	8006428 <memp_malloc>
 800f7ea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d101      	bne.n	800f7f6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	e016      	b.n	800f824 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f7f6:	2220      	movs	r2, #32
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	68f8      	ldr	r0, [r7, #12]
 800f7fc:	f000 fe0d 	bl	801041a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	220f      	movs	r2, #15
 800f804:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f806:	4b09      	ldr	r3, [pc, #36]	; (800f82c <ip_reass_enqueue_new_datagram+0x70>)
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f80e:	4a07      	ldr	r2, [pc, #28]	; (800f82c <ip_reass_enqueue_new_datagram+0x70>)
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	3308      	adds	r3, #8
 800f818:	2214      	movs	r2, #20
 800f81a:	6879      	ldr	r1, [r7, #4]
 800f81c:	4618      	mov	r0, r3
 800f81e:	f000 fdd8 	bl	80103d2 <memcpy>
  return ipr;
 800f822:	68fb      	ldr	r3, [r7, #12]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	20000204 	.word	0x20000204

0800f830 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f83a:	4b10      	ldr	r3, [pc, #64]	; (800f87c <ip_reass_dequeue_datagram+0x4c>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	687a      	ldr	r2, [r7, #4]
 800f840:	429a      	cmp	r2, r3
 800f842:	d104      	bne.n	800f84e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a0c      	ldr	r2, [pc, #48]	; (800f87c <ip_reass_dequeue_datagram+0x4c>)
 800f84a:	6013      	str	r3, [r2, #0]
 800f84c:	e00d      	b.n	800f86a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d106      	bne.n	800f862 <ip_reass_dequeue_datagram+0x32>
 800f854:	4b0a      	ldr	r3, [pc, #40]	; (800f880 <ip_reass_dequeue_datagram+0x50>)
 800f856:	f240 1245 	movw	r2, #325	; 0x145
 800f85a:	490a      	ldr	r1, [pc, #40]	; (800f884 <ip_reass_dequeue_datagram+0x54>)
 800f85c:	480a      	ldr	r0, [pc, #40]	; (800f888 <ip_reass_dequeue_datagram+0x58>)
 800f85e:	f000 fde5 	bl	801042c <iprintf>
    prev->next = ipr->next;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f86a:	6879      	ldr	r1, [r7, #4]
 800f86c:	2004      	movs	r0, #4
 800f86e:	f7f6 fe27 	bl	80064c0 <memp_free>
}
 800f872:	bf00      	nop
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	20000204 	.word	0x20000204
 800f880:	0801473c 	.word	0x0801473c
 800f884:	08014804 	.word	0x08014804
 800f888:	08014784 	.word	0x08014784

0800f88c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b08c      	sub	sp, #48	; 0x30
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f898:	2300      	movs	r3, #0
 800f89a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f89c:	2301      	movs	r3, #1
 800f89e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	885b      	ldrh	r3, [r3, #2]
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7f6 f93d 	bl	8005b2c <lwip_htons>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f8b6:	69fb      	ldr	r3, [r7, #28]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	f003 030f 	and.w	r3, r3, #15
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	009b      	lsls	r3, r3, #2
 800f8c2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f8c4:	7e7b      	ldrb	r3, [r7, #25]
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	8b7a      	ldrh	r2, [r7, #26]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d202      	bcs.n	800f8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d2:	e135      	b.n	800fb40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f8d4:	7e7b      	ldrb	r3, [r7, #25]
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	8b7a      	ldrh	r2, [r7, #26]
 800f8da:	1ad3      	subs	r3, r2, r3
 800f8dc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	88db      	ldrh	r3, [r3, #6]
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7f6 f921 	bl	8005b2c <lwip_htons>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	00db      	lsls	r3, r3, #3
 800f8f4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fe:	2200      	movs	r2, #0
 800f900:	701a      	strb	r2, [r3, #0]
 800f902:	2200      	movs	r2, #0
 800f904:	705a      	strb	r2, [r3, #1]
 800f906:	2200      	movs	r2, #0
 800f908:	709a      	strb	r2, [r3, #2]
 800f90a:	2200      	movs	r2, #0
 800f90c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f910:	8afa      	ldrh	r2, [r7, #22]
 800f912:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f914:	8afa      	ldrh	r2, [r7, #22]
 800f916:	8b7b      	ldrh	r3, [r7, #26]
 800f918:	4413      	add	r3, r2
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f922:	88db      	ldrh	r3, [r3, #6]
 800f924:	b29b      	uxth	r3, r3
 800f926:	8afa      	ldrh	r2, [r7, #22]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d902      	bls.n	800f932 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f92c:	f04f 33ff 	mov.w	r3, #4294967295
 800f930:	e106      	b.n	800fb40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	627b      	str	r3, [r7, #36]	; 0x24
 800f938:	e068      	b.n	800fa0c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f942:	889b      	ldrh	r3, [r3, #4]
 800f944:	b29a      	uxth	r2, r3
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	889b      	ldrh	r3, [r3, #4]
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d235      	bcs.n	800f9bc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f954:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d020      	beq.n	800f99e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95e:	889b      	ldrh	r3, [r3, #4]
 800f960:	b29a      	uxth	r2, r3
 800f962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f964:	88db      	ldrh	r3, [r3, #6]
 800f966:	b29b      	uxth	r3, r3
 800f968:	429a      	cmp	r2, r3
 800f96a:	d307      	bcc.n	800f97c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96e:	88db      	ldrh	r3, [r3, #6]
 800f970:	b29a      	uxth	r2, r3
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	889b      	ldrh	r3, [r3, #4]
 800f976:	b29b      	uxth	r3, r3
 800f978:	429a      	cmp	r2, r3
 800f97a:	d902      	bls.n	800f982 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f97c:	f04f 33ff 	mov.w	r3, #4294967295
 800f980:	e0de      	b.n	800fb40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f984:	68ba      	ldr	r2, [r7, #8]
 800f986:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98a:	88db      	ldrh	r3, [r3, #6]
 800f98c:	b29a      	uxth	r2, r3
 800f98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f990:	889b      	ldrh	r3, [r3, #4]
 800f992:	b29b      	uxth	r3, r3
 800f994:	429a      	cmp	r2, r3
 800f996:	d03d      	beq.n	800fa14 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f99c:	e03a      	b.n	800fa14 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a0:	88db      	ldrh	r3, [r3, #6]
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	889b      	ldrh	r3, [r3, #4]
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d902      	bls.n	800f9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b2:	e0c5      	b.n	800fb40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	68ba      	ldr	r2, [r7, #8]
 800f9b8:	605a      	str	r2, [r3, #4]
      break;
 800f9ba:	e02b      	b.n	800fa14 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9be:	889b      	ldrh	r3, [r3, #4]
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	889b      	ldrh	r3, [r3, #4]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d102      	bne.n	800f9d2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f9d0:	e0b6      	b.n	800fb40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d4:	889b      	ldrh	r3, [r3, #4]
 800f9d6:	b29a      	uxth	r2, r3
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	88db      	ldrh	r3, [r3, #6]
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d202      	bcs.n	800f9e8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e6:	e0ab      	b.n	800fb40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d009      	beq.n	800fa02 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f0:	88db      	ldrh	r3, [r3, #6]
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	889b      	ldrh	r3, [r3, #4]
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d001      	beq.n	800fa02 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d193      	bne.n	800f93a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fa12:	e000      	b.n	800fa16 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fa14:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d12d      	bne.n	800fa78 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fa1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d01c      	beq.n	800fa5c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa24:	88db      	ldrh	r3, [r3, #6]
 800fa26:	b29a      	uxth	r2, r3
 800fa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2a:	889b      	ldrh	r3, [r3, #4]
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d906      	bls.n	800fa40 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fa32:	4b45      	ldr	r3, [pc, #276]	; (800fb48 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fa34:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800fa38:	4944      	ldr	r1, [pc, #272]	; (800fb4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fa3a:	4845      	ldr	r0, [pc, #276]	; (800fb50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fa3c:	f000 fcf6 	bl	801042c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa42:	68ba      	ldr	r2, [r7, #8]
 800fa44:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa48:	88db      	ldrh	r3, [r3, #6]
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4e:	889b      	ldrh	r3, [r3, #4]
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d010      	beq.n	800fa78 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fa56:	2300      	movs	r3, #0
 800fa58:	623b      	str	r3, [r7, #32]
 800fa5a:	e00d      	b.n	800fa78 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d006      	beq.n	800fa72 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fa64:	4b38      	ldr	r3, [pc, #224]	; (800fb48 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fa66:	f240 12bf 	movw	r2, #447	; 0x1bf
 800fa6a:	493a      	ldr	r1, [pc, #232]	; (800fb54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fa6c:	4838      	ldr	r0, [pc, #224]	; (800fb50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fa6e:	f000 fcdd 	bl	801042c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	68ba      	ldr	r2, [r7, #8]
 800fa76:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d105      	bne.n	800fa8a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	7f9b      	ldrb	r3, [r3, #30]
 800fa82:	f003 0301 	and.w	r3, r3, #1
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d059      	beq.n	800fb3e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fa8a:	6a3b      	ldr	r3, [r7, #32]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d04f      	beq.n	800fb30 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d006      	beq.n	800faa6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	889b      	ldrh	r3, [r3, #4]
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d002      	beq.n	800faac <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800faa6:	2300      	movs	r3, #0
 800faa8:	623b      	str	r3, [r7, #32]
 800faaa:	e041      	b.n	800fb30 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800faac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faae:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800fab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fab6:	e012      	b.n	800fade <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800fabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac0:	88db      	ldrh	r3, [r3, #6]
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac6:	889b      	ldrh	r3, [r3, #4]
 800fac8:	b29b      	uxth	r3, r3
 800faca:	429a      	cmp	r2, r3
 800facc:	d002      	beq.n	800fad4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800face:	2300      	movs	r3, #0
 800fad0:	623b      	str	r3, [r7, #32]
            break;
 800fad2:	e007      	b.n	800fae4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d1e9      	bne.n	800fab8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fae4:	6a3b      	ldr	r3, [r7, #32]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d022      	beq.n	800fb30 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d106      	bne.n	800fb00 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800faf2:	4b15      	ldr	r3, [pc, #84]	; (800fb48 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800faf4:	f240 12df 	movw	r2, #479	; 0x1df
 800faf8:	4917      	ldr	r1, [pc, #92]	; (800fb58 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fafa:	4815      	ldr	r0, [pc, #84]	; (800fb50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fafc:	f000 fc96 	bl	801042c <iprintf>
          LWIP_ASSERT("sanity check",
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d106      	bne.n	800fb1a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fb0c:	4b0e      	ldr	r3, [pc, #56]	; (800fb48 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb0e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fb12:	4911      	ldr	r1, [pc, #68]	; (800fb58 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fb14:	480e      	ldr	r0, [pc, #56]	; (800fb50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fb16:	f000 fc89 	bl	801042c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d006      	beq.n	800fb30 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fb22:	4b09      	ldr	r3, [pc, #36]	; (800fb48 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fb24:	f240 12e3 	movw	r2, #483	; 0x1e3
 800fb28:	490c      	ldr	r1, [pc, #48]	; (800fb5c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fb2a:	4809      	ldr	r0, [pc, #36]	; (800fb50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fb2c:	f000 fc7e 	bl	801042c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fb30:	6a3b      	ldr	r3, [r7, #32]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	bf14      	ite	ne
 800fb36:	2301      	movne	r3, #1
 800fb38:	2300      	moveq	r3, #0
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	e000      	b.n	800fb40 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fb3e:	2300      	movs	r3, #0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	3730      	adds	r7, #48	; 0x30
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	0801473c 	.word	0x0801473c
 800fb4c:	08014820 	.word	0x08014820
 800fb50:	08014784 	.word	0x08014784
 800fb54:	08014840 	.word	0x08014840
 800fb58:	08014878 	.word	0x08014878
 800fb5c:	08014888 	.word	0x08014888

0800fb60 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b08e      	sub	sp, #56	; 0x38
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	f003 030f 	and.w	r3, r3, #15
 800fb76:	b2db      	uxtb	r3, r3
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	2b14      	cmp	r3, #20
 800fb7e:	f040 8167 	bne.w	800fe50 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb84:	88db      	ldrh	r3, [r3, #6]
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7f5 ffcf 	bl	8005b2c <lwip_htons>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	00db      	lsls	r3, r3, #3
 800fb98:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9c:	885b      	ldrh	r3, [r3, #2]
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7f5 ffc3 	bl	8005b2c <lwip_htons>
 800fba6:	4603      	mov	r3, r0
 800fba8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	f003 030f 	and.w	r3, r3, #15
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	009b      	lsls	r3, r3, #2
 800fbb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800fbba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	f0c0 8146 	bcc.w	800fe54 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fbc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fbd0:	1ad3      	subs	r3, r2, r3
 800fbd2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f7f7 fb09 	bl	80071ec <pbuf_clen>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fbde:	4ba3      	ldr	r3, [pc, #652]	; (800fe6c <ip4_reass+0x30c>)
 800fbe0:	881b      	ldrh	r3, [r3, #0]
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	8c3b      	ldrh	r3, [r7, #32]
 800fbe6:	4413      	add	r3, r2
 800fbe8:	2b0a      	cmp	r3, #10
 800fbea:	dd10      	ble.n	800fc0e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fbec:	8c3b      	ldrh	r3, [r7, #32]
 800fbee:	4619      	mov	r1, r3
 800fbf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbf2:	f7ff fd81 	bl	800f6f8 <ip_reass_remove_oldest_datagram>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	f000 812d 	beq.w	800fe58 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fbfe:	4b9b      	ldr	r3, [pc, #620]	; (800fe6c <ip4_reass+0x30c>)
 800fc00:	881b      	ldrh	r3, [r3, #0]
 800fc02:	461a      	mov	r2, r3
 800fc04:	8c3b      	ldrh	r3, [r7, #32]
 800fc06:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fc08:	2b0a      	cmp	r3, #10
 800fc0a:	f300 8125 	bgt.w	800fe58 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fc0e:	4b98      	ldr	r3, [pc, #608]	; (800fe70 <ip4_reass+0x310>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	633b      	str	r3, [r7, #48]	; 0x30
 800fc14:	e015      	b.n	800fc42 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc18:	695a      	ldr	r2, [r3, #20]
 800fc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d10c      	bne.n	800fc3c <ip4_reass+0xdc>
 800fc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc24:	699a      	ldr	r2, [r3, #24]
 800fc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc28:	691b      	ldr	r3, [r3, #16]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d106      	bne.n	800fc3c <ip4_reass+0xdc>
 800fc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc30:	899a      	ldrh	r2, [r3, #12]
 800fc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc34:	889b      	ldrh	r3, [r3, #4]
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d006      	beq.n	800fc4a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	633b      	str	r3, [r7, #48]	; 0x30
 800fc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d1e6      	bne.n	800fc16 <ip4_reass+0xb6>
 800fc48:	e000      	b.n	800fc4c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fc4a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d109      	bne.n	800fc66 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fc52:	8c3b      	ldrh	r3, [r7, #32]
 800fc54:	4619      	mov	r1, r3
 800fc56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc58:	f7ff fdb0 	bl	800f7bc <ip_reass_enqueue_new_datagram>
 800fc5c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d11c      	bne.n	800fc9e <ip4_reass+0x13e>
      goto nullreturn;
 800fc64:	e0f9      	b.n	800fe5a <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc68:	88db      	ldrh	r3, [r3, #6]
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7f5 ff5d 	bl	8005b2c <lwip_htons>
 800fc72:	4603      	mov	r3, r0
 800fc74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d110      	bne.n	800fc9e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7e:	89db      	ldrh	r3, [r3, #14]
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7f5 ff53 	bl	8005b2c <lwip_htons>
 800fc86:	4603      	mov	r3, r0
 800fc88:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d006      	beq.n	800fc9e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc92:	3308      	adds	r3, #8
 800fc94:	2214      	movs	r2, #20
 800fc96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f000 fb9a 	bl	80103d2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca0:	88db      	ldrh	r3, [r3, #6]
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	f003 0320 	and.w	r3, r3, #32
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	bf0c      	ite	eq
 800fcac:	2301      	moveq	r3, #1
 800fcae:	2300      	movne	r3, #0
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00e      	beq.n	800fcd8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800fcba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fcbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcbe:	4413      	add	r3, r2
 800fcc0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fcc2:	8b7a      	ldrh	r2, [r7, #26]
 800fcc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	f0c0 80a0 	bcc.w	800fe0c <ip4_reass+0x2ac>
 800fccc:	8b7b      	ldrh	r3, [r7, #26]
 800fcce:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fcd2:	4293      	cmp	r3, r2
 800fcd4:	f200 809a 	bhi.w	800fe0c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fcd8:	69fa      	ldr	r2, [r7, #28]
 800fcda:	6879      	ldr	r1, [r7, #4]
 800fcdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcde:	f7ff fdd5 	bl	800f88c <ip_reass_chain_frag_into_datagram_and_validate>
 800fce2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcea:	f000 8091 	beq.w	800fe10 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fcee:	4b5f      	ldr	r3, [pc, #380]	; (800fe6c <ip4_reass+0x30c>)
 800fcf0:	881a      	ldrh	r2, [r3, #0]
 800fcf2:	8c3b      	ldrh	r3, [r7, #32]
 800fcf4:	4413      	add	r3, r2
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	4b5c      	ldr	r3, [pc, #368]	; (800fe6c <ip4_reass+0x30c>)
 800fcfa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800fcfc:	69fb      	ldr	r3, [r7, #28]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00d      	beq.n	800fd1e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800fd02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fd04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd06:	4413      	add	r3, r2
 800fd08:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0c:	8a7a      	ldrh	r2, [r7, #18]
 800fd0e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd12:	7f9b      	ldrb	r3, [r3, #30]
 800fd14:	f043 0301 	orr.w	r3, r3, #1
 800fd18:	b2da      	uxtb	r2, r3
 800fd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d171      	bne.n	800fe08 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd26:	8b9b      	ldrh	r3, [r3, #28]
 800fd28:	3314      	adds	r3, #20
 800fd2a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd40:	3308      	adds	r3, #8
 800fd42:	2214      	movs	r2, #20
 800fd44:	4619      	mov	r1, r3
 800fd46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd48:	f000 fb43 	bl	80103d2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fd4c:	8a3b      	ldrh	r3, [r7, #16]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7f5 feec 	bl	8005b2c <lwip_htons>
 800fd54:	4603      	mov	r3, r0
 800fd56:	461a      	mov	r2, r3
 800fd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5e:	2200      	movs	r2, #0
 800fd60:	719a      	strb	r2, [r3, #6]
 800fd62:	2200      	movs	r2, #0
 800fd64:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd68:	2200      	movs	r2, #0
 800fd6a:	729a      	strb	r2, [r3, #10]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fd76:	e00d      	b.n	800fd94 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fd7e:	2114      	movs	r1, #20
 800fd80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd82:	f7f7 f925 	bl	8006fd0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800fd86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f7f7 fa69 	bl	8007260 <pbuf_cat>
      r = iprh->next_pbuf;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800fd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d1ee      	bne.n	800fd78 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fd9a:	4b35      	ldr	r3, [pc, #212]	; (800fe70 <ip4_reass+0x310>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d102      	bne.n	800fdaa <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fda4:	2300      	movs	r3, #0
 800fda6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fda8:	e010      	b.n	800fdcc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fdaa:	4b31      	ldr	r3, [pc, #196]	; (800fe70 <ip4_reass+0x310>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdb0:	e007      	b.n	800fdc2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d006      	beq.n	800fdca <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d1f4      	bne.n	800fdb2 <ip4_reass+0x252>
 800fdc8:	e000      	b.n	800fdcc <ip4_reass+0x26c>
          break;
 800fdca:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fdcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdd0:	f7ff fd2e 	bl	800f830 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7f7 fa09 	bl	80071ec <pbuf_clen>
 800fdda:	4603      	mov	r3, r0
 800fddc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fdde:	4b23      	ldr	r3, [pc, #140]	; (800fe6c <ip4_reass+0x30c>)
 800fde0:	881b      	ldrh	r3, [r3, #0]
 800fde2:	8c3a      	ldrh	r2, [r7, #32]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d906      	bls.n	800fdf6 <ip4_reass+0x296>
 800fde8:	4b22      	ldr	r3, [pc, #136]	; (800fe74 <ip4_reass+0x314>)
 800fdea:	f240 229b 	movw	r2, #667	; 0x29b
 800fdee:	4922      	ldr	r1, [pc, #136]	; (800fe78 <ip4_reass+0x318>)
 800fdf0:	4822      	ldr	r0, [pc, #136]	; (800fe7c <ip4_reass+0x31c>)
 800fdf2:	f000 fb1b 	bl	801042c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fdf6:	4b1d      	ldr	r3, [pc, #116]	; (800fe6c <ip4_reass+0x30c>)
 800fdf8:	881a      	ldrh	r2, [r3, #0]
 800fdfa:	8c3b      	ldrh	r3, [r7, #32]
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	b29a      	uxth	r2, r3
 800fe00:	4b1a      	ldr	r3, [pc, #104]	; (800fe6c <ip4_reass+0x30c>)
 800fe02:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	e02c      	b.n	800fe62 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	e02a      	b.n	800fe62 <ip4_reass+0x302>

nullreturn_ipr:
 800fe0c:	bf00      	nop
 800fe0e:	e000      	b.n	800fe12 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800fe10:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fe12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d106      	bne.n	800fe26 <ip4_reass+0x2c6>
 800fe18:	4b16      	ldr	r3, [pc, #88]	; (800fe74 <ip4_reass+0x314>)
 800fe1a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fe1e:	4918      	ldr	r1, [pc, #96]	; (800fe80 <ip4_reass+0x320>)
 800fe20:	4816      	ldr	r0, [pc, #88]	; (800fe7c <ip4_reass+0x31c>)
 800fe22:	f000 fb03 	bl	801042c <iprintf>
  if (ipr->p == NULL) {
 800fe26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d114      	bne.n	800fe58 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fe2e:	4b10      	ldr	r3, [pc, #64]	; (800fe70 <ip4_reass+0x310>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d006      	beq.n	800fe46 <ip4_reass+0x2e6>
 800fe38:	4b0e      	ldr	r3, [pc, #56]	; (800fe74 <ip4_reass+0x314>)
 800fe3a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fe3e:	4911      	ldr	r1, [pc, #68]	; (800fe84 <ip4_reass+0x324>)
 800fe40:	480e      	ldr	r0, [pc, #56]	; (800fe7c <ip4_reass+0x31c>)
 800fe42:	f000 faf3 	bl	801042c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fe46:	2100      	movs	r1, #0
 800fe48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe4a:	f7ff fcf1 	bl	800f830 <ip_reass_dequeue_datagram>
 800fe4e:	e004      	b.n	800fe5a <ip4_reass+0x2fa>
    goto nullreturn;
 800fe50:	bf00      	nop
 800fe52:	e002      	b.n	800fe5a <ip4_reass+0x2fa>
    goto nullreturn;
 800fe54:	bf00      	nop
 800fe56:	e000      	b.n	800fe5a <ip4_reass+0x2fa>
  }

nullreturn:
 800fe58:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f7f7 f93e 	bl	80070dc <pbuf_free>
  return NULL;
 800fe60:	2300      	movs	r3, #0
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3738      	adds	r7, #56	; 0x38
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	20000208 	.word	0x20000208
 800fe70:	20000204 	.word	0x20000204
 800fe74:	0801473c 	.word	0x0801473c
 800fe78:	080148ac 	.word	0x080148ac
 800fe7c:	08014784 	.word	0x08014784
 800fe80:	080148c8 	.word	0x080148c8
 800fe84:	080148d4 	.word	0x080148d4

0800fe88 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fe8c:	2005      	movs	r0, #5
 800fe8e:	f7f6 facb 	bl	8006428 <memp_malloc>
 800fe92:	4603      	mov	r3, r0
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d106      	bne.n	800feb4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800fea6:	4b07      	ldr	r3, [pc, #28]	; (800fec4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fea8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800feac:	4906      	ldr	r1, [pc, #24]	; (800fec8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800feae:	4807      	ldr	r0, [pc, #28]	; (800fecc <ip_frag_free_pbuf_custom_ref+0x34>)
 800feb0:	f000 fabc 	bl	801042c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800feb4:	6879      	ldr	r1, [r7, #4]
 800feb6:	2005      	movs	r0, #5
 800feb8:	f7f6 fb02 	bl	80064c0 <memp_free>
}
 800febc:	bf00      	nop
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	0801473c 	.word	0x0801473c
 800fec8:	080148f4 	.word	0x080148f4
 800fecc:	08014784 	.word	0x08014784

0800fed0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d106      	bne.n	800fef0 <ipfrag_free_pbuf_custom+0x20>
 800fee2:	4b11      	ldr	r3, [pc, #68]	; (800ff28 <ipfrag_free_pbuf_custom+0x58>)
 800fee4:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fee8:	4910      	ldr	r1, [pc, #64]	; (800ff2c <ipfrag_free_pbuf_custom+0x5c>)
 800feea:	4811      	ldr	r0, [pc, #68]	; (800ff30 <ipfrag_free_pbuf_custom+0x60>)
 800feec:	f000 fa9e 	bl	801042c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800fef0:	68fa      	ldr	r2, [r7, #12]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d006      	beq.n	800ff06 <ipfrag_free_pbuf_custom+0x36>
 800fef8:	4b0b      	ldr	r3, [pc, #44]	; (800ff28 <ipfrag_free_pbuf_custom+0x58>)
 800fefa:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fefe:	490d      	ldr	r1, [pc, #52]	; (800ff34 <ipfrag_free_pbuf_custom+0x64>)
 800ff00:	480b      	ldr	r0, [pc, #44]	; (800ff30 <ipfrag_free_pbuf_custom+0x60>)
 800ff02:	f000 fa93 	bl	801042c <iprintf>
  if (pcr->original != NULL) {
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	695b      	ldr	r3, [r3, #20]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d004      	beq.n	800ff18 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	695b      	ldr	r3, [r3, #20]
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7f7 f8e2 	bl	80070dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ff18:	68f8      	ldr	r0, [r7, #12]
 800ff1a:	f7ff ffbd 	bl	800fe98 <ip_frag_free_pbuf_custom_ref>
}
 800ff1e:	bf00      	nop
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	0801473c 	.word	0x0801473c
 800ff2c:	08014900 	.word	0x08014900
 800ff30:	08014784 	.word	0x08014784
 800ff34:	0801490c 	.word	0x0801490c

0800ff38 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b094      	sub	sp, #80	; 0x50
 800ff3c:	af02      	add	r7, sp, #8
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ff44:	2300      	movs	r3, #0
 800ff46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ff4e:	3b14      	subs	r3, #20
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	da00      	bge.n	800ff56 <ip4_frag+0x1e>
 800ff54:	3307      	adds	r3, #7
 800ff56:	10db      	asrs	r3, r3, #3
 800ff58:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ff5a:	2314      	movs	r3, #20
 800ff5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ff64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff66:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ff68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	f003 030f 	and.w	r3, r3, #15
 800ff70:	b2db      	uxtb	r3, r3
 800ff72:	009b      	lsls	r3, r3, #2
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	2b14      	cmp	r3, #20
 800ff78:	d002      	beq.n	800ff80 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ff7a:	f06f 0305 	mvn.w	r3, #5
 800ff7e:	e10f      	b.n	80101a0 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	895b      	ldrh	r3, [r3, #10]
 800ff84:	2b13      	cmp	r3, #19
 800ff86:	d809      	bhi.n	800ff9c <ip4_frag+0x64>
 800ff88:	4b87      	ldr	r3, [pc, #540]	; (80101a8 <ip4_frag+0x270>)
 800ff8a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ff8e:	4987      	ldr	r1, [pc, #540]	; (80101ac <ip4_frag+0x274>)
 800ff90:	4887      	ldr	r0, [pc, #540]	; (80101b0 <ip4_frag+0x278>)
 800ff92:	f000 fa4b 	bl	801042c <iprintf>
 800ff96:	f06f 0305 	mvn.w	r3, #5
 800ff9a:	e101      	b.n	80101a0 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ff9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9e:	88db      	ldrh	r3, [r3, #6]
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7f5 fdc2 	bl	8005b2c <lwip_htons>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ffac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ffae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ffb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ffb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ffb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ffbc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	891b      	ldrh	r3, [r3, #8]
 800ffc2:	3b14      	subs	r3, #20
 800ffc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ffc8:	e0e0      	b.n	801018c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ffca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ffcc:	00db      	lsls	r3, r3, #3
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	bf28      	it	cs
 800ffd8:	4613      	movcs	r3, r2
 800ffda:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ffdc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ffe0:	2114      	movs	r1, #20
 800ffe2:	200e      	movs	r0, #14
 800ffe4:	f7f6 fd9a 	bl	8006b1c <pbuf_alloc>
 800ffe8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ffea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	f000 80d4 	beq.w	801019a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff4:	895b      	ldrh	r3, [r3, #10]
 800fff6:	2b13      	cmp	r3, #19
 800fff8:	d806      	bhi.n	8010008 <ip4_frag+0xd0>
 800fffa:	4b6b      	ldr	r3, [pc, #428]	; (80101a8 <ip4_frag+0x270>)
 800fffc:	f240 3225 	movw	r2, #805	; 0x325
 8010000:	496c      	ldr	r1, [pc, #432]	; (80101b4 <ip4_frag+0x27c>)
 8010002:	486b      	ldr	r0, [pc, #428]	; (80101b0 <ip4_frag+0x278>)
 8010004:	f000 fa12 	bl	801042c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	2214      	movs	r2, #20
 801000e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010010:	4618      	mov	r0, r3
 8010012:	f000 f9de 	bl	80103d2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801001c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801001e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010022:	e064      	b.n	80100ee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	895a      	ldrh	r2, [r3, #10]
 8010028:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801002a:	1ad3      	subs	r3, r2, r3
 801002c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	895b      	ldrh	r3, [r3, #10]
 8010032:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010034:	429a      	cmp	r2, r3
 8010036:	d906      	bls.n	8010046 <ip4_frag+0x10e>
 8010038:	4b5b      	ldr	r3, [pc, #364]	; (80101a8 <ip4_frag+0x270>)
 801003a:	f240 322d 	movw	r2, #813	; 0x32d
 801003e:	495e      	ldr	r1, [pc, #376]	; (80101b8 <ip4_frag+0x280>)
 8010040:	485b      	ldr	r0, [pc, #364]	; (80101b0 <ip4_frag+0x278>)
 8010042:	f000 f9f3 	bl	801042c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010046:	8bfa      	ldrh	r2, [r7, #30]
 8010048:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801004c:	4293      	cmp	r3, r2
 801004e:	bf28      	it	cs
 8010050:	4613      	movcs	r3, r2
 8010052:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010056:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801005a:	2b00      	cmp	r3, #0
 801005c:	d105      	bne.n	801006a <ip4_frag+0x132>
        poff = 0;
 801005e:	2300      	movs	r3, #0
 8010060:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	60fb      	str	r3, [r7, #12]
        continue;
 8010068:	e041      	b.n	80100ee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801006a:	f7ff ff0d 	bl	800fe88 <ip_frag_alloc_pbuf_custom_ref>
 801006e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d103      	bne.n	801007e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010078:	f7f7 f830 	bl	80070dc <pbuf_free>
        goto memerr;
 801007c:	e08e      	b.n	801019c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801007e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010084:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010086:	4413      	add	r3, r2
 8010088:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801008c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010090:	9201      	str	r2, [sp, #4]
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	4603      	mov	r3, r0
 8010096:	2241      	movs	r2, #65	; 0x41
 8010098:	2000      	movs	r0, #0
 801009a:	f7f6 fe65 	bl	8006d68 <pbuf_alloced_custom>
 801009e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d106      	bne.n	80100b4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80100a6:	69b8      	ldr	r0, [r7, #24]
 80100a8:	f7ff fef6 	bl	800fe98 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80100ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100ae:	f7f7 f815 	bl	80070dc <pbuf_free>
        goto memerr;
 80100b2:	e073      	b.n	801019c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80100b4:	68f8      	ldr	r0, [r7, #12]
 80100b6:	f7f7 f8b1 	bl	800721c <pbuf_ref>
      pcr->original = p;
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80100c0:	69bb      	ldr	r3, [r7, #24]
 80100c2:	4a3e      	ldr	r2, [pc, #248]	; (80101bc <ip4_frag+0x284>)
 80100c4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80100c6:	6979      	ldr	r1, [r7, #20]
 80100c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100ca:	f7f7 f8c9 	bl	8007260 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80100ce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80100d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80100dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d004      	beq.n	80100ee <ip4_frag+0x1b6>
        poff = 0;
 80100e4:	2300      	movs	r3, #0
 80100e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80100ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d196      	bne.n	8010024 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80100f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80100f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80100fc:	4413      	add	r3, r2
 80100fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010100:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010108:	3b14      	subs	r3, #20
 801010a:	429a      	cmp	r2, r3
 801010c:	bfd4      	ite	le
 801010e:	2301      	movle	r3, #1
 8010110:	2300      	movgt	r3, #0
 8010112:	b2db      	uxtb	r3, r3
 8010114:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010116:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801011a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801011e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010120:	6a3b      	ldr	r3, [r7, #32]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d002      	beq.n	801012c <ip4_frag+0x1f4>
 8010126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010128:	2b00      	cmp	r3, #0
 801012a:	d003      	beq.n	8010134 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801012c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801012e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010132:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010134:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010136:	4618      	mov	r0, r3
 8010138:	f7f5 fcf8 	bl	8005b2c <lwip_htons>
 801013c:	4603      	mov	r3, r0
 801013e:	461a      	mov	r2, r3
 8010140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010142:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010144:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010146:	3314      	adds	r3, #20
 8010148:	b29b      	uxth	r3, r3
 801014a:	4618      	mov	r0, r3
 801014c:	f7f5 fcee 	bl	8005b2c <lwip_htons>
 8010150:	4603      	mov	r3, r0
 8010152:	461a      	mov	r2, r3
 8010154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010156:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015a:	2200      	movs	r2, #0
 801015c:	729a      	strb	r2, [r3, #10]
 801015e:	2200      	movs	r2, #0
 8010160:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	695b      	ldr	r3, [r3, #20]
 8010166:	687a      	ldr	r2, [r7, #4]
 8010168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801016a:	68b8      	ldr	r0, [r7, #8]
 801016c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801016e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010170:	f7f6 ffb4 	bl	80070dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010174:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010178:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801017a:	1ad3      	subs	r3, r2, r3
 801017c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010180:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010184:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010186:	4413      	add	r3, r2
 8010188:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801018c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010190:	2b00      	cmp	r3, #0
 8010192:	f47f af1a 	bne.w	800ffca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010196:	2300      	movs	r3, #0
 8010198:	e002      	b.n	80101a0 <ip4_frag+0x268>
      goto memerr;
 801019a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801019c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3748      	adds	r7, #72	; 0x48
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	0801473c 	.word	0x0801473c
 80101ac:	08014918 	.word	0x08014918
 80101b0:	08014784 	.word	0x08014784
 80101b4:	08014934 	.word	0x08014934
 80101b8:	08014954 	.word	0x08014954
 80101bc:	0800fed1 	.word	0x0800fed1

080101c0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b086      	sub	sp, #24
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80101ca:	230e      	movs	r3, #14
 80101cc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	895b      	ldrh	r3, [r3, #10]
 80101d2:	2b0e      	cmp	r3, #14
 80101d4:	d96e      	bls.n	80102b4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	7bdb      	ldrb	r3, [r3, #15]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d106      	bne.n	80101ec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101e4:	3301      	adds	r3, #1
 80101e6:	b2da      	uxtb	r2, r3
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	7b1a      	ldrb	r2, [r3, #12]
 80101f6:	7b5b      	ldrb	r3, [r3, #13]
 80101f8:	021b      	lsls	r3, r3, #8
 80101fa:	4313      	orrs	r3, r2
 80101fc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	f003 0301 	and.w	r3, r3, #1
 8010206:	2b00      	cmp	r3, #0
 8010208:	d023      	beq.n	8010252 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	2b01      	cmp	r3, #1
 8010210:	d10f      	bne.n	8010232 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	785b      	ldrb	r3, [r3, #1]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d11b      	bne.n	8010252 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801021e:	2b5e      	cmp	r3, #94	; 0x5e
 8010220:	d117      	bne.n	8010252 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	7b5b      	ldrb	r3, [r3, #13]
 8010226:	f043 0310 	orr.w	r3, r3, #16
 801022a:	b2da      	uxtb	r2, r3
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	735a      	strb	r2, [r3, #13]
 8010230:	e00f      	b.n	8010252 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	2206      	movs	r2, #6
 8010236:	4928      	ldr	r1, [pc, #160]	; (80102d8 <ethernet_input+0x118>)
 8010238:	4618      	mov	r0, r3
 801023a:	f000 f8bb 	bl	80103b4 <memcmp>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d106      	bne.n	8010252 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	7b5b      	ldrb	r3, [r3, #13]
 8010248:	f043 0308 	orr.w	r3, r3, #8
 801024c:	b2da      	uxtb	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010252:	89fb      	ldrh	r3, [r7, #14]
 8010254:	2b08      	cmp	r3, #8
 8010256:	d003      	beq.n	8010260 <ethernet_input+0xa0>
 8010258:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801025c:	d014      	beq.n	8010288 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801025e:	e032      	b.n	80102c6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010266:	f003 0308 	and.w	r3, r3, #8
 801026a:	2b00      	cmp	r3, #0
 801026c:	d024      	beq.n	80102b8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801026e:	8afb      	ldrh	r3, [r7, #22]
 8010270:	4619      	mov	r1, r3
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f7f6 feac 	bl	8006fd0 <pbuf_remove_header>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d11e      	bne.n	80102bc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801027e:	6839      	ldr	r1, [r7, #0]
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f7fe ff2d 	bl	800f0e0 <ip4_input>
      break;
 8010286:	e013      	b.n	80102b0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801028e:	f003 0308 	and.w	r3, r3, #8
 8010292:	2b00      	cmp	r3, #0
 8010294:	d014      	beq.n	80102c0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010296:	8afb      	ldrh	r3, [r7, #22]
 8010298:	4619      	mov	r1, r3
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f7f6 fe98 	bl	8006fd0 <pbuf_remove_header>
 80102a0:	4603      	mov	r3, r0
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d10e      	bne.n	80102c4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80102a6:	6839      	ldr	r1, [r7, #0]
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f7fe f8cd 	bl	800e448 <etharp_input>
      break;
 80102ae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80102b0:	2300      	movs	r3, #0
 80102b2:	e00c      	b.n	80102ce <ethernet_input+0x10e>
    goto free_and_return;
 80102b4:	bf00      	nop
 80102b6:	e006      	b.n	80102c6 <ethernet_input+0x106>
        goto free_and_return;
 80102b8:	bf00      	nop
 80102ba:	e004      	b.n	80102c6 <ethernet_input+0x106>
        goto free_and_return;
 80102bc:	bf00      	nop
 80102be:	e002      	b.n	80102c6 <ethernet_input+0x106>
        goto free_and_return;
 80102c0:	bf00      	nop
 80102c2:	e000      	b.n	80102c6 <ethernet_input+0x106>
        goto free_and_return;
 80102c4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f7f6 ff08 	bl	80070dc <pbuf_free>
  return ERR_OK;
 80102cc:	2300      	movs	r3, #0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3718      	adds	r7, #24
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	08014adc 	.word	0x08014adc

080102dc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80102dc:	b580      	push	{r7, lr}
 80102de:	b086      	sub	sp, #24
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	60b9      	str	r1, [r7, #8]
 80102e6:	607a      	str	r2, [r7, #4]
 80102e8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80102ea:	8c3b      	ldrh	r3, [r7, #32]
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7f5 fc1d 	bl	8005b2c <lwip_htons>
 80102f2:	4603      	mov	r3, r0
 80102f4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80102f6:	210e      	movs	r1, #14
 80102f8:	68b8      	ldr	r0, [r7, #8]
 80102fa:	f7f6 fe59 	bl	8006fb0 <pbuf_add_header>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d125      	bne.n	8010350 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	685b      	ldr	r3, [r3, #4]
 8010308:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	8afa      	ldrh	r2, [r7, #22]
 801030e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	2206      	movs	r2, #6
 8010314:	6839      	ldr	r1, [r7, #0]
 8010316:	4618      	mov	r0, r3
 8010318:	f000 f85b 	bl	80103d2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	3306      	adds	r3, #6
 8010320:	2206      	movs	r2, #6
 8010322:	6879      	ldr	r1, [r7, #4]
 8010324:	4618      	mov	r0, r3
 8010326:	f000 f854 	bl	80103d2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010330:	2b06      	cmp	r3, #6
 8010332:	d006      	beq.n	8010342 <ethernet_output+0x66>
 8010334:	4b0a      	ldr	r3, [pc, #40]	; (8010360 <ethernet_output+0x84>)
 8010336:	f240 1233 	movw	r2, #307	; 0x133
 801033a:	490a      	ldr	r1, [pc, #40]	; (8010364 <ethernet_output+0x88>)
 801033c:	480a      	ldr	r0, [pc, #40]	; (8010368 <ethernet_output+0x8c>)
 801033e:	f000 f875 	bl	801042c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	699b      	ldr	r3, [r3, #24]
 8010346:	68b9      	ldr	r1, [r7, #8]
 8010348:	68f8      	ldr	r0, [r7, #12]
 801034a:	4798      	blx	r3
 801034c:	4603      	mov	r3, r0
 801034e:	e002      	b.n	8010356 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010350:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010352:	f06f 0301 	mvn.w	r3, #1
}
 8010356:	4618      	mov	r0, r3
 8010358:	3718      	adds	r7, #24
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	08014964 	.word	0x08014964
 8010364:	0801499c 	.word	0x0801499c
 8010368:	080149d0 	.word	0x080149d0

0801036c <__libc_init_array>:
 801036c:	b570      	push	{r4, r5, r6, lr}
 801036e:	4e0d      	ldr	r6, [pc, #52]	; (80103a4 <__libc_init_array+0x38>)
 8010370:	4c0d      	ldr	r4, [pc, #52]	; (80103a8 <__libc_init_array+0x3c>)
 8010372:	1ba4      	subs	r4, r4, r6
 8010374:	10a4      	asrs	r4, r4, #2
 8010376:	2500      	movs	r5, #0
 8010378:	42a5      	cmp	r5, r4
 801037a:	d109      	bne.n	8010390 <__libc_init_array+0x24>
 801037c:	4e0b      	ldr	r6, [pc, #44]	; (80103ac <__libc_init_array+0x40>)
 801037e:	4c0c      	ldr	r4, [pc, #48]	; (80103b0 <__libc_init_array+0x44>)
 8010380:	f001 f98a 	bl	8011698 <_init>
 8010384:	1ba4      	subs	r4, r4, r6
 8010386:	10a4      	asrs	r4, r4, #2
 8010388:	2500      	movs	r5, #0
 801038a:	42a5      	cmp	r5, r4
 801038c:	d105      	bne.n	801039a <__libc_init_array+0x2e>
 801038e:	bd70      	pop	{r4, r5, r6, pc}
 8010390:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010394:	4798      	blx	r3
 8010396:	3501      	adds	r5, #1
 8010398:	e7ee      	b.n	8010378 <__libc_init_array+0xc>
 801039a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801039e:	4798      	blx	r3
 80103a0:	3501      	adds	r5, #1
 80103a2:	e7f2      	b.n	801038a <__libc_init_array+0x1e>
 80103a4:	08014b8c 	.word	0x08014b8c
 80103a8:	08014b8c 	.word	0x08014b8c
 80103ac:	08014b8c 	.word	0x08014b8c
 80103b0:	08014b90 	.word	0x08014b90

080103b4 <memcmp>:
 80103b4:	b530      	push	{r4, r5, lr}
 80103b6:	2400      	movs	r4, #0
 80103b8:	42a2      	cmp	r2, r4
 80103ba:	d101      	bne.n	80103c0 <memcmp+0xc>
 80103bc:	2000      	movs	r0, #0
 80103be:	e007      	b.n	80103d0 <memcmp+0x1c>
 80103c0:	5d03      	ldrb	r3, [r0, r4]
 80103c2:	3401      	adds	r4, #1
 80103c4:	190d      	adds	r5, r1, r4
 80103c6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80103ca:	42ab      	cmp	r3, r5
 80103cc:	d0f4      	beq.n	80103b8 <memcmp+0x4>
 80103ce:	1b58      	subs	r0, r3, r5
 80103d0:	bd30      	pop	{r4, r5, pc}

080103d2 <memcpy>:
 80103d2:	b510      	push	{r4, lr}
 80103d4:	1e43      	subs	r3, r0, #1
 80103d6:	440a      	add	r2, r1
 80103d8:	4291      	cmp	r1, r2
 80103da:	d100      	bne.n	80103de <memcpy+0xc>
 80103dc:	bd10      	pop	{r4, pc}
 80103de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103e6:	e7f7      	b.n	80103d8 <memcpy+0x6>

080103e8 <memmove>:
 80103e8:	4288      	cmp	r0, r1
 80103ea:	b510      	push	{r4, lr}
 80103ec:	eb01 0302 	add.w	r3, r1, r2
 80103f0:	d807      	bhi.n	8010402 <memmove+0x1a>
 80103f2:	1e42      	subs	r2, r0, #1
 80103f4:	4299      	cmp	r1, r3
 80103f6:	d00a      	beq.n	801040e <memmove+0x26>
 80103f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010400:	e7f8      	b.n	80103f4 <memmove+0xc>
 8010402:	4283      	cmp	r3, r0
 8010404:	d9f5      	bls.n	80103f2 <memmove+0xa>
 8010406:	1881      	adds	r1, r0, r2
 8010408:	1ad2      	subs	r2, r2, r3
 801040a:	42d3      	cmn	r3, r2
 801040c:	d100      	bne.n	8010410 <memmove+0x28>
 801040e:	bd10      	pop	{r4, pc}
 8010410:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010414:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010418:	e7f7      	b.n	801040a <memmove+0x22>

0801041a <memset>:
 801041a:	4402      	add	r2, r0
 801041c:	4603      	mov	r3, r0
 801041e:	4293      	cmp	r3, r2
 8010420:	d100      	bne.n	8010424 <memset+0xa>
 8010422:	4770      	bx	lr
 8010424:	f803 1b01 	strb.w	r1, [r3], #1
 8010428:	e7f9      	b.n	801041e <memset+0x4>
	...

0801042c <iprintf>:
 801042c:	b40f      	push	{r0, r1, r2, r3}
 801042e:	4b0a      	ldr	r3, [pc, #40]	; (8010458 <iprintf+0x2c>)
 8010430:	b513      	push	{r0, r1, r4, lr}
 8010432:	681c      	ldr	r4, [r3, #0]
 8010434:	b124      	cbz	r4, 8010440 <iprintf+0x14>
 8010436:	69a3      	ldr	r3, [r4, #24]
 8010438:	b913      	cbnz	r3, 8010440 <iprintf+0x14>
 801043a:	4620      	mov	r0, r4
 801043c:	f000 fa88 	bl	8010950 <__sinit>
 8010440:	ab05      	add	r3, sp, #20
 8010442:	9a04      	ldr	r2, [sp, #16]
 8010444:	68a1      	ldr	r1, [r4, #8]
 8010446:	9301      	str	r3, [sp, #4]
 8010448:	4620      	mov	r0, r4
 801044a:	f000 fd9b 	bl	8010f84 <_vfiprintf_r>
 801044e:	b002      	add	sp, #8
 8010450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010454:	b004      	add	sp, #16
 8010456:	4770      	bx	lr
 8010458:	20000014 	.word	0x20000014

0801045c <_puts_r>:
 801045c:	b570      	push	{r4, r5, r6, lr}
 801045e:	460e      	mov	r6, r1
 8010460:	4605      	mov	r5, r0
 8010462:	b118      	cbz	r0, 801046c <_puts_r+0x10>
 8010464:	6983      	ldr	r3, [r0, #24]
 8010466:	b90b      	cbnz	r3, 801046c <_puts_r+0x10>
 8010468:	f000 fa72 	bl	8010950 <__sinit>
 801046c:	69ab      	ldr	r3, [r5, #24]
 801046e:	68ac      	ldr	r4, [r5, #8]
 8010470:	b913      	cbnz	r3, 8010478 <_puts_r+0x1c>
 8010472:	4628      	mov	r0, r5
 8010474:	f000 fa6c 	bl	8010950 <__sinit>
 8010478:	4b23      	ldr	r3, [pc, #140]	; (8010508 <_puts_r+0xac>)
 801047a:	429c      	cmp	r4, r3
 801047c:	d117      	bne.n	80104ae <_puts_r+0x52>
 801047e:	686c      	ldr	r4, [r5, #4]
 8010480:	89a3      	ldrh	r3, [r4, #12]
 8010482:	071b      	lsls	r3, r3, #28
 8010484:	d51d      	bpl.n	80104c2 <_puts_r+0x66>
 8010486:	6923      	ldr	r3, [r4, #16]
 8010488:	b1db      	cbz	r3, 80104c2 <_puts_r+0x66>
 801048a:	3e01      	subs	r6, #1
 801048c:	68a3      	ldr	r3, [r4, #8]
 801048e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010492:	3b01      	subs	r3, #1
 8010494:	60a3      	str	r3, [r4, #8]
 8010496:	b9e9      	cbnz	r1, 80104d4 <_puts_r+0x78>
 8010498:	2b00      	cmp	r3, #0
 801049a:	da2e      	bge.n	80104fa <_puts_r+0x9e>
 801049c:	4622      	mov	r2, r4
 801049e:	210a      	movs	r1, #10
 80104a0:	4628      	mov	r0, r5
 80104a2:	f000 f8a5 	bl	80105f0 <__swbuf_r>
 80104a6:	3001      	adds	r0, #1
 80104a8:	d011      	beq.n	80104ce <_puts_r+0x72>
 80104aa:	200a      	movs	r0, #10
 80104ac:	e011      	b.n	80104d2 <_puts_r+0x76>
 80104ae:	4b17      	ldr	r3, [pc, #92]	; (801050c <_puts_r+0xb0>)
 80104b0:	429c      	cmp	r4, r3
 80104b2:	d101      	bne.n	80104b8 <_puts_r+0x5c>
 80104b4:	68ac      	ldr	r4, [r5, #8]
 80104b6:	e7e3      	b.n	8010480 <_puts_r+0x24>
 80104b8:	4b15      	ldr	r3, [pc, #84]	; (8010510 <_puts_r+0xb4>)
 80104ba:	429c      	cmp	r4, r3
 80104bc:	bf08      	it	eq
 80104be:	68ec      	ldreq	r4, [r5, #12]
 80104c0:	e7de      	b.n	8010480 <_puts_r+0x24>
 80104c2:	4621      	mov	r1, r4
 80104c4:	4628      	mov	r0, r5
 80104c6:	f000 f8e5 	bl	8010694 <__swsetup_r>
 80104ca:	2800      	cmp	r0, #0
 80104cc:	d0dd      	beq.n	801048a <_puts_r+0x2e>
 80104ce:	f04f 30ff 	mov.w	r0, #4294967295
 80104d2:	bd70      	pop	{r4, r5, r6, pc}
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	da04      	bge.n	80104e2 <_puts_r+0x86>
 80104d8:	69a2      	ldr	r2, [r4, #24]
 80104da:	429a      	cmp	r2, r3
 80104dc:	dc06      	bgt.n	80104ec <_puts_r+0x90>
 80104de:	290a      	cmp	r1, #10
 80104e0:	d004      	beq.n	80104ec <_puts_r+0x90>
 80104e2:	6823      	ldr	r3, [r4, #0]
 80104e4:	1c5a      	adds	r2, r3, #1
 80104e6:	6022      	str	r2, [r4, #0]
 80104e8:	7019      	strb	r1, [r3, #0]
 80104ea:	e7cf      	b.n	801048c <_puts_r+0x30>
 80104ec:	4622      	mov	r2, r4
 80104ee:	4628      	mov	r0, r5
 80104f0:	f000 f87e 	bl	80105f0 <__swbuf_r>
 80104f4:	3001      	adds	r0, #1
 80104f6:	d1c9      	bne.n	801048c <_puts_r+0x30>
 80104f8:	e7e9      	b.n	80104ce <_puts_r+0x72>
 80104fa:	6823      	ldr	r3, [r4, #0]
 80104fc:	200a      	movs	r0, #10
 80104fe:	1c5a      	adds	r2, r3, #1
 8010500:	6022      	str	r2, [r4, #0]
 8010502:	7018      	strb	r0, [r3, #0]
 8010504:	e7e5      	b.n	80104d2 <_puts_r+0x76>
 8010506:	bf00      	nop
 8010508:	08014b10 	.word	0x08014b10
 801050c:	08014b30 	.word	0x08014b30
 8010510:	08014af0 	.word	0x08014af0

08010514 <puts>:
 8010514:	4b02      	ldr	r3, [pc, #8]	; (8010520 <puts+0xc>)
 8010516:	4601      	mov	r1, r0
 8010518:	6818      	ldr	r0, [r3, #0]
 801051a:	f7ff bf9f 	b.w	801045c <_puts_r>
 801051e:	bf00      	nop
 8010520:	20000014 	.word	0x20000014

08010524 <rand>:
 8010524:	b538      	push	{r3, r4, r5, lr}
 8010526:	4b13      	ldr	r3, [pc, #76]	; (8010574 <rand+0x50>)
 8010528:	681c      	ldr	r4, [r3, #0]
 801052a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801052c:	b97b      	cbnz	r3, 801054e <rand+0x2a>
 801052e:	2018      	movs	r0, #24
 8010530:	f000 fafc 	bl	8010b2c <malloc>
 8010534:	4a10      	ldr	r2, [pc, #64]	; (8010578 <rand+0x54>)
 8010536:	4b11      	ldr	r3, [pc, #68]	; (801057c <rand+0x58>)
 8010538:	63a0      	str	r0, [r4, #56]	; 0x38
 801053a:	e9c0 2300 	strd	r2, r3, [r0]
 801053e:	4b10      	ldr	r3, [pc, #64]	; (8010580 <rand+0x5c>)
 8010540:	6083      	str	r3, [r0, #8]
 8010542:	230b      	movs	r3, #11
 8010544:	8183      	strh	r3, [r0, #12]
 8010546:	2201      	movs	r2, #1
 8010548:	2300      	movs	r3, #0
 801054a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801054e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010550:	480c      	ldr	r0, [pc, #48]	; (8010584 <rand+0x60>)
 8010552:	690a      	ldr	r2, [r1, #16]
 8010554:	694b      	ldr	r3, [r1, #20]
 8010556:	4c0c      	ldr	r4, [pc, #48]	; (8010588 <rand+0x64>)
 8010558:	4350      	muls	r0, r2
 801055a:	fb04 0003 	mla	r0, r4, r3, r0
 801055e:	fba2 2304 	umull	r2, r3, r2, r4
 8010562:	4403      	add	r3, r0
 8010564:	1c54      	adds	r4, r2, #1
 8010566:	f143 0500 	adc.w	r5, r3, #0
 801056a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801056e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8010572:	bd38      	pop	{r3, r4, r5, pc}
 8010574:	20000014 	.word	0x20000014
 8010578:	abcd330e 	.word	0xabcd330e
 801057c:	e66d1234 	.word	0xe66d1234
 8010580:	0005deec 	.word	0x0005deec
 8010584:	5851f42d 	.word	0x5851f42d
 8010588:	4c957f2d 	.word	0x4c957f2d

0801058c <siprintf>:
 801058c:	b40e      	push	{r1, r2, r3}
 801058e:	b500      	push	{lr}
 8010590:	b09c      	sub	sp, #112	; 0x70
 8010592:	ab1d      	add	r3, sp, #116	; 0x74
 8010594:	9002      	str	r0, [sp, #8]
 8010596:	9006      	str	r0, [sp, #24]
 8010598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801059c:	4809      	ldr	r0, [pc, #36]	; (80105c4 <siprintf+0x38>)
 801059e:	9107      	str	r1, [sp, #28]
 80105a0:	9104      	str	r1, [sp, #16]
 80105a2:	4909      	ldr	r1, [pc, #36]	; (80105c8 <siprintf+0x3c>)
 80105a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80105a8:	9105      	str	r1, [sp, #20]
 80105aa:	6800      	ldr	r0, [r0, #0]
 80105ac:	9301      	str	r3, [sp, #4]
 80105ae:	a902      	add	r1, sp, #8
 80105b0:	f000 fbc6 	bl	8010d40 <_svfiprintf_r>
 80105b4:	9b02      	ldr	r3, [sp, #8]
 80105b6:	2200      	movs	r2, #0
 80105b8:	701a      	strb	r2, [r3, #0]
 80105ba:	b01c      	add	sp, #112	; 0x70
 80105bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80105c0:	b003      	add	sp, #12
 80105c2:	4770      	bx	lr
 80105c4:	20000014 	.word	0x20000014
 80105c8:	ffff0208 	.word	0xffff0208

080105cc <strncmp>:
 80105cc:	b510      	push	{r4, lr}
 80105ce:	b16a      	cbz	r2, 80105ec <strncmp+0x20>
 80105d0:	3901      	subs	r1, #1
 80105d2:	1884      	adds	r4, r0, r2
 80105d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80105d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80105dc:	4293      	cmp	r3, r2
 80105de:	d103      	bne.n	80105e8 <strncmp+0x1c>
 80105e0:	42a0      	cmp	r0, r4
 80105e2:	d001      	beq.n	80105e8 <strncmp+0x1c>
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1f5      	bne.n	80105d4 <strncmp+0x8>
 80105e8:	1a98      	subs	r0, r3, r2
 80105ea:	bd10      	pop	{r4, pc}
 80105ec:	4610      	mov	r0, r2
 80105ee:	e7fc      	b.n	80105ea <strncmp+0x1e>

080105f0 <__swbuf_r>:
 80105f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105f2:	460e      	mov	r6, r1
 80105f4:	4614      	mov	r4, r2
 80105f6:	4605      	mov	r5, r0
 80105f8:	b118      	cbz	r0, 8010602 <__swbuf_r+0x12>
 80105fa:	6983      	ldr	r3, [r0, #24]
 80105fc:	b90b      	cbnz	r3, 8010602 <__swbuf_r+0x12>
 80105fe:	f000 f9a7 	bl	8010950 <__sinit>
 8010602:	4b21      	ldr	r3, [pc, #132]	; (8010688 <__swbuf_r+0x98>)
 8010604:	429c      	cmp	r4, r3
 8010606:	d12a      	bne.n	801065e <__swbuf_r+0x6e>
 8010608:	686c      	ldr	r4, [r5, #4]
 801060a:	69a3      	ldr	r3, [r4, #24]
 801060c:	60a3      	str	r3, [r4, #8]
 801060e:	89a3      	ldrh	r3, [r4, #12]
 8010610:	071a      	lsls	r2, r3, #28
 8010612:	d52e      	bpl.n	8010672 <__swbuf_r+0x82>
 8010614:	6923      	ldr	r3, [r4, #16]
 8010616:	b363      	cbz	r3, 8010672 <__swbuf_r+0x82>
 8010618:	6923      	ldr	r3, [r4, #16]
 801061a:	6820      	ldr	r0, [r4, #0]
 801061c:	1ac0      	subs	r0, r0, r3
 801061e:	6963      	ldr	r3, [r4, #20]
 8010620:	b2f6      	uxtb	r6, r6
 8010622:	4283      	cmp	r3, r0
 8010624:	4637      	mov	r7, r6
 8010626:	dc04      	bgt.n	8010632 <__swbuf_r+0x42>
 8010628:	4621      	mov	r1, r4
 801062a:	4628      	mov	r0, r5
 801062c:	f000 f926 	bl	801087c <_fflush_r>
 8010630:	bb28      	cbnz	r0, 801067e <__swbuf_r+0x8e>
 8010632:	68a3      	ldr	r3, [r4, #8]
 8010634:	3b01      	subs	r3, #1
 8010636:	60a3      	str	r3, [r4, #8]
 8010638:	6823      	ldr	r3, [r4, #0]
 801063a:	1c5a      	adds	r2, r3, #1
 801063c:	6022      	str	r2, [r4, #0]
 801063e:	701e      	strb	r6, [r3, #0]
 8010640:	6963      	ldr	r3, [r4, #20]
 8010642:	3001      	adds	r0, #1
 8010644:	4283      	cmp	r3, r0
 8010646:	d004      	beq.n	8010652 <__swbuf_r+0x62>
 8010648:	89a3      	ldrh	r3, [r4, #12]
 801064a:	07db      	lsls	r3, r3, #31
 801064c:	d519      	bpl.n	8010682 <__swbuf_r+0x92>
 801064e:	2e0a      	cmp	r6, #10
 8010650:	d117      	bne.n	8010682 <__swbuf_r+0x92>
 8010652:	4621      	mov	r1, r4
 8010654:	4628      	mov	r0, r5
 8010656:	f000 f911 	bl	801087c <_fflush_r>
 801065a:	b190      	cbz	r0, 8010682 <__swbuf_r+0x92>
 801065c:	e00f      	b.n	801067e <__swbuf_r+0x8e>
 801065e:	4b0b      	ldr	r3, [pc, #44]	; (801068c <__swbuf_r+0x9c>)
 8010660:	429c      	cmp	r4, r3
 8010662:	d101      	bne.n	8010668 <__swbuf_r+0x78>
 8010664:	68ac      	ldr	r4, [r5, #8]
 8010666:	e7d0      	b.n	801060a <__swbuf_r+0x1a>
 8010668:	4b09      	ldr	r3, [pc, #36]	; (8010690 <__swbuf_r+0xa0>)
 801066a:	429c      	cmp	r4, r3
 801066c:	bf08      	it	eq
 801066e:	68ec      	ldreq	r4, [r5, #12]
 8010670:	e7cb      	b.n	801060a <__swbuf_r+0x1a>
 8010672:	4621      	mov	r1, r4
 8010674:	4628      	mov	r0, r5
 8010676:	f000 f80d 	bl	8010694 <__swsetup_r>
 801067a:	2800      	cmp	r0, #0
 801067c:	d0cc      	beq.n	8010618 <__swbuf_r+0x28>
 801067e:	f04f 37ff 	mov.w	r7, #4294967295
 8010682:	4638      	mov	r0, r7
 8010684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010686:	bf00      	nop
 8010688:	08014b10 	.word	0x08014b10
 801068c:	08014b30 	.word	0x08014b30
 8010690:	08014af0 	.word	0x08014af0

08010694 <__swsetup_r>:
 8010694:	4b32      	ldr	r3, [pc, #200]	; (8010760 <__swsetup_r+0xcc>)
 8010696:	b570      	push	{r4, r5, r6, lr}
 8010698:	681d      	ldr	r5, [r3, #0]
 801069a:	4606      	mov	r6, r0
 801069c:	460c      	mov	r4, r1
 801069e:	b125      	cbz	r5, 80106aa <__swsetup_r+0x16>
 80106a0:	69ab      	ldr	r3, [r5, #24]
 80106a2:	b913      	cbnz	r3, 80106aa <__swsetup_r+0x16>
 80106a4:	4628      	mov	r0, r5
 80106a6:	f000 f953 	bl	8010950 <__sinit>
 80106aa:	4b2e      	ldr	r3, [pc, #184]	; (8010764 <__swsetup_r+0xd0>)
 80106ac:	429c      	cmp	r4, r3
 80106ae:	d10f      	bne.n	80106d0 <__swsetup_r+0x3c>
 80106b0:	686c      	ldr	r4, [r5, #4]
 80106b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	0715      	lsls	r5, r2, #28
 80106ba:	d42c      	bmi.n	8010716 <__swsetup_r+0x82>
 80106bc:	06d0      	lsls	r0, r2, #27
 80106be:	d411      	bmi.n	80106e4 <__swsetup_r+0x50>
 80106c0:	2209      	movs	r2, #9
 80106c2:	6032      	str	r2, [r6, #0]
 80106c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106c8:	81a3      	strh	r3, [r4, #12]
 80106ca:	f04f 30ff 	mov.w	r0, #4294967295
 80106ce:	e03e      	b.n	801074e <__swsetup_r+0xba>
 80106d0:	4b25      	ldr	r3, [pc, #148]	; (8010768 <__swsetup_r+0xd4>)
 80106d2:	429c      	cmp	r4, r3
 80106d4:	d101      	bne.n	80106da <__swsetup_r+0x46>
 80106d6:	68ac      	ldr	r4, [r5, #8]
 80106d8:	e7eb      	b.n	80106b2 <__swsetup_r+0x1e>
 80106da:	4b24      	ldr	r3, [pc, #144]	; (801076c <__swsetup_r+0xd8>)
 80106dc:	429c      	cmp	r4, r3
 80106de:	bf08      	it	eq
 80106e0:	68ec      	ldreq	r4, [r5, #12]
 80106e2:	e7e6      	b.n	80106b2 <__swsetup_r+0x1e>
 80106e4:	0751      	lsls	r1, r2, #29
 80106e6:	d512      	bpl.n	801070e <__swsetup_r+0x7a>
 80106e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106ea:	b141      	cbz	r1, 80106fe <__swsetup_r+0x6a>
 80106ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106f0:	4299      	cmp	r1, r3
 80106f2:	d002      	beq.n	80106fa <__swsetup_r+0x66>
 80106f4:	4630      	mov	r0, r6
 80106f6:	f000 fa21 	bl	8010b3c <_free_r>
 80106fa:	2300      	movs	r3, #0
 80106fc:	6363      	str	r3, [r4, #52]	; 0x34
 80106fe:	89a3      	ldrh	r3, [r4, #12]
 8010700:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010704:	81a3      	strh	r3, [r4, #12]
 8010706:	2300      	movs	r3, #0
 8010708:	6063      	str	r3, [r4, #4]
 801070a:	6923      	ldr	r3, [r4, #16]
 801070c:	6023      	str	r3, [r4, #0]
 801070e:	89a3      	ldrh	r3, [r4, #12]
 8010710:	f043 0308 	orr.w	r3, r3, #8
 8010714:	81a3      	strh	r3, [r4, #12]
 8010716:	6923      	ldr	r3, [r4, #16]
 8010718:	b94b      	cbnz	r3, 801072e <__swsetup_r+0x9a>
 801071a:	89a3      	ldrh	r3, [r4, #12]
 801071c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010724:	d003      	beq.n	801072e <__swsetup_r+0x9a>
 8010726:	4621      	mov	r1, r4
 8010728:	4630      	mov	r0, r6
 801072a:	f000 f9bf 	bl	8010aac <__smakebuf_r>
 801072e:	89a2      	ldrh	r2, [r4, #12]
 8010730:	f012 0301 	ands.w	r3, r2, #1
 8010734:	d00c      	beq.n	8010750 <__swsetup_r+0xbc>
 8010736:	2300      	movs	r3, #0
 8010738:	60a3      	str	r3, [r4, #8]
 801073a:	6963      	ldr	r3, [r4, #20]
 801073c:	425b      	negs	r3, r3
 801073e:	61a3      	str	r3, [r4, #24]
 8010740:	6923      	ldr	r3, [r4, #16]
 8010742:	b953      	cbnz	r3, 801075a <__swsetup_r+0xc6>
 8010744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010748:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801074c:	d1ba      	bne.n	80106c4 <__swsetup_r+0x30>
 801074e:	bd70      	pop	{r4, r5, r6, pc}
 8010750:	0792      	lsls	r2, r2, #30
 8010752:	bf58      	it	pl
 8010754:	6963      	ldrpl	r3, [r4, #20]
 8010756:	60a3      	str	r3, [r4, #8]
 8010758:	e7f2      	b.n	8010740 <__swsetup_r+0xac>
 801075a:	2000      	movs	r0, #0
 801075c:	e7f7      	b.n	801074e <__swsetup_r+0xba>
 801075e:	bf00      	nop
 8010760:	20000014 	.word	0x20000014
 8010764:	08014b10 	.word	0x08014b10
 8010768:	08014b30 	.word	0x08014b30
 801076c:	08014af0 	.word	0x08014af0

08010770 <__sflush_r>:
 8010770:	898a      	ldrh	r2, [r1, #12]
 8010772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010776:	4605      	mov	r5, r0
 8010778:	0710      	lsls	r0, r2, #28
 801077a:	460c      	mov	r4, r1
 801077c:	d458      	bmi.n	8010830 <__sflush_r+0xc0>
 801077e:	684b      	ldr	r3, [r1, #4]
 8010780:	2b00      	cmp	r3, #0
 8010782:	dc05      	bgt.n	8010790 <__sflush_r+0x20>
 8010784:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010786:	2b00      	cmp	r3, #0
 8010788:	dc02      	bgt.n	8010790 <__sflush_r+0x20>
 801078a:	2000      	movs	r0, #0
 801078c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010792:	2e00      	cmp	r6, #0
 8010794:	d0f9      	beq.n	801078a <__sflush_r+0x1a>
 8010796:	2300      	movs	r3, #0
 8010798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801079c:	682f      	ldr	r7, [r5, #0]
 801079e:	6a21      	ldr	r1, [r4, #32]
 80107a0:	602b      	str	r3, [r5, #0]
 80107a2:	d032      	beq.n	801080a <__sflush_r+0x9a>
 80107a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107a6:	89a3      	ldrh	r3, [r4, #12]
 80107a8:	075a      	lsls	r2, r3, #29
 80107aa:	d505      	bpl.n	80107b8 <__sflush_r+0x48>
 80107ac:	6863      	ldr	r3, [r4, #4]
 80107ae:	1ac0      	subs	r0, r0, r3
 80107b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107b2:	b10b      	cbz	r3, 80107b8 <__sflush_r+0x48>
 80107b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107b6:	1ac0      	subs	r0, r0, r3
 80107b8:	2300      	movs	r3, #0
 80107ba:	4602      	mov	r2, r0
 80107bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107be:	6a21      	ldr	r1, [r4, #32]
 80107c0:	4628      	mov	r0, r5
 80107c2:	47b0      	blx	r6
 80107c4:	1c43      	adds	r3, r0, #1
 80107c6:	89a3      	ldrh	r3, [r4, #12]
 80107c8:	d106      	bne.n	80107d8 <__sflush_r+0x68>
 80107ca:	6829      	ldr	r1, [r5, #0]
 80107cc:	291d      	cmp	r1, #29
 80107ce:	d848      	bhi.n	8010862 <__sflush_r+0xf2>
 80107d0:	4a29      	ldr	r2, [pc, #164]	; (8010878 <__sflush_r+0x108>)
 80107d2:	40ca      	lsrs	r2, r1
 80107d4:	07d6      	lsls	r6, r2, #31
 80107d6:	d544      	bpl.n	8010862 <__sflush_r+0xf2>
 80107d8:	2200      	movs	r2, #0
 80107da:	6062      	str	r2, [r4, #4]
 80107dc:	04d9      	lsls	r1, r3, #19
 80107de:	6922      	ldr	r2, [r4, #16]
 80107e0:	6022      	str	r2, [r4, #0]
 80107e2:	d504      	bpl.n	80107ee <__sflush_r+0x7e>
 80107e4:	1c42      	adds	r2, r0, #1
 80107e6:	d101      	bne.n	80107ec <__sflush_r+0x7c>
 80107e8:	682b      	ldr	r3, [r5, #0]
 80107ea:	b903      	cbnz	r3, 80107ee <__sflush_r+0x7e>
 80107ec:	6560      	str	r0, [r4, #84]	; 0x54
 80107ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107f0:	602f      	str	r7, [r5, #0]
 80107f2:	2900      	cmp	r1, #0
 80107f4:	d0c9      	beq.n	801078a <__sflush_r+0x1a>
 80107f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107fa:	4299      	cmp	r1, r3
 80107fc:	d002      	beq.n	8010804 <__sflush_r+0x94>
 80107fe:	4628      	mov	r0, r5
 8010800:	f000 f99c 	bl	8010b3c <_free_r>
 8010804:	2000      	movs	r0, #0
 8010806:	6360      	str	r0, [r4, #52]	; 0x34
 8010808:	e7c0      	b.n	801078c <__sflush_r+0x1c>
 801080a:	2301      	movs	r3, #1
 801080c:	4628      	mov	r0, r5
 801080e:	47b0      	blx	r6
 8010810:	1c41      	adds	r1, r0, #1
 8010812:	d1c8      	bne.n	80107a6 <__sflush_r+0x36>
 8010814:	682b      	ldr	r3, [r5, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d0c5      	beq.n	80107a6 <__sflush_r+0x36>
 801081a:	2b1d      	cmp	r3, #29
 801081c:	d001      	beq.n	8010822 <__sflush_r+0xb2>
 801081e:	2b16      	cmp	r3, #22
 8010820:	d101      	bne.n	8010826 <__sflush_r+0xb6>
 8010822:	602f      	str	r7, [r5, #0]
 8010824:	e7b1      	b.n	801078a <__sflush_r+0x1a>
 8010826:	89a3      	ldrh	r3, [r4, #12]
 8010828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801082c:	81a3      	strh	r3, [r4, #12]
 801082e:	e7ad      	b.n	801078c <__sflush_r+0x1c>
 8010830:	690f      	ldr	r7, [r1, #16]
 8010832:	2f00      	cmp	r7, #0
 8010834:	d0a9      	beq.n	801078a <__sflush_r+0x1a>
 8010836:	0793      	lsls	r3, r2, #30
 8010838:	680e      	ldr	r6, [r1, #0]
 801083a:	bf08      	it	eq
 801083c:	694b      	ldreq	r3, [r1, #20]
 801083e:	600f      	str	r7, [r1, #0]
 8010840:	bf18      	it	ne
 8010842:	2300      	movne	r3, #0
 8010844:	eba6 0807 	sub.w	r8, r6, r7
 8010848:	608b      	str	r3, [r1, #8]
 801084a:	f1b8 0f00 	cmp.w	r8, #0
 801084e:	dd9c      	ble.n	801078a <__sflush_r+0x1a>
 8010850:	4643      	mov	r3, r8
 8010852:	463a      	mov	r2, r7
 8010854:	6a21      	ldr	r1, [r4, #32]
 8010856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010858:	4628      	mov	r0, r5
 801085a:	47b0      	blx	r6
 801085c:	2800      	cmp	r0, #0
 801085e:	dc06      	bgt.n	801086e <__sflush_r+0xfe>
 8010860:	89a3      	ldrh	r3, [r4, #12]
 8010862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010866:	81a3      	strh	r3, [r4, #12]
 8010868:	f04f 30ff 	mov.w	r0, #4294967295
 801086c:	e78e      	b.n	801078c <__sflush_r+0x1c>
 801086e:	4407      	add	r7, r0
 8010870:	eba8 0800 	sub.w	r8, r8, r0
 8010874:	e7e9      	b.n	801084a <__sflush_r+0xda>
 8010876:	bf00      	nop
 8010878:	20400001 	.word	0x20400001

0801087c <_fflush_r>:
 801087c:	b538      	push	{r3, r4, r5, lr}
 801087e:	690b      	ldr	r3, [r1, #16]
 8010880:	4605      	mov	r5, r0
 8010882:	460c      	mov	r4, r1
 8010884:	b1db      	cbz	r3, 80108be <_fflush_r+0x42>
 8010886:	b118      	cbz	r0, 8010890 <_fflush_r+0x14>
 8010888:	6983      	ldr	r3, [r0, #24]
 801088a:	b90b      	cbnz	r3, 8010890 <_fflush_r+0x14>
 801088c:	f000 f860 	bl	8010950 <__sinit>
 8010890:	4b0c      	ldr	r3, [pc, #48]	; (80108c4 <_fflush_r+0x48>)
 8010892:	429c      	cmp	r4, r3
 8010894:	d109      	bne.n	80108aa <_fflush_r+0x2e>
 8010896:	686c      	ldr	r4, [r5, #4]
 8010898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801089c:	b17b      	cbz	r3, 80108be <_fflush_r+0x42>
 801089e:	4621      	mov	r1, r4
 80108a0:	4628      	mov	r0, r5
 80108a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108a6:	f7ff bf63 	b.w	8010770 <__sflush_r>
 80108aa:	4b07      	ldr	r3, [pc, #28]	; (80108c8 <_fflush_r+0x4c>)
 80108ac:	429c      	cmp	r4, r3
 80108ae:	d101      	bne.n	80108b4 <_fflush_r+0x38>
 80108b0:	68ac      	ldr	r4, [r5, #8]
 80108b2:	e7f1      	b.n	8010898 <_fflush_r+0x1c>
 80108b4:	4b05      	ldr	r3, [pc, #20]	; (80108cc <_fflush_r+0x50>)
 80108b6:	429c      	cmp	r4, r3
 80108b8:	bf08      	it	eq
 80108ba:	68ec      	ldreq	r4, [r5, #12]
 80108bc:	e7ec      	b.n	8010898 <_fflush_r+0x1c>
 80108be:	2000      	movs	r0, #0
 80108c0:	bd38      	pop	{r3, r4, r5, pc}
 80108c2:	bf00      	nop
 80108c4:	08014b10 	.word	0x08014b10
 80108c8:	08014b30 	.word	0x08014b30
 80108cc:	08014af0 	.word	0x08014af0

080108d0 <std>:
 80108d0:	2300      	movs	r3, #0
 80108d2:	b510      	push	{r4, lr}
 80108d4:	4604      	mov	r4, r0
 80108d6:	e9c0 3300 	strd	r3, r3, [r0]
 80108da:	6083      	str	r3, [r0, #8]
 80108dc:	8181      	strh	r1, [r0, #12]
 80108de:	6643      	str	r3, [r0, #100]	; 0x64
 80108e0:	81c2      	strh	r2, [r0, #14]
 80108e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108e6:	6183      	str	r3, [r0, #24]
 80108e8:	4619      	mov	r1, r3
 80108ea:	2208      	movs	r2, #8
 80108ec:	305c      	adds	r0, #92	; 0x5c
 80108ee:	f7ff fd94 	bl	801041a <memset>
 80108f2:	4b05      	ldr	r3, [pc, #20]	; (8010908 <std+0x38>)
 80108f4:	6263      	str	r3, [r4, #36]	; 0x24
 80108f6:	4b05      	ldr	r3, [pc, #20]	; (801090c <std+0x3c>)
 80108f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80108fa:	4b05      	ldr	r3, [pc, #20]	; (8010910 <std+0x40>)
 80108fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80108fe:	4b05      	ldr	r3, [pc, #20]	; (8010914 <std+0x44>)
 8010900:	6224      	str	r4, [r4, #32]
 8010902:	6323      	str	r3, [r4, #48]	; 0x30
 8010904:	bd10      	pop	{r4, pc}
 8010906:	bf00      	nop
 8010908:	080114e1 	.word	0x080114e1
 801090c:	08011503 	.word	0x08011503
 8010910:	0801153b 	.word	0x0801153b
 8010914:	0801155f 	.word	0x0801155f

08010918 <_cleanup_r>:
 8010918:	4901      	ldr	r1, [pc, #4]	; (8010920 <_cleanup_r+0x8>)
 801091a:	f000 b885 	b.w	8010a28 <_fwalk_reent>
 801091e:	bf00      	nop
 8010920:	0801087d 	.word	0x0801087d

08010924 <__sfmoreglue>:
 8010924:	b570      	push	{r4, r5, r6, lr}
 8010926:	1e4a      	subs	r2, r1, #1
 8010928:	2568      	movs	r5, #104	; 0x68
 801092a:	4355      	muls	r5, r2
 801092c:	460e      	mov	r6, r1
 801092e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010932:	f000 f951 	bl	8010bd8 <_malloc_r>
 8010936:	4604      	mov	r4, r0
 8010938:	b140      	cbz	r0, 801094c <__sfmoreglue+0x28>
 801093a:	2100      	movs	r1, #0
 801093c:	e9c0 1600 	strd	r1, r6, [r0]
 8010940:	300c      	adds	r0, #12
 8010942:	60a0      	str	r0, [r4, #8]
 8010944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010948:	f7ff fd67 	bl	801041a <memset>
 801094c:	4620      	mov	r0, r4
 801094e:	bd70      	pop	{r4, r5, r6, pc}

08010950 <__sinit>:
 8010950:	6983      	ldr	r3, [r0, #24]
 8010952:	b510      	push	{r4, lr}
 8010954:	4604      	mov	r4, r0
 8010956:	bb33      	cbnz	r3, 80109a6 <__sinit+0x56>
 8010958:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801095c:	6503      	str	r3, [r0, #80]	; 0x50
 801095e:	4b12      	ldr	r3, [pc, #72]	; (80109a8 <__sinit+0x58>)
 8010960:	4a12      	ldr	r2, [pc, #72]	; (80109ac <__sinit+0x5c>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6282      	str	r2, [r0, #40]	; 0x28
 8010966:	4298      	cmp	r0, r3
 8010968:	bf04      	itt	eq
 801096a:	2301      	moveq	r3, #1
 801096c:	6183      	streq	r3, [r0, #24]
 801096e:	f000 f81f 	bl	80109b0 <__sfp>
 8010972:	6060      	str	r0, [r4, #4]
 8010974:	4620      	mov	r0, r4
 8010976:	f000 f81b 	bl	80109b0 <__sfp>
 801097a:	60a0      	str	r0, [r4, #8]
 801097c:	4620      	mov	r0, r4
 801097e:	f000 f817 	bl	80109b0 <__sfp>
 8010982:	2200      	movs	r2, #0
 8010984:	60e0      	str	r0, [r4, #12]
 8010986:	2104      	movs	r1, #4
 8010988:	6860      	ldr	r0, [r4, #4]
 801098a:	f7ff ffa1 	bl	80108d0 <std>
 801098e:	2201      	movs	r2, #1
 8010990:	2109      	movs	r1, #9
 8010992:	68a0      	ldr	r0, [r4, #8]
 8010994:	f7ff ff9c 	bl	80108d0 <std>
 8010998:	2202      	movs	r2, #2
 801099a:	2112      	movs	r1, #18
 801099c:	68e0      	ldr	r0, [r4, #12]
 801099e:	f7ff ff97 	bl	80108d0 <std>
 80109a2:	2301      	movs	r3, #1
 80109a4:	61a3      	str	r3, [r4, #24]
 80109a6:	bd10      	pop	{r4, pc}
 80109a8:	08014aec 	.word	0x08014aec
 80109ac:	08010919 	.word	0x08010919

080109b0 <__sfp>:
 80109b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109b2:	4b1b      	ldr	r3, [pc, #108]	; (8010a20 <__sfp+0x70>)
 80109b4:	681e      	ldr	r6, [r3, #0]
 80109b6:	69b3      	ldr	r3, [r6, #24]
 80109b8:	4607      	mov	r7, r0
 80109ba:	b913      	cbnz	r3, 80109c2 <__sfp+0x12>
 80109bc:	4630      	mov	r0, r6
 80109be:	f7ff ffc7 	bl	8010950 <__sinit>
 80109c2:	3648      	adds	r6, #72	; 0x48
 80109c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80109c8:	3b01      	subs	r3, #1
 80109ca:	d503      	bpl.n	80109d4 <__sfp+0x24>
 80109cc:	6833      	ldr	r3, [r6, #0]
 80109ce:	b133      	cbz	r3, 80109de <__sfp+0x2e>
 80109d0:	6836      	ldr	r6, [r6, #0]
 80109d2:	e7f7      	b.n	80109c4 <__sfp+0x14>
 80109d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80109d8:	b16d      	cbz	r5, 80109f6 <__sfp+0x46>
 80109da:	3468      	adds	r4, #104	; 0x68
 80109dc:	e7f4      	b.n	80109c8 <__sfp+0x18>
 80109de:	2104      	movs	r1, #4
 80109e0:	4638      	mov	r0, r7
 80109e2:	f7ff ff9f 	bl	8010924 <__sfmoreglue>
 80109e6:	6030      	str	r0, [r6, #0]
 80109e8:	2800      	cmp	r0, #0
 80109ea:	d1f1      	bne.n	80109d0 <__sfp+0x20>
 80109ec:	230c      	movs	r3, #12
 80109ee:	603b      	str	r3, [r7, #0]
 80109f0:	4604      	mov	r4, r0
 80109f2:	4620      	mov	r0, r4
 80109f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109f6:	4b0b      	ldr	r3, [pc, #44]	; (8010a24 <__sfp+0x74>)
 80109f8:	6665      	str	r5, [r4, #100]	; 0x64
 80109fa:	e9c4 5500 	strd	r5, r5, [r4]
 80109fe:	60a5      	str	r5, [r4, #8]
 8010a00:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010a04:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010a08:	2208      	movs	r2, #8
 8010a0a:	4629      	mov	r1, r5
 8010a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a10:	f7ff fd03 	bl	801041a <memset>
 8010a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a1c:	e7e9      	b.n	80109f2 <__sfp+0x42>
 8010a1e:	bf00      	nop
 8010a20:	08014aec 	.word	0x08014aec
 8010a24:	ffff0001 	.word	0xffff0001

08010a28 <_fwalk_reent>:
 8010a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a2c:	4680      	mov	r8, r0
 8010a2e:	4689      	mov	r9, r1
 8010a30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010a34:	2600      	movs	r6, #0
 8010a36:	b914      	cbnz	r4, 8010a3e <_fwalk_reent+0x16>
 8010a38:	4630      	mov	r0, r6
 8010a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a3e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010a42:	3f01      	subs	r7, #1
 8010a44:	d501      	bpl.n	8010a4a <_fwalk_reent+0x22>
 8010a46:	6824      	ldr	r4, [r4, #0]
 8010a48:	e7f5      	b.n	8010a36 <_fwalk_reent+0xe>
 8010a4a:	89ab      	ldrh	r3, [r5, #12]
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d907      	bls.n	8010a60 <_fwalk_reent+0x38>
 8010a50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a54:	3301      	adds	r3, #1
 8010a56:	d003      	beq.n	8010a60 <_fwalk_reent+0x38>
 8010a58:	4629      	mov	r1, r5
 8010a5a:	4640      	mov	r0, r8
 8010a5c:	47c8      	blx	r9
 8010a5e:	4306      	orrs	r6, r0
 8010a60:	3568      	adds	r5, #104	; 0x68
 8010a62:	e7ee      	b.n	8010a42 <_fwalk_reent+0x1a>

08010a64 <__swhatbuf_r>:
 8010a64:	b570      	push	{r4, r5, r6, lr}
 8010a66:	460e      	mov	r6, r1
 8010a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a6c:	2900      	cmp	r1, #0
 8010a6e:	b096      	sub	sp, #88	; 0x58
 8010a70:	4614      	mov	r4, r2
 8010a72:	461d      	mov	r5, r3
 8010a74:	da07      	bge.n	8010a86 <__swhatbuf_r+0x22>
 8010a76:	2300      	movs	r3, #0
 8010a78:	602b      	str	r3, [r5, #0]
 8010a7a:	89b3      	ldrh	r3, [r6, #12]
 8010a7c:	061a      	lsls	r2, r3, #24
 8010a7e:	d410      	bmi.n	8010aa2 <__swhatbuf_r+0x3e>
 8010a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a84:	e00e      	b.n	8010aa4 <__swhatbuf_r+0x40>
 8010a86:	466a      	mov	r2, sp
 8010a88:	f000 fd90 	bl	80115ac <_fstat_r>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	dbf2      	blt.n	8010a76 <__swhatbuf_r+0x12>
 8010a90:	9a01      	ldr	r2, [sp, #4]
 8010a92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a9a:	425a      	negs	r2, r3
 8010a9c:	415a      	adcs	r2, r3
 8010a9e:	602a      	str	r2, [r5, #0]
 8010aa0:	e7ee      	b.n	8010a80 <__swhatbuf_r+0x1c>
 8010aa2:	2340      	movs	r3, #64	; 0x40
 8010aa4:	2000      	movs	r0, #0
 8010aa6:	6023      	str	r3, [r4, #0]
 8010aa8:	b016      	add	sp, #88	; 0x58
 8010aaa:	bd70      	pop	{r4, r5, r6, pc}

08010aac <__smakebuf_r>:
 8010aac:	898b      	ldrh	r3, [r1, #12]
 8010aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ab0:	079d      	lsls	r5, r3, #30
 8010ab2:	4606      	mov	r6, r0
 8010ab4:	460c      	mov	r4, r1
 8010ab6:	d507      	bpl.n	8010ac8 <__smakebuf_r+0x1c>
 8010ab8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010abc:	6023      	str	r3, [r4, #0]
 8010abe:	6123      	str	r3, [r4, #16]
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	6163      	str	r3, [r4, #20]
 8010ac4:	b002      	add	sp, #8
 8010ac6:	bd70      	pop	{r4, r5, r6, pc}
 8010ac8:	ab01      	add	r3, sp, #4
 8010aca:	466a      	mov	r2, sp
 8010acc:	f7ff ffca 	bl	8010a64 <__swhatbuf_r>
 8010ad0:	9900      	ldr	r1, [sp, #0]
 8010ad2:	4605      	mov	r5, r0
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	f000 f87f 	bl	8010bd8 <_malloc_r>
 8010ada:	b948      	cbnz	r0, 8010af0 <__smakebuf_r+0x44>
 8010adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ae0:	059a      	lsls	r2, r3, #22
 8010ae2:	d4ef      	bmi.n	8010ac4 <__smakebuf_r+0x18>
 8010ae4:	f023 0303 	bic.w	r3, r3, #3
 8010ae8:	f043 0302 	orr.w	r3, r3, #2
 8010aec:	81a3      	strh	r3, [r4, #12]
 8010aee:	e7e3      	b.n	8010ab8 <__smakebuf_r+0xc>
 8010af0:	4b0d      	ldr	r3, [pc, #52]	; (8010b28 <__smakebuf_r+0x7c>)
 8010af2:	62b3      	str	r3, [r6, #40]	; 0x28
 8010af4:	89a3      	ldrh	r3, [r4, #12]
 8010af6:	6020      	str	r0, [r4, #0]
 8010af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010afc:	81a3      	strh	r3, [r4, #12]
 8010afe:	9b00      	ldr	r3, [sp, #0]
 8010b00:	6163      	str	r3, [r4, #20]
 8010b02:	9b01      	ldr	r3, [sp, #4]
 8010b04:	6120      	str	r0, [r4, #16]
 8010b06:	b15b      	cbz	r3, 8010b20 <__smakebuf_r+0x74>
 8010b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b0c:	4630      	mov	r0, r6
 8010b0e:	f000 fd5f 	bl	80115d0 <_isatty_r>
 8010b12:	b128      	cbz	r0, 8010b20 <__smakebuf_r+0x74>
 8010b14:	89a3      	ldrh	r3, [r4, #12]
 8010b16:	f023 0303 	bic.w	r3, r3, #3
 8010b1a:	f043 0301 	orr.w	r3, r3, #1
 8010b1e:	81a3      	strh	r3, [r4, #12]
 8010b20:	89a3      	ldrh	r3, [r4, #12]
 8010b22:	431d      	orrs	r5, r3
 8010b24:	81a5      	strh	r5, [r4, #12]
 8010b26:	e7cd      	b.n	8010ac4 <__smakebuf_r+0x18>
 8010b28:	08010919 	.word	0x08010919

08010b2c <malloc>:
 8010b2c:	4b02      	ldr	r3, [pc, #8]	; (8010b38 <malloc+0xc>)
 8010b2e:	4601      	mov	r1, r0
 8010b30:	6818      	ldr	r0, [r3, #0]
 8010b32:	f000 b851 	b.w	8010bd8 <_malloc_r>
 8010b36:	bf00      	nop
 8010b38:	20000014 	.word	0x20000014

08010b3c <_free_r>:
 8010b3c:	b538      	push	{r3, r4, r5, lr}
 8010b3e:	4605      	mov	r5, r0
 8010b40:	2900      	cmp	r1, #0
 8010b42:	d045      	beq.n	8010bd0 <_free_r+0x94>
 8010b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b48:	1f0c      	subs	r4, r1, #4
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	bfb8      	it	lt
 8010b4e:	18e4      	addlt	r4, r4, r3
 8010b50:	f000 fd60 	bl	8011614 <__malloc_lock>
 8010b54:	4a1f      	ldr	r2, [pc, #124]	; (8010bd4 <_free_r+0x98>)
 8010b56:	6813      	ldr	r3, [r2, #0]
 8010b58:	4610      	mov	r0, r2
 8010b5a:	b933      	cbnz	r3, 8010b6a <_free_r+0x2e>
 8010b5c:	6063      	str	r3, [r4, #4]
 8010b5e:	6014      	str	r4, [r2, #0]
 8010b60:	4628      	mov	r0, r5
 8010b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b66:	f000 bd56 	b.w	8011616 <__malloc_unlock>
 8010b6a:	42a3      	cmp	r3, r4
 8010b6c:	d90c      	bls.n	8010b88 <_free_r+0x4c>
 8010b6e:	6821      	ldr	r1, [r4, #0]
 8010b70:	1862      	adds	r2, r4, r1
 8010b72:	4293      	cmp	r3, r2
 8010b74:	bf04      	itt	eq
 8010b76:	681a      	ldreq	r2, [r3, #0]
 8010b78:	685b      	ldreq	r3, [r3, #4]
 8010b7a:	6063      	str	r3, [r4, #4]
 8010b7c:	bf04      	itt	eq
 8010b7e:	1852      	addeq	r2, r2, r1
 8010b80:	6022      	streq	r2, [r4, #0]
 8010b82:	6004      	str	r4, [r0, #0]
 8010b84:	e7ec      	b.n	8010b60 <_free_r+0x24>
 8010b86:	4613      	mov	r3, r2
 8010b88:	685a      	ldr	r2, [r3, #4]
 8010b8a:	b10a      	cbz	r2, 8010b90 <_free_r+0x54>
 8010b8c:	42a2      	cmp	r2, r4
 8010b8e:	d9fa      	bls.n	8010b86 <_free_r+0x4a>
 8010b90:	6819      	ldr	r1, [r3, #0]
 8010b92:	1858      	adds	r0, r3, r1
 8010b94:	42a0      	cmp	r0, r4
 8010b96:	d10b      	bne.n	8010bb0 <_free_r+0x74>
 8010b98:	6820      	ldr	r0, [r4, #0]
 8010b9a:	4401      	add	r1, r0
 8010b9c:	1858      	adds	r0, r3, r1
 8010b9e:	4282      	cmp	r2, r0
 8010ba0:	6019      	str	r1, [r3, #0]
 8010ba2:	d1dd      	bne.n	8010b60 <_free_r+0x24>
 8010ba4:	6810      	ldr	r0, [r2, #0]
 8010ba6:	6852      	ldr	r2, [r2, #4]
 8010ba8:	605a      	str	r2, [r3, #4]
 8010baa:	4401      	add	r1, r0
 8010bac:	6019      	str	r1, [r3, #0]
 8010bae:	e7d7      	b.n	8010b60 <_free_r+0x24>
 8010bb0:	d902      	bls.n	8010bb8 <_free_r+0x7c>
 8010bb2:	230c      	movs	r3, #12
 8010bb4:	602b      	str	r3, [r5, #0]
 8010bb6:	e7d3      	b.n	8010b60 <_free_r+0x24>
 8010bb8:	6820      	ldr	r0, [r4, #0]
 8010bba:	1821      	adds	r1, r4, r0
 8010bbc:	428a      	cmp	r2, r1
 8010bbe:	bf04      	itt	eq
 8010bc0:	6811      	ldreq	r1, [r2, #0]
 8010bc2:	6852      	ldreq	r2, [r2, #4]
 8010bc4:	6062      	str	r2, [r4, #4]
 8010bc6:	bf04      	itt	eq
 8010bc8:	1809      	addeq	r1, r1, r0
 8010bca:	6021      	streq	r1, [r4, #0]
 8010bcc:	605c      	str	r4, [r3, #4]
 8010bce:	e7c7      	b.n	8010b60 <_free_r+0x24>
 8010bd0:	bd38      	pop	{r3, r4, r5, pc}
 8010bd2:	bf00      	nop
 8010bd4:	2000020c 	.word	0x2000020c

08010bd8 <_malloc_r>:
 8010bd8:	b570      	push	{r4, r5, r6, lr}
 8010bda:	1ccd      	adds	r5, r1, #3
 8010bdc:	f025 0503 	bic.w	r5, r5, #3
 8010be0:	3508      	adds	r5, #8
 8010be2:	2d0c      	cmp	r5, #12
 8010be4:	bf38      	it	cc
 8010be6:	250c      	movcc	r5, #12
 8010be8:	2d00      	cmp	r5, #0
 8010bea:	4606      	mov	r6, r0
 8010bec:	db01      	blt.n	8010bf2 <_malloc_r+0x1a>
 8010bee:	42a9      	cmp	r1, r5
 8010bf0:	d903      	bls.n	8010bfa <_malloc_r+0x22>
 8010bf2:	230c      	movs	r3, #12
 8010bf4:	6033      	str	r3, [r6, #0]
 8010bf6:	2000      	movs	r0, #0
 8010bf8:	bd70      	pop	{r4, r5, r6, pc}
 8010bfa:	f000 fd0b 	bl	8011614 <__malloc_lock>
 8010bfe:	4a21      	ldr	r2, [pc, #132]	; (8010c84 <_malloc_r+0xac>)
 8010c00:	6814      	ldr	r4, [r2, #0]
 8010c02:	4621      	mov	r1, r4
 8010c04:	b991      	cbnz	r1, 8010c2c <_malloc_r+0x54>
 8010c06:	4c20      	ldr	r4, [pc, #128]	; (8010c88 <_malloc_r+0xb0>)
 8010c08:	6823      	ldr	r3, [r4, #0]
 8010c0a:	b91b      	cbnz	r3, 8010c14 <_malloc_r+0x3c>
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	f000 fc57 	bl	80114c0 <_sbrk_r>
 8010c12:	6020      	str	r0, [r4, #0]
 8010c14:	4629      	mov	r1, r5
 8010c16:	4630      	mov	r0, r6
 8010c18:	f000 fc52 	bl	80114c0 <_sbrk_r>
 8010c1c:	1c43      	adds	r3, r0, #1
 8010c1e:	d124      	bne.n	8010c6a <_malloc_r+0x92>
 8010c20:	230c      	movs	r3, #12
 8010c22:	6033      	str	r3, [r6, #0]
 8010c24:	4630      	mov	r0, r6
 8010c26:	f000 fcf6 	bl	8011616 <__malloc_unlock>
 8010c2a:	e7e4      	b.n	8010bf6 <_malloc_r+0x1e>
 8010c2c:	680b      	ldr	r3, [r1, #0]
 8010c2e:	1b5b      	subs	r3, r3, r5
 8010c30:	d418      	bmi.n	8010c64 <_malloc_r+0x8c>
 8010c32:	2b0b      	cmp	r3, #11
 8010c34:	d90f      	bls.n	8010c56 <_malloc_r+0x7e>
 8010c36:	600b      	str	r3, [r1, #0]
 8010c38:	50cd      	str	r5, [r1, r3]
 8010c3a:	18cc      	adds	r4, r1, r3
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	f000 fcea 	bl	8011616 <__malloc_unlock>
 8010c42:	f104 000b 	add.w	r0, r4, #11
 8010c46:	1d23      	adds	r3, r4, #4
 8010c48:	f020 0007 	bic.w	r0, r0, #7
 8010c4c:	1ac3      	subs	r3, r0, r3
 8010c4e:	d0d3      	beq.n	8010bf8 <_malloc_r+0x20>
 8010c50:	425a      	negs	r2, r3
 8010c52:	50e2      	str	r2, [r4, r3]
 8010c54:	e7d0      	b.n	8010bf8 <_malloc_r+0x20>
 8010c56:	428c      	cmp	r4, r1
 8010c58:	684b      	ldr	r3, [r1, #4]
 8010c5a:	bf16      	itet	ne
 8010c5c:	6063      	strne	r3, [r4, #4]
 8010c5e:	6013      	streq	r3, [r2, #0]
 8010c60:	460c      	movne	r4, r1
 8010c62:	e7eb      	b.n	8010c3c <_malloc_r+0x64>
 8010c64:	460c      	mov	r4, r1
 8010c66:	6849      	ldr	r1, [r1, #4]
 8010c68:	e7cc      	b.n	8010c04 <_malloc_r+0x2c>
 8010c6a:	1cc4      	adds	r4, r0, #3
 8010c6c:	f024 0403 	bic.w	r4, r4, #3
 8010c70:	42a0      	cmp	r0, r4
 8010c72:	d005      	beq.n	8010c80 <_malloc_r+0xa8>
 8010c74:	1a21      	subs	r1, r4, r0
 8010c76:	4630      	mov	r0, r6
 8010c78:	f000 fc22 	bl	80114c0 <_sbrk_r>
 8010c7c:	3001      	adds	r0, #1
 8010c7e:	d0cf      	beq.n	8010c20 <_malloc_r+0x48>
 8010c80:	6025      	str	r5, [r4, #0]
 8010c82:	e7db      	b.n	8010c3c <_malloc_r+0x64>
 8010c84:	2000020c 	.word	0x2000020c
 8010c88:	20000210 	.word	0x20000210

08010c8c <__ssputs_r>:
 8010c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c90:	688e      	ldr	r6, [r1, #8]
 8010c92:	429e      	cmp	r6, r3
 8010c94:	4682      	mov	sl, r0
 8010c96:	460c      	mov	r4, r1
 8010c98:	4690      	mov	r8, r2
 8010c9a:	4699      	mov	r9, r3
 8010c9c:	d837      	bhi.n	8010d0e <__ssputs_r+0x82>
 8010c9e:	898a      	ldrh	r2, [r1, #12]
 8010ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ca4:	d031      	beq.n	8010d0a <__ssputs_r+0x7e>
 8010ca6:	6825      	ldr	r5, [r4, #0]
 8010ca8:	6909      	ldr	r1, [r1, #16]
 8010caa:	1a6f      	subs	r7, r5, r1
 8010cac:	6965      	ldr	r5, [r4, #20]
 8010cae:	2302      	movs	r3, #2
 8010cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8010cb8:	f109 0301 	add.w	r3, r9, #1
 8010cbc:	443b      	add	r3, r7
 8010cbe:	429d      	cmp	r5, r3
 8010cc0:	bf38      	it	cc
 8010cc2:	461d      	movcc	r5, r3
 8010cc4:	0553      	lsls	r3, r2, #21
 8010cc6:	d530      	bpl.n	8010d2a <__ssputs_r+0x9e>
 8010cc8:	4629      	mov	r1, r5
 8010cca:	f7ff ff85 	bl	8010bd8 <_malloc_r>
 8010cce:	4606      	mov	r6, r0
 8010cd0:	b950      	cbnz	r0, 8010ce8 <__ssputs_r+0x5c>
 8010cd2:	230c      	movs	r3, #12
 8010cd4:	f8ca 3000 	str.w	r3, [sl]
 8010cd8:	89a3      	ldrh	r3, [r4, #12]
 8010cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cde:	81a3      	strh	r3, [r4, #12]
 8010ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ce8:	463a      	mov	r2, r7
 8010cea:	6921      	ldr	r1, [r4, #16]
 8010cec:	f7ff fb71 	bl	80103d2 <memcpy>
 8010cf0:	89a3      	ldrh	r3, [r4, #12]
 8010cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cfa:	81a3      	strh	r3, [r4, #12]
 8010cfc:	6126      	str	r6, [r4, #16]
 8010cfe:	6165      	str	r5, [r4, #20]
 8010d00:	443e      	add	r6, r7
 8010d02:	1bed      	subs	r5, r5, r7
 8010d04:	6026      	str	r6, [r4, #0]
 8010d06:	60a5      	str	r5, [r4, #8]
 8010d08:	464e      	mov	r6, r9
 8010d0a:	454e      	cmp	r6, r9
 8010d0c:	d900      	bls.n	8010d10 <__ssputs_r+0x84>
 8010d0e:	464e      	mov	r6, r9
 8010d10:	4632      	mov	r2, r6
 8010d12:	4641      	mov	r1, r8
 8010d14:	6820      	ldr	r0, [r4, #0]
 8010d16:	f7ff fb67 	bl	80103e8 <memmove>
 8010d1a:	68a3      	ldr	r3, [r4, #8]
 8010d1c:	1b9b      	subs	r3, r3, r6
 8010d1e:	60a3      	str	r3, [r4, #8]
 8010d20:	6823      	ldr	r3, [r4, #0]
 8010d22:	441e      	add	r6, r3
 8010d24:	6026      	str	r6, [r4, #0]
 8010d26:	2000      	movs	r0, #0
 8010d28:	e7dc      	b.n	8010ce4 <__ssputs_r+0x58>
 8010d2a:	462a      	mov	r2, r5
 8010d2c:	f000 fc74 	bl	8011618 <_realloc_r>
 8010d30:	4606      	mov	r6, r0
 8010d32:	2800      	cmp	r0, #0
 8010d34:	d1e2      	bne.n	8010cfc <__ssputs_r+0x70>
 8010d36:	6921      	ldr	r1, [r4, #16]
 8010d38:	4650      	mov	r0, sl
 8010d3a:	f7ff feff 	bl	8010b3c <_free_r>
 8010d3e:	e7c8      	b.n	8010cd2 <__ssputs_r+0x46>

08010d40 <_svfiprintf_r>:
 8010d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d44:	461d      	mov	r5, r3
 8010d46:	898b      	ldrh	r3, [r1, #12]
 8010d48:	061f      	lsls	r7, r3, #24
 8010d4a:	b09d      	sub	sp, #116	; 0x74
 8010d4c:	4680      	mov	r8, r0
 8010d4e:	460c      	mov	r4, r1
 8010d50:	4616      	mov	r6, r2
 8010d52:	d50f      	bpl.n	8010d74 <_svfiprintf_r+0x34>
 8010d54:	690b      	ldr	r3, [r1, #16]
 8010d56:	b96b      	cbnz	r3, 8010d74 <_svfiprintf_r+0x34>
 8010d58:	2140      	movs	r1, #64	; 0x40
 8010d5a:	f7ff ff3d 	bl	8010bd8 <_malloc_r>
 8010d5e:	6020      	str	r0, [r4, #0]
 8010d60:	6120      	str	r0, [r4, #16]
 8010d62:	b928      	cbnz	r0, 8010d70 <_svfiprintf_r+0x30>
 8010d64:	230c      	movs	r3, #12
 8010d66:	f8c8 3000 	str.w	r3, [r8]
 8010d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d6e:	e0c8      	b.n	8010f02 <_svfiprintf_r+0x1c2>
 8010d70:	2340      	movs	r3, #64	; 0x40
 8010d72:	6163      	str	r3, [r4, #20]
 8010d74:	2300      	movs	r3, #0
 8010d76:	9309      	str	r3, [sp, #36]	; 0x24
 8010d78:	2320      	movs	r3, #32
 8010d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d7e:	2330      	movs	r3, #48	; 0x30
 8010d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d84:	9503      	str	r5, [sp, #12]
 8010d86:	f04f 0b01 	mov.w	fp, #1
 8010d8a:	4637      	mov	r7, r6
 8010d8c:	463d      	mov	r5, r7
 8010d8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010d92:	b10b      	cbz	r3, 8010d98 <_svfiprintf_r+0x58>
 8010d94:	2b25      	cmp	r3, #37	; 0x25
 8010d96:	d13e      	bne.n	8010e16 <_svfiprintf_r+0xd6>
 8010d98:	ebb7 0a06 	subs.w	sl, r7, r6
 8010d9c:	d00b      	beq.n	8010db6 <_svfiprintf_r+0x76>
 8010d9e:	4653      	mov	r3, sl
 8010da0:	4632      	mov	r2, r6
 8010da2:	4621      	mov	r1, r4
 8010da4:	4640      	mov	r0, r8
 8010da6:	f7ff ff71 	bl	8010c8c <__ssputs_r>
 8010daa:	3001      	adds	r0, #1
 8010dac:	f000 80a4 	beq.w	8010ef8 <_svfiprintf_r+0x1b8>
 8010db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010db2:	4453      	add	r3, sl
 8010db4:	9309      	str	r3, [sp, #36]	; 0x24
 8010db6:	783b      	ldrb	r3, [r7, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f000 809d 	beq.w	8010ef8 <_svfiprintf_r+0x1b8>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dc8:	9304      	str	r3, [sp, #16]
 8010dca:	9307      	str	r3, [sp, #28]
 8010dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8010dd2:	462f      	mov	r7, r5
 8010dd4:	2205      	movs	r2, #5
 8010dd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010dda:	4850      	ldr	r0, [pc, #320]	; (8010f1c <_svfiprintf_r+0x1dc>)
 8010ddc:	f7ef fa10 	bl	8000200 <memchr>
 8010de0:	9b04      	ldr	r3, [sp, #16]
 8010de2:	b9d0      	cbnz	r0, 8010e1a <_svfiprintf_r+0xda>
 8010de4:	06d9      	lsls	r1, r3, #27
 8010de6:	bf44      	itt	mi
 8010de8:	2220      	movmi	r2, #32
 8010dea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010dee:	071a      	lsls	r2, r3, #28
 8010df0:	bf44      	itt	mi
 8010df2:	222b      	movmi	r2, #43	; 0x2b
 8010df4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010df8:	782a      	ldrb	r2, [r5, #0]
 8010dfa:	2a2a      	cmp	r2, #42	; 0x2a
 8010dfc:	d015      	beq.n	8010e2a <_svfiprintf_r+0xea>
 8010dfe:	9a07      	ldr	r2, [sp, #28]
 8010e00:	462f      	mov	r7, r5
 8010e02:	2000      	movs	r0, #0
 8010e04:	250a      	movs	r5, #10
 8010e06:	4639      	mov	r1, r7
 8010e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e0c:	3b30      	subs	r3, #48	; 0x30
 8010e0e:	2b09      	cmp	r3, #9
 8010e10:	d94d      	bls.n	8010eae <_svfiprintf_r+0x16e>
 8010e12:	b1b8      	cbz	r0, 8010e44 <_svfiprintf_r+0x104>
 8010e14:	e00f      	b.n	8010e36 <_svfiprintf_r+0xf6>
 8010e16:	462f      	mov	r7, r5
 8010e18:	e7b8      	b.n	8010d8c <_svfiprintf_r+0x4c>
 8010e1a:	4a40      	ldr	r2, [pc, #256]	; (8010f1c <_svfiprintf_r+0x1dc>)
 8010e1c:	1a80      	subs	r0, r0, r2
 8010e1e:	fa0b f000 	lsl.w	r0, fp, r0
 8010e22:	4318      	orrs	r0, r3
 8010e24:	9004      	str	r0, [sp, #16]
 8010e26:	463d      	mov	r5, r7
 8010e28:	e7d3      	b.n	8010dd2 <_svfiprintf_r+0x92>
 8010e2a:	9a03      	ldr	r2, [sp, #12]
 8010e2c:	1d11      	adds	r1, r2, #4
 8010e2e:	6812      	ldr	r2, [r2, #0]
 8010e30:	9103      	str	r1, [sp, #12]
 8010e32:	2a00      	cmp	r2, #0
 8010e34:	db01      	blt.n	8010e3a <_svfiprintf_r+0xfa>
 8010e36:	9207      	str	r2, [sp, #28]
 8010e38:	e004      	b.n	8010e44 <_svfiprintf_r+0x104>
 8010e3a:	4252      	negs	r2, r2
 8010e3c:	f043 0302 	orr.w	r3, r3, #2
 8010e40:	9207      	str	r2, [sp, #28]
 8010e42:	9304      	str	r3, [sp, #16]
 8010e44:	783b      	ldrb	r3, [r7, #0]
 8010e46:	2b2e      	cmp	r3, #46	; 0x2e
 8010e48:	d10c      	bne.n	8010e64 <_svfiprintf_r+0x124>
 8010e4a:	787b      	ldrb	r3, [r7, #1]
 8010e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8010e4e:	d133      	bne.n	8010eb8 <_svfiprintf_r+0x178>
 8010e50:	9b03      	ldr	r3, [sp, #12]
 8010e52:	1d1a      	adds	r2, r3, #4
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	9203      	str	r2, [sp, #12]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	bfb8      	it	lt
 8010e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e60:	3702      	adds	r7, #2
 8010e62:	9305      	str	r3, [sp, #20]
 8010e64:	4d2e      	ldr	r5, [pc, #184]	; (8010f20 <_svfiprintf_r+0x1e0>)
 8010e66:	7839      	ldrb	r1, [r7, #0]
 8010e68:	2203      	movs	r2, #3
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	f7ef f9c8 	bl	8000200 <memchr>
 8010e70:	b138      	cbz	r0, 8010e82 <_svfiprintf_r+0x142>
 8010e72:	2340      	movs	r3, #64	; 0x40
 8010e74:	1b40      	subs	r0, r0, r5
 8010e76:	fa03 f000 	lsl.w	r0, r3, r0
 8010e7a:	9b04      	ldr	r3, [sp, #16]
 8010e7c:	4303      	orrs	r3, r0
 8010e7e:	3701      	adds	r7, #1
 8010e80:	9304      	str	r3, [sp, #16]
 8010e82:	7839      	ldrb	r1, [r7, #0]
 8010e84:	4827      	ldr	r0, [pc, #156]	; (8010f24 <_svfiprintf_r+0x1e4>)
 8010e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e8a:	2206      	movs	r2, #6
 8010e8c:	1c7e      	adds	r6, r7, #1
 8010e8e:	f7ef f9b7 	bl	8000200 <memchr>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	d038      	beq.n	8010f08 <_svfiprintf_r+0x1c8>
 8010e96:	4b24      	ldr	r3, [pc, #144]	; (8010f28 <_svfiprintf_r+0x1e8>)
 8010e98:	bb13      	cbnz	r3, 8010ee0 <_svfiprintf_r+0x1a0>
 8010e9a:	9b03      	ldr	r3, [sp, #12]
 8010e9c:	3307      	adds	r3, #7
 8010e9e:	f023 0307 	bic.w	r3, r3, #7
 8010ea2:	3308      	adds	r3, #8
 8010ea4:	9303      	str	r3, [sp, #12]
 8010ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ea8:	444b      	add	r3, r9
 8010eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8010eac:	e76d      	b.n	8010d8a <_svfiprintf_r+0x4a>
 8010eae:	fb05 3202 	mla	r2, r5, r2, r3
 8010eb2:	2001      	movs	r0, #1
 8010eb4:	460f      	mov	r7, r1
 8010eb6:	e7a6      	b.n	8010e06 <_svfiprintf_r+0xc6>
 8010eb8:	2300      	movs	r3, #0
 8010eba:	3701      	adds	r7, #1
 8010ebc:	9305      	str	r3, [sp, #20]
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	250a      	movs	r5, #10
 8010ec2:	4638      	mov	r0, r7
 8010ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ec8:	3a30      	subs	r2, #48	; 0x30
 8010eca:	2a09      	cmp	r2, #9
 8010ecc:	d903      	bls.n	8010ed6 <_svfiprintf_r+0x196>
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d0c8      	beq.n	8010e64 <_svfiprintf_r+0x124>
 8010ed2:	9105      	str	r1, [sp, #20]
 8010ed4:	e7c6      	b.n	8010e64 <_svfiprintf_r+0x124>
 8010ed6:	fb05 2101 	mla	r1, r5, r1, r2
 8010eda:	2301      	movs	r3, #1
 8010edc:	4607      	mov	r7, r0
 8010ede:	e7f0      	b.n	8010ec2 <_svfiprintf_r+0x182>
 8010ee0:	ab03      	add	r3, sp, #12
 8010ee2:	9300      	str	r3, [sp, #0]
 8010ee4:	4622      	mov	r2, r4
 8010ee6:	4b11      	ldr	r3, [pc, #68]	; (8010f2c <_svfiprintf_r+0x1ec>)
 8010ee8:	a904      	add	r1, sp, #16
 8010eea:	4640      	mov	r0, r8
 8010eec:	f3af 8000 	nop.w
 8010ef0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010ef4:	4681      	mov	r9, r0
 8010ef6:	d1d6      	bne.n	8010ea6 <_svfiprintf_r+0x166>
 8010ef8:	89a3      	ldrh	r3, [r4, #12]
 8010efa:	065b      	lsls	r3, r3, #25
 8010efc:	f53f af35 	bmi.w	8010d6a <_svfiprintf_r+0x2a>
 8010f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f02:	b01d      	add	sp, #116	; 0x74
 8010f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f08:	ab03      	add	r3, sp, #12
 8010f0a:	9300      	str	r3, [sp, #0]
 8010f0c:	4622      	mov	r2, r4
 8010f0e:	4b07      	ldr	r3, [pc, #28]	; (8010f2c <_svfiprintf_r+0x1ec>)
 8010f10:	a904      	add	r1, sp, #16
 8010f12:	4640      	mov	r0, r8
 8010f14:	f000 f9c2 	bl	801129c <_printf_i>
 8010f18:	e7ea      	b.n	8010ef0 <_svfiprintf_r+0x1b0>
 8010f1a:	bf00      	nop
 8010f1c:	08014b50 	.word	0x08014b50
 8010f20:	08014b56 	.word	0x08014b56
 8010f24:	08014b5a 	.word	0x08014b5a
 8010f28:	00000000 	.word	0x00000000
 8010f2c:	08010c8d 	.word	0x08010c8d

08010f30 <__sfputc_r>:
 8010f30:	6893      	ldr	r3, [r2, #8]
 8010f32:	3b01      	subs	r3, #1
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	b410      	push	{r4}
 8010f38:	6093      	str	r3, [r2, #8]
 8010f3a:	da08      	bge.n	8010f4e <__sfputc_r+0x1e>
 8010f3c:	6994      	ldr	r4, [r2, #24]
 8010f3e:	42a3      	cmp	r3, r4
 8010f40:	db01      	blt.n	8010f46 <__sfputc_r+0x16>
 8010f42:	290a      	cmp	r1, #10
 8010f44:	d103      	bne.n	8010f4e <__sfputc_r+0x1e>
 8010f46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f4a:	f7ff bb51 	b.w	80105f0 <__swbuf_r>
 8010f4e:	6813      	ldr	r3, [r2, #0]
 8010f50:	1c58      	adds	r0, r3, #1
 8010f52:	6010      	str	r0, [r2, #0]
 8010f54:	7019      	strb	r1, [r3, #0]
 8010f56:	4608      	mov	r0, r1
 8010f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f5c:	4770      	bx	lr

08010f5e <__sfputs_r>:
 8010f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f60:	4606      	mov	r6, r0
 8010f62:	460f      	mov	r7, r1
 8010f64:	4614      	mov	r4, r2
 8010f66:	18d5      	adds	r5, r2, r3
 8010f68:	42ac      	cmp	r4, r5
 8010f6a:	d101      	bne.n	8010f70 <__sfputs_r+0x12>
 8010f6c:	2000      	movs	r0, #0
 8010f6e:	e007      	b.n	8010f80 <__sfputs_r+0x22>
 8010f70:	463a      	mov	r2, r7
 8010f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f76:	4630      	mov	r0, r6
 8010f78:	f7ff ffda 	bl	8010f30 <__sfputc_r>
 8010f7c:	1c43      	adds	r3, r0, #1
 8010f7e:	d1f3      	bne.n	8010f68 <__sfputs_r+0xa>
 8010f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f84 <_vfiprintf_r>:
 8010f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f88:	460c      	mov	r4, r1
 8010f8a:	b09d      	sub	sp, #116	; 0x74
 8010f8c:	4617      	mov	r7, r2
 8010f8e:	461d      	mov	r5, r3
 8010f90:	4606      	mov	r6, r0
 8010f92:	b118      	cbz	r0, 8010f9c <_vfiprintf_r+0x18>
 8010f94:	6983      	ldr	r3, [r0, #24]
 8010f96:	b90b      	cbnz	r3, 8010f9c <_vfiprintf_r+0x18>
 8010f98:	f7ff fcda 	bl	8010950 <__sinit>
 8010f9c:	4b7c      	ldr	r3, [pc, #496]	; (8011190 <_vfiprintf_r+0x20c>)
 8010f9e:	429c      	cmp	r4, r3
 8010fa0:	d158      	bne.n	8011054 <_vfiprintf_r+0xd0>
 8010fa2:	6874      	ldr	r4, [r6, #4]
 8010fa4:	89a3      	ldrh	r3, [r4, #12]
 8010fa6:	0718      	lsls	r0, r3, #28
 8010fa8:	d55e      	bpl.n	8011068 <_vfiprintf_r+0xe4>
 8010faa:	6923      	ldr	r3, [r4, #16]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d05b      	beq.n	8011068 <_vfiprintf_r+0xe4>
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8010fb4:	2320      	movs	r3, #32
 8010fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fba:	2330      	movs	r3, #48	; 0x30
 8010fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fc0:	9503      	str	r5, [sp, #12]
 8010fc2:	f04f 0b01 	mov.w	fp, #1
 8010fc6:	46b8      	mov	r8, r7
 8010fc8:	4645      	mov	r5, r8
 8010fca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010fce:	b10b      	cbz	r3, 8010fd4 <_vfiprintf_r+0x50>
 8010fd0:	2b25      	cmp	r3, #37	; 0x25
 8010fd2:	d154      	bne.n	801107e <_vfiprintf_r+0xfa>
 8010fd4:	ebb8 0a07 	subs.w	sl, r8, r7
 8010fd8:	d00b      	beq.n	8010ff2 <_vfiprintf_r+0x6e>
 8010fda:	4653      	mov	r3, sl
 8010fdc:	463a      	mov	r2, r7
 8010fde:	4621      	mov	r1, r4
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	f7ff ffbc 	bl	8010f5e <__sfputs_r>
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	f000 80c2 	beq.w	8011170 <_vfiprintf_r+0x1ec>
 8010fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fee:	4453      	add	r3, sl
 8010ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ff2:	f898 3000 	ldrb.w	r3, [r8]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f000 80ba 	beq.w	8011170 <_vfiprintf_r+0x1ec>
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8011002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011006:	9304      	str	r3, [sp, #16]
 8011008:	9307      	str	r3, [sp, #28]
 801100a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801100e:	931a      	str	r3, [sp, #104]	; 0x68
 8011010:	46a8      	mov	r8, r5
 8011012:	2205      	movs	r2, #5
 8011014:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011018:	485e      	ldr	r0, [pc, #376]	; (8011194 <_vfiprintf_r+0x210>)
 801101a:	f7ef f8f1 	bl	8000200 <memchr>
 801101e:	9b04      	ldr	r3, [sp, #16]
 8011020:	bb78      	cbnz	r0, 8011082 <_vfiprintf_r+0xfe>
 8011022:	06d9      	lsls	r1, r3, #27
 8011024:	bf44      	itt	mi
 8011026:	2220      	movmi	r2, #32
 8011028:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801102c:	071a      	lsls	r2, r3, #28
 801102e:	bf44      	itt	mi
 8011030:	222b      	movmi	r2, #43	; 0x2b
 8011032:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011036:	782a      	ldrb	r2, [r5, #0]
 8011038:	2a2a      	cmp	r2, #42	; 0x2a
 801103a:	d02a      	beq.n	8011092 <_vfiprintf_r+0x10e>
 801103c:	9a07      	ldr	r2, [sp, #28]
 801103e:	46a8      	mov	r8, r5
 8011040:	2000      	movs	r0, #0
 8011042:	250a      	movs	r5, #10
 8011044:	4641      	mov	r1, r8
 8011046:	f811 3b01 	ldrb.w	r3, [r1], #1
 801104a:	3b30      	subs	r3, #48	; 0x30
 801104c:	2b09      	cmp	r3, #9
 801104e:	d969      	bls.n	8011124 <_vfiprintf_r+0x1a0>
 8011050:	b360      	cbz	r0, 80110ac <_vfiprintf_r+0x128>
 8011052:	e024      	b.n	801109e <_vfiprintf_r+0x11a>
 8011054:	4b50      	ldr	r3, [pc, #320]	; (8011198 <_vfiprintf_r+0x214>)
 8011056:	429c      	cmp	r4, r3
 8011058:	d101      	bne.n	801105e <_vfiprintf_r+0xda>
 801105a:	68b4      	ldr	r4, [r6, #8]
 801105c:	e7a2      	b.n	8010fa4 <_vfiprintf_r+0x20>
 801105e:	4b4f      	ldr	r3, [pc, #316]	; (801119c <_vfiprintf_r+0x218>)
 8011060:	429c      	cmp	r4, r3
 8011062:	bf08      	it	eq
 8011064:	68f4      	ldreq	r4, [r6, #12]
 8011066:	e79d      	b.n	8010fa4 <_vfiprintf_r+0x20>
 8011068:	4621      	mov	r1, r4
 801106a:	4630      	mov	r0, r6
 801106c:	f7ff fb12 	bl	8010694 <__swsetup_r>
 8011070:	2800      	cmp	r0, #0
 8011072:	d09d      	beq.n	8010fb0 <_vfiprintf_r+0x2c>
 8011074:	f04f 30ff 	mov.w	r0, #4294967295
 8011078:	b01d      	add	sp, #116	; 0x74
 801107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801107e:	46a8      	mov	r8, r5
 8011080:	e7a2      	b.n	8010fc8 <_vfiprintf_r+0x44>
 8011082:	4a44      	ldr	r2, [pc, #272]	; (8011194 <_vfiprintf_r+0x210>)
 8011084:	1a80      	subs	r0, r0, r2
 8011086:	fa0b f000 	lsl.w	r0, fp, r0
 801108a:	4318      	orrs	r0, r3
 801108c:	9004      	str	r0, [sp, #16]
 801108e:	4645      	mov	r5, r8
 8011090:	e7be      	b.n	8011010 <_vfiprintf_r+0x8c>
 8011092:	9a03      	ldr	r2, [sp, #12]
 8011094:	1d11      	adds	r1, r2, #4
 8011096:	6812      	ldr	r2, [r2, #0]
 8011098:	9103      	str	r1, [sp, #12]
 801109a:	2a00      	cmp	r2, #0
 801109c:	db01      	blt.n	80110a2 <_vfiprintf_r+0x11e>
 801109e:	9207      	str	r2, [sp, #28]
 80110a0:	e004      	b.n	80110ac <_vfiprintf_r+0x128>
 80110a2:	4252      	negs	r2, r2
 80110a4:	f043 0302 	orr.w	r3, r3, #2
 80110a8:	9207      	str	r2, [sp, #28]
 80110aa:	9304      	str	r3, [sp, #16]
 80110ac:	f898 3000 	ldrb.w	r3, [r8]
 80110b0:	2b2e      	cmp	r3, #46	; 0x2e
 80110b2:	d10e      	bne.n	80110d2 <_vfiprintf_r+0x14e>
 80110b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80110b8:	2b2a      	cmp	r3, #42	; 0x2a
 80110ba:	d138      	bne.n	801112e <_vfiprintf_r+0x1aa>
 80110bc:	9b03      	ldr	r3, [sp, #12]
 80110be:	1d1a      	adds	r2, r3, #4
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	9203      	str	r2, [sp, #12]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	bfb8      	it	lt
 80110c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80110cc:	f108 0802 	add.w	r8, r8, #2
 80110d0:	9305      	str	r3, [sp, #20]
 80110d2:	4d33      	ldr	r5, [pc, #204]	; (80111a0 <_vfiprintf_r+0x21c>)
 80110d4:	f898 1000 	ldrb.w	r1, [r8]
 80110d8:	2203      	movs	r2, #3
 80110da:	4628      	mov	r0, r5
 80110dc:	f7ef f890 	bl	8000200 <memchr>
 80110e0:	b140      	cbz	r0, 80110f4 <_vfiprintf_r+0x170>
 80110e2:	2340      	movs	r3, #64	; 0x40
 80110e4:	1b40      	subs	r0, r0, r5
 80110e6:	fa03 f000 	lsl.w	r0, r3, r0
 80110ea:	9b04      	ldr	r3, [sp, #16]
 80110ec:	4303      	orrs	r3, r0
 80110ee:	f108 0801 	add.w	r8, r8, #1
 80110f2:	9304      	str	r3, [sp, #16]
 80110f4:	f898 1000 	ldrb.w	r1, [r8]
 80110f8:	482a      	ldr	r0, [pc, #168]	; (80111a4 <_vfiprintf_r+0x220>)
 80110fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110fe:	2206      	movs	r2, #6
 8011100:	f108 0701 	add.w	r7, r8, #1
 8011104:	f7ef f87c 	bl	8000200 <memchr>
 8011108:	2800      	cmp	r0, #0
 801110a:	d037      	beq.n	801117c <_vfiprintf_r+0x1f8>
 801110c:	4b26      	ldr	r3, [pc, #152]	; (80111a8 <_vfiprintf_r+0x224>)
 801110e:	bb1b      	cbnz	r3, 8011158 <_vfiprintf_r+0x1d4>
 8011110:	9b03      	ldr	r3, [sp, #12]
 8011112:	3307      	adds	r3, #7
 8011114:	f023 0307 	bic.w	r3, r3, #7
 8011118:	3308      	adds	r3, #8
 801111a:	9303      	str	r3, [sp, #12]
 801111c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801111e:	444b      	add	r3, r9
 8011120:	9309      	str	r3, [sp, #36]	; 0x24
 8011122:	e750      	b.n	8010fc6 <_vfiprintf_r+0x42>
 8011124:	fb05 3202 	mla	r2, r5, r2, r3
 8011128:	2001      	movs	r0, #1
 801112a:	4688      	mov	r8, r1
 801112c:	e78a      	b.n	8011044 <_vfiprintf_r+0xc0>
 801112e:	2300      	movs	r3, #0
 8011130:	f108 0801 	add.w	r8, r8, #1
 8011134:	9305      	str	r3, [sp, #20]
 8011136:	4619      	mov	r1, r3
 8011138:	250a      	movs	r5, #10
 801113a:	4640      	mov	r0, r8
 801113c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011140:	3a30      	subs	r2, #48	; 0x30
 8011142:	2a09      	cmp	r2, #9
 8011144:	d903      	bls.n	801114e <_vfiprintf_r+0x1ca>
 8011146:	2b00      	cmp	r3, #0
 8011148:	d0c3      	beq.n	80110d2 <_vfiprintf_r+0x14e>
 801114a:	9105      	str	r1, [sp, #20]
 801114c:	e7c1      	b.n	80110d2 <_vfiprintf_r+0x14e>
 801114e:	fb05 2101 	mla	r1, r5, r1, r2
 8011152:	2301      	movs	r3, #1
 8011154:	4680      	mov	r8, r0
 8011156:	e7f0      	b.n	801113a <_vfiprintf_r+0x1b6>
 8011158:	ab03      	add	r3, sp, #12
 801115a:	9300      	str	r3, [sp, #0]
 801115c:	4622      	mov	r2, r4
 801115e:	4b13      	ldr	r3, [pc, #76]	; (80111ac <_vfiprintf_r+0x228>)
 8011160:	a904      	add	r1, sp, #16
 8011162:	4630      	mov	r0, r6
 8011164:	f3af 8000 	nop.w
 8011168:	f1b0 3fff 	cmp.w	r0, #4294967295
 801116c:	4681      	mov	r9, r0
 801116e:	d1d5      	bne.n	801111c <_vfiprintf_r+0x198>
 8011170:	89a3      	ldrh	r3, [r4, #12]
 8011172:	065b      	lsls	r3, r3, #25
 8011174:	f53f af7e 	bmi.w	8011074 <_vfiprintf_r+0xf0>
 8011178:	9809      	ldr	r0, [sp, #36]	; 0x24
 801117a:	e77d      	b.n	8011078 <_vfiprintf_r+0xf4>
 801117c:	ab03      	add	r3, sp, #12
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	4622      	mov	r2, r4
 8011182:	4b0a      	ldr	r3, [pc, #40]	; (80111ac <_vfiprintf_r+0x228>)
 8011184:	a904      	add	r1, sp, #16
 8011186:	4630      	mov	r0, r6
 8011188:	f000 f888 	bl	801129c <_printf_i>
 801118c:	e7ec      	b.n	8011168 <_vfiprintf_r+0x1e4>
 801118e:	bf00      	nop
 8011190:	08014b10 	.word	0x08014b10
 8011194:	08014b50 	.word	0x08014b50
 8011198:	08014b30 	.word	0x08014b30
 801119c:	08014af0 	.word	0x08014af0
 80111a0:	08014b56 	.word	0x08014b56
 80111a4:	08014b5a 	.word	0x08014b5a
 80111a8:	00000000 	.word	0x00000000
 80111ac:	08010f5f 	.word	0x08010f5f

080111b0 <_printf_common>:
 80111b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111b4:	4691      	mov	r9, r2
 80111b6:	461f      	mov	r7, r3
 80111b8:	688a      	ldr	r2, [r1, #8]
 80111ba:	690b      	ldr	r3, [r1, #16]
 80111bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80111c0:	4293      	cmp	r3, r2
 80111c2:	bfb8      	it	lt
 80111c4:	4613      	movlt	r3, r2
 80111c6:	f8c9 3000 	str.w	r3, [r9]
 80111ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80111ce:	4606      	mov	r6, r0
 80111d0:	460c      	mov	r4, r1
 80111d2:	b112      	cbz	r2, 80111da <_printf_common+0x2a>
 80111d4:	3301      	adds	r3, #1
 80111d6:	f8c9 3000 	str.w	r3, [r9]
 80111da:	6823      	ldr	r3, [r4, #0]
 80111dc:	0699      	lsls	r1, r3, #26
 80111de:	bf42      	ittt	mi
 80111e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80111e4:	3302      	addmi	r3, #2
 80111e6:	f8c9 3000 	strmi.w	r3, [r9]
 80111ea:	6825      	ldr	r5, [r4, #0]
 80111ec:	f015 0506 	ands.w	r5, r5, #6
 80111f0:	d107      	bne.n	8011202 <_printf_common+0x52>
 80111f2:	f104 0a19 	add.w	sl, r4, #25
 80111f6:	68e3      	ldr	r3, [r4, #12]
 80111f8:	f8d9 2000 	ldr.w	r2, [r9]
 80111fc:	1a9b      	subs	r3, r3, r2
 80111fe:	42ab      	cmp	r3, r5
 8011200:	dc28      	bgt.n	8011254 <_printf_common+0xa4>
 8011202:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011206:	6822      	ldr	r2, [r4, #0]
 8011208:	3300      	adds	r3, #0
 801120a:	bf18      	it	ne
 801120c:	2301      	movne	r3, #1
 801120e:	0692      	lsls	r2, r2, #26
 8011210:	d42d      	bmi.n	801126e <_printf_common+0xbe>
 8011212:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011216:	4639      	mov	r1, r7
 8011218:	4630      	mov	r0, r6
 801121a:	47c0      	blx	r8
 801121c:	3001      	adds	r0, #1
 801121e:	d020      	beq.n	8011262 <_printf_common+0xb2>
 8011220:	6823      	ldr	r3, [r4, #0]
 8011222:	68e5      	ldr	r5, [r4, #12]
 8011224:	f8d9 2000 	ldr.w	r2, [r9]
 8011228:	f003 0306 	and.w	r3, r3, #6
 801122c:	2b04      	cmp	r3, #4
 801122e:	bf08      	it	eq
 8011230:	1aad      	subeq	r5, r5, r2
 8011232:	68a3      	ldr	r3, [r4, #8]
 8011234:	6922      	ldr	r2, [r4, #16]
 8011236:	bf0c      	ite	eq
 8011238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801123c:	2500      	movne	r5, #0
 801123e:	4293      	cmp	r3, r2
 8011240:	bfc4      	itt	gt
 8011242:	1a9b      	subgt	r3, r3, r2
 8011244:	18ed      	addgt	r5, r5, r3
 8011246:	f04f 0900 	mov.w	r9, #0
 801124a:	341a      	adds	r4, #26
 801124c:	454d      	cmp	r5, r9
 801124e:	d11a      	bne.n	8011286 <_printf_common+0xd6>
 8011250:	2000      	movs	r0, #0
 8011252:	e008      	b.n	8011266 <_printf_common+0xb6>
 8011254:	2301      	movs	r3, #1
 8011256:	4652      	mov	r2, sl
 8011258:	4639      	mov	r1, r7
 801125a:	4630      	mov	r0, r6
 801125c:	47c0      	blx	r8
 801125e:	3001      	adds	r0, #1
 8011260:	d103      	bne.n	801126a <_printf_common+0xba>
 8011262:	f04f 30ff 	mov.w	r0, #4294967295
 8011266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801126a:	3501      	adds	r5, #1
 801126c:	e7c3      	b.n	80111f6 <_printf_common+0x46>
 801126e:	18e1      	adds	r1, r4, r3
 8011270:	1c5a      	adds	r2, r3, #1
 8011272:	2030      	movs	r0, #48	; 0x30
 8011274:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011278:	4422      	add	r2, r4
 801127a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801127e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011282:	3302      	adds	r3, #2
 8011284:	e7c5      	b.n	8011212 <_printf_common+0x62>
 8011286:	2301      	movs	r3, #1
 8011288:	4622      	mov	r2, r4
 801128a:	4639      	mov	r1, r7
 801128c:	4630      	mov	r0, r6
 801128e:	47c0      	blx	r8
 8011290:	3001      	adds	r0, #1
 8011292:	d0e6      	beq.n	8011262 <_printf_common+0xb2>
 8011294:	f109 0901 	add.w	r9, r9, #1
 8011298:	e7d8      	b.n	801124c <_printf_common+0x9c>
	...

0801129c <_printf_i>:
 801129c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80112a4:	460c      	mov	r4, r1
 80112a6:	7e09      	ldrb	r1, [r1, #24]
 80112a8:	b085      	sub	sp, #20
 80112aa:	296e      	cmp	r1, #110	; 0x6e
 80112ac:	4617      	mov	r7, r2
 80112ae:	4606      	mov	r6, r0
 80112b0:	4698      	mov	r8, r3
 80112b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80112b4:	f000 80b3 	beq.w	801141e <_printf_i+0x182>
 80112b8:	d822      	bhi.n	8011300 <_printf_i+0x64>
 80112ba:	2963      	cmp	r1, #99	; 0x63
 80112bc:	d036      	beq.n	801132c <_printf_i+0x90>
 80112be:	d80a      	bhi.n	80112d6 <_printf_i+0x3a>
 80112c0:	2900      	cmp	r1, #0
 80112c2:	f000 80b9 	beq.w	8011438 <_printf_i+0x19c>
 80112c6:	2958      	cmp	r1, #88	; 0x58
 80112c8:	f000 8083 	beq.w	80113d2 <_printf_i+0x136>
 80112cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80112d4:	e032      	b.n	801133c <_printf_i+0xa0>
 80112d6:	2964      	cmp	r1, #100	; 0x64
 80112d8:	d001      	beq.n	80112de <_printf_i+0x42>
 80112da:	2969      	cmp	r1, #105	; 0x69
 80112dc:	d1f6      	bne.n	80112cc <_printf_i+0x30>
 80112de:	6820      	ldr	r0, [r4, #0]
 80112e0:	6813      	ldr	r3, [r2, #0]
 80112e2:	0605      	lsls	r5, r0, #24
 80112e4:	f103 0104 	add.w	r1, r3, #4
 80112e8:	d52a      	bpl.n	8011340 <_printf_i+0xa4>
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	6011      	str	r1, [r2, #0]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	da03      	bge.n	80112fa <_printf_i+0x5e>
 80112f2:	222d      	movs	r2, #45	; 0x2d
 80112f4:	425b      	negs	r3, r3
 80112f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80112fa:	486f      	ldr	r0, [pc, #444]	; (80114b8 <_printf_i+0x21c>)
 80112fc:	220a      	movs	r2, #10
 80112fe:	e039      	b.n	8011374 <_printf_i+0xd8>
 8011300:	2973      	cmp	r1, #115	; 0x73
 8011302:	f000 809d 	beq.w	8011440 <_printf_i+0x1a4>
 8011306:	d808      	bhi.n	801131a <_printf_i+0x7e>
 8011308:	296f      	cmp	r1, #111	; 0x6f
 801130a:	d020      	beq.n	801134e <_printf_i+0xb2>
 801130c:	2970      	cmp	r1, #112	; 0x70
 801130e:	d1dd      	bne.n	80112cc <_printf_i+0x30>
 8011310:	6823      	ldr	r3, [r4, #0]
 8011312:	f043 0320 	orr.w	r3, r3, #32
 8011316:	6023      	str	r3, [r4, #0]
 8011318:	e003      	b.n	8011322 <_printf_i+0x86>
 801131a:	2975      	cmp	r1, #117	; 0x75
 801131c:	d017      	beq.n	801134e <_printf_i+0xb2>
 801131e:	2978      	cmp	r1, #120	; 0x78
 8011320:	d1d4      	bne.n	80112cc <_printf_i+0x30>
 8011322:	2378      	movs	r3, #120	; 0x78
 8011324:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011328:	4864      	ldr	r0, [pc, #400]	; (80114bc <_printf_i+0x220>)
 801132a:	e055      	b.n	80113d8 <_printf_i+0x13c>
 801132c:	6813      	ldr	r3, [r2, #0]
 801132e:	1d19      	adds	r1, r3, #4
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	6011      	str	r1, [r2, #0]
 8011334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801133c:	2301      	movs	r3, #1
 801133e:	e08c      	b.n	801145a <_printf_i+0x1be>
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	6011      	str	r1, [r2, #0]
 8011344:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011348:	bf18      	it	ne
 801134a:	b21b      	sxthne	r3, r3
 801134c:	e7cf      	b.n	80112ee <_printf_i+0x52>
 801134e:	6813      	ldr	r3, [r2, #0]
 8011350:	6825      	ldr	r5, [r4, #0]
 8011352:	1d18      	adds	r0, r3, #4
 8011354:	6010      	str	r0, [r2, #0]
 8011356:	0628      	lsls	r0, r5, #24
 8011358:	d501      	bpl.n	801135e <_printf_i+0xc2>
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	e002      	b.n	8011364 <_printf_i+0xc8>
 801135e:	0668      	lsls	r0, r5, #25
 8011360:	d5fb      	bpl.n	801135a <_printf_i+0xbe>
 8011362:	881b      	ldrh	r3, [r3, #0]
 8011364:	4854      	ldr	r0, [pc, #336]	; (80114b8 <_printf_i+0x21c>)
 8011366:	296f      	cmp	r1, #111	; 0x6f
 8011368:	bf14      	ite	ne
 801136a:	220a      	movne	r2, #10
 801136c:	2208      	moveq	r2, #8
 801136e:	2100      	movs	r1, #0
 8011370:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011374:	6865      	ldr	r5, [r4, #4]
 8011376:	60a5      	str	r5, [r4, #8]
 8011378:	2d00      	cmp	r5, #0
 801137a:	f2c0 8095 	blt.w	80114a8 <_printf_i+0x20c>
 801137e:	6821      	ldr	r1, [r4, #0]
 8011380:	f021 0104 	bic.w	r1, r1, #4
 8011384:	6021      	str	r1, [r4, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d13d      	bne.n	8011406 <_printf_i+0x16a>
 801138a:	2d00      	cmp	r5, #0
 801138c:	f040 808e 	bne.w	80114ac <_printf_i+0x210>
 8011390:	4665      	mov	r5, ip
 8011392:	2a08      	cmp	r2, #8
 8011394:	d10b      	bne.n	80113ae <_printf_i+0x112>
 8011396:	6823      	ldr	r3, [r4, #0]
 8011398:	07db      	lsls	r3, r3, #31
 801139a:	d508      	bpl.n	80113ae <_printf_i+0x112>
 801139c:	6923      	ldr	r3, [r4, #16]
 801139e:	6862      	ldr	r2, [r4, #4]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	bfde      	ittt	le
 80113a4:	2330      	movle	r3, #48	; 0x30
 80113a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80113aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80113ae:	ebac 0305 	sub.w	r3, ip, r5
 80113b2:	6123      	str	r3, [r4, #16]
 80113b4:	f8cd 8000 	str.w	r8, [sp]
 80113b8:	463b      	mov	r3, r7
 80113ba:	aa03      	add	r2, sp, #12
 80113bc:	4621      	mov	r1, r4
 80113be:	4630      	mov	r0, r6
 80113c0:	f7ff fef6 	bl	80111b0 <_printf_common>
 80113c4:	3001      	adds	r0, #1
 80113c6:	d14d      	bne.n	8011464 <_printf_i+0x1c8>
 80113c8:	f04f 30ff 	mov.w	r0, #4294967295
 80113cc:	b005      	add	sp, #20
 80113ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113d2:	4839      	ldr	r0, [pc, #228]	; (80114b8 <_printf_i+0x21c>)
 80113d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80113d8:	6813      	ldr	r3, [r2, #0]
 80113da:	6821      	ldr	r1, [r4, #0]
 80113dc:	1d1d      	adds	r5, r3, #4
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	6015      	str	r5, [r2, #0]
 80113e2:	060a      	lsls	r2, r1, #24
 80113e4:	d50b      	bpl.n	80113fe <_printf_i+0x162>
 80113e6:	07ca      	lsls	r2, r1, #31
 80113e8:	bf44      	itt	mi
 80113ea:	f041 0120 	orrmi.w	r1, r1, #32
 80113ee:	6021      	strmi	r1, [r4, #0]
 80113f0:	b91b      	cbnz	r3, 80113fa <_printf_i+0x15e>
 80113f2:	6822      	ldr	r2, [r4, #0]
 80113f4:	f022 0220 	bic.w	r2, r2, #32
 80113f8:	6022      	str	r2, [r4, #0]
 80113fa:	2210      	movs	r2, #16
 80113fc:	e7b7      	b.n	801136e <_printf_i+0xd2>
 80113fe:	064d      	lsls	r5, r1, #25
 8011400:	bf48      	it	mi
 8011402:	b29b      	uxthmi	r3, r3
 8011404:	e7ef      	b.n	80113e6 <_printf_i+0x14a>
 8011406:	4665      	mov	r5, ip
 8011408:	fbb3 f1f2 	udiv	r1, r3, r2
 801140c:	fb02 3311 	mls	r3, r2, r1, r3
 8011410:	5cc3      	ldrb	r3, [r0, r3]
 8011412:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011416:	460b      	mov	r3, r1
 8011418:	2900      	cmp	r1, #0
 801141a:	d1f5      	bne.n	8011408 <_printf_i+0x16c>
 801141c:	e7b9      	b.n	8011392 <_printf_i+0xf6>
 801141e:	6813      	ldr	r3, [r2, #0]
 8011420:	6825      	ldr	r5, [r4, #0]
 8011422:	6961      	ldr	r1, [r4, #20]
 8011424:	1d18      	adds	r0, r3, #4
 8011426:	6010      	str	r0, [r2, #0]
 8011428:	0628      	lsls	r0, r5, #24
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	d501      	bpl.n	8011432 <_printf_i+0x196>
 801142e:	6019      	str	r1, [r3, #0]
 8011430:	e002      	b.n	8011438 <_printf_i+0x19c>
 8011432:	066a      	lsls	r2, r5, #25
 8011434:	d5fb      	bpl.n	801142e <_printf_i+0x192>
 8011436:	8019      	strh	r1, [r3, #0]
 8011438:	2300      	movs	r3, #0
 801143a:	6123      	str	r3, [r4, #16]
 801143c:	4665      	mov	r5, ip
 801143e:	e7b9      	b.n	80113b4 <_printf_i+0x118>
 8011440:	6813      	ldr	r3, [r2, #0]
 8011442:	1d19      	adds	r1, r3, #4
 8011444:	6011      	str	r1, [r2, #0]
 8011446:	681d      	ldr	r5, [r3, #0]
 8011448:	6862      	ldr	r2, [r4, #4]
 801144a:	2100      	movs	r1, #0
 801144c:	4628      	mov	r0, r5
 801144e:	f7ee fed7 	bl	8000200 <memchr>
 8011452:	b108      	cbz	r0, 8011458 <_printf_i+0x1bc>
 8011454:	1b40      	subs	r0, r0, r5
 8011456:	6060      	str	r0, [r4, #4]
 8011458:	6863      	ldr	r3, [r4, #4]
 801145a:	6123      	str	r3, [r4, #16]
 801145c:	2300      	movs	r3, #0
 801145e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011462:	e7a7      	b.n	80113b4 <_printf_i+0x118>
 8011464:	6923      	ldr	r3, [r4, #16]
 8011466:	462a      	mov	r2, r5
 8011468:	4639      	mov	r1, r7
 801146a:	4630      	mov	r0, r6
 801146c:	47c0      	blx	r8
 801146e:	3001      	adds	r0, #1
 8011470:	d0aa      	beq.n	80113c8 <_printf_i+0x12c>
 8011472:	6823      	ldr	r3, [r4, #0]
 8011474:	079b      	lsls	r3, r3, #30
 8011476:	d413      	bmi.n	80114a0 <_printf_i+0x204>
 8011478:	68e0      	ldr	r0, [r4, #12]
 801147a:	9b03      	ldr	r3, [sp, #12]
 801147c:	4298      	cmp	r0, r3
 801147e:	bfb8      	it	lt
 8011480:	4618      	movlt	r0, r3
 8011482:	e7a3      	b.n	80113cc <_printf_i+0x130>
 8011484:	2301      	movs	r3, #1
 8011486:	464a      	mov	r2, r9
 8011488:	4639      	mov	r1, r7
 801148a:	4630      	mov	r0, r6
 801148c:	47c0      	blx	r8
 801148e:	3001      	adds	r0, #1
 8011490:	d09a      	beq.n	80113c8 <_printf_i+0x12c>
 8011492:	3501      	adds	r5, #1
 8011494:	68e3      	ldr	r3, [r4, #12]
 8011496:	9a03      	ldr	r2, [sp, #12]
 8011498:	1a9b      	subs	r3, r3, r2
 801149a:	42ab      	cmp	r3, r5
 801149c:	dcf2      	bgt.n	8011484 <_printf_i+0x1e8>
 801149e:	e7eb      	b.n	8011478 <_printf_i+0x1dc>
 80114a0:	2500      	movs	r5, #0
 80114a2:	f104 0919 	add.w	r9, r4, #25
 80114a6:	e7f5      	b.n	8011494 <_printf_i+0x1f8>
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d1ac      	bne.n	8011406 <_printf_i+0x16a>
 80114ac:	7803      	ldrb	r3, [r0, #0]
 80114ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80114b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114b6:	e76c      	b.n	8011392 <_printf_i+0xf6>
 80114b8:	08014b61 	.word	0x08014b61
 80114bc:	08014b72 	.word	0x08014b72

080114c0 <_sbrk_r>:
 80114c0:	b538      	push	{r3, r4, r5, lr}
 80114c2:	4c06      	ldr	r4, [pc, #24]	; (80114dc <_sbrk_r+0x1c>)
 80114c4:	2300      	movs	r3, #0
 80114c6:	4605      	mov	r5, r0
 80114c8:	4608      	mov	r0, r1
 80114ca:	6023      	str	r3, [r4, #0]
 80114cc:	f7ef fc6a 	bl	8000da4 <_sbrk>
 80114d0:	1c43      	adds	r3, r0, #1
 80114d2:	d102      	bne.n	80114da <_sbrk_r+0x1a>
 80114d4:	6823      	ldr	r3, [r4, #0]
 80114d6:	b103      	cbz	r3, 80114da <_sbrk_r+0x1a>
 80114d8:	602b      	str	r3, [r5, #0]
 80114da:	bd38      	pop	{r3, r4, r5, pc}
 80114dc:	20006968 	.word	0x20006968

080114e0 <__sread>:
 80114e0:	b510      	push	{r4, lr}
 80114e2:	460c      	mov	r4, r1
 80114e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114e8:	f000 f8bc 	bl	8011664 <_read_r>
 80114ec:	2800      	cmp	r0, #0
 80114ee:	bfab      	itete	ge
 80114f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80114f2:	89a3      	ldrhlt	r3, [r4, #12]
 80114f4:	181b      	addge	r3, r3, r0
 80114f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80114fa:	bfac      	ite	ge
 80114fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80114fe:	81a3      	strhlt	r3, [r4, #12]
 8011500:	bd10      	pop	{r4, pc}

08011502 <__swrite>:
 8011502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011506:	461f      	mov	r7, r3
 8011508:	898b      	ldrh	r3, [r1, #12]
 801150a:	05db      	lsls	r3, r3, #23
 801150c:	4605      	mov	r5, r0
 801150e:	460c      	mov	r4, r1
 8011510:	4616      	mov	r6, r2
 8011512:	d505      	bpl.n	8011520 <__swrite+0x1e>
 8011514:	2302      	movs	r3, #2
 8011516:	2200      	movs	r2, #0
 8011518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801151c:	f000 f868 	bl	80115f0 <_lseek_r>
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801152a:	81a3      	strh	r3, [r4, #12]
 801152c:	4632      	mov	r2, r6
 801152e:	463b      	mov	r3, r7
 8011530:	4628      	mov	r0, r5
 8011532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011536:	f000 b817 	b.w	8011568 <_write_r>

0801153a <__sseek>:
 801153a:	b510      	push	{r4, lr}
 801153c:	460c      	mov	r4, r1
 801153e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011542:	f000 f855 	bl	80115f0 <_lseek_r>
 8011546:	1c43      	adds	r3, r0, #1
 8011548:	89a3      	ldrh	r3, [r4, #12]
 801154a:	bf15      	itete	ne
 801154c:	6560      	strne	r0, [r4, #84]	; 0x54
 801154e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011556:	81a3      	strheq	r3, [r4, #12]
 8011558:	bf18      	it	ne
 801155a:	81a3      	strhne	r3, [r4, #12]
 801155c:	bd10      	pop	{r4, pc}

0801155e <__sclose>:
 801155e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011562:	f000 b813 	b.w	801158c <_close_r>
	...

08011568 <_write_r>:
 8011568:	b538      	push	{r3, r4, r5, lr}
 801156a:	4c07      	ldr	r4, [pc, #28]	; (8011588 <_write_r+0x20>)
 801156c:	4605      	mov	r5, r0
 801156e:	4608      	mov	r0, r1
 8011570:	4611      	mov	r1, r2
 8011572:	2200      	movs	r2, #0
 8011574:	6022      	str	r2, [r4, #0]
 8011576:	461a      	mov	r2, r3
 8011578:	f7ef fbc3 	bl	8000d02 <_write>
 801157c:	1c43      	adds	r3, r0, #1
 801157e:	d102      	bne.n	8011586 <_write_r+0x1e>
 8011580:	6823      	ldr	r3, [r4, #0]
 8011582:	b103      	cbz	r3, 8011586 <_write_r+0x1e>
 8011584:	602b      	str	r3, [r5, #0]
 8011586:	bd38      	pop	{r3, r4, r5, pc}
 8011588:	20006968 	.word	0x20006968

0801158c <_close_r>:
 801158c:	b538      	push	{r3, r4, r5, lr}
 801158e:	4c06      	ldr	r4, [pc, #24]	; (80115a8 <_close_r+0x1c>)
 8011590:	2300      	movs	r3, #0
 8011592:	4605      	mov	r5, r0
 8011594:	4608      	mov	r0, r1
 8011596:	6023      	str	r3, [r4, #0]
 8011598:	f7ef fbcf 	bl	8000d3a <_close>
 801159c:	1c43      	adds	r3, r0, #1
 801159e:	d102      	bne.n	80115a6 <_close_r+0x1a>
 80115a0:	6823      	ldr	r3, [r4, #0]
 80115a2:	b103      	cbz	r3, 80115a6 <_close_r+0x1a>
 80115a4:	602b      	str	r3, [r5, #0]
 80115a6:	bd38      	pop	{r3, r4, r5, pc}
 80115a8:	20006968 	.word	0x20006968

080115ac <_fstat_r>:
 80115ac:	b538      	push	{r3, r4, r5, lr}
 80115ae:	4c07      	ldr	r4, [pc, #28]	; (80115cc <_fstat_r+0x20>)
 80115b0:	2300      	movs	r3, #0
 80115b2:	4605      	mov	r5, r0
 80115b4:	4608      	mov	r0, r1
 80115b6:	4611      	mov	r1, r2
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	f7ef fbca 	bl	8000d52 <_fstat>
 80115be:	1c43      	adds	r3, r0, #1
 80115c0:	d102      	bne.n	80115c8 <_fstat_r+0x1c>
 80115c2:	6823      	ldr	r3, [r4, #0]
 80115c4:	b103      	cbz	r3, 80115c8 <_fstat_r+0x1c>
 80115c6:	602b      	str	r3, [r5, #0]
 80115c8:	bd38      	pop	{r3, r4, r5, pc}
 80115ca:	bf00      	nop
 80115cc:	20006968 	.word	0x20006968

080115d0 <_isatty_r>:
 80115d0:	b538      	push	{r3, r4, r5, lr}
 80115d2:	4c06      	ldr	r4, [pc, #24]	; (80115ec <_isatty_r+0x1c>)
 80115d4:	2300      	movs	r3, #0
 80115d6:	4605      	mov	r5, r0
 80115d8:	4608      	mov	r0, r1
 80115da:	6023      	str	r3, [r4, #0]
 80115dc:	f7ef fbc9 	bl	8000d72 <_isatty>
 80115e0:	1c43      	adds	r3, r0, #1
 80115e2:	d102      	bne.n	80115ea <_isatty_r+0x1a>
 80115e4:	6823      	ldr	r3, [r4, #0]
 80115e6:	b103      	cbz	r3, 80115ea <_isatty_r+0x1a>
 80115e8:	602b      	str	r3, [r5, #0]
 80115ea:	bd38      	pop	{r3, r4, r5, pc}
 80115ec:	20006968 	.word	0x20006968

080115f0 <_lseek_r>:
 80115f0:	b538      	push	{r3, r4, r5, lr}
 80115f2:	4c07      	ldr	r4, [pc, #28]	; (8011610 <_lseek_r+0x20>)
 80115f4:	4605      	mov	r5, r0
 80115f6:	4608      	mov	r0, r1
 80115f8:	4611      	mov	r1, r2
 80115fa:	2200      	movs	r2, #0
 80115fc:	6022      	str	r2, [r4, #0]
 80115fe:	461a      	mov	r2, r3
 8011600:	f7ef fbc2 	bl	8000d88 <_lseek>
 8011604:	1c43      	adds	r3, r0, #1
 8011606:	d102      	bne.n	801160e <_lseek_r+0x1e>
 8011608:	6823      	ldr	r3, [r4, #0]
 801160a:	b103      	cbz	r3, 801160e <_lseek_r+0x1e>
 801160c:	602b      	str	r3, [r5, #0]
 801160e:	bd38      	pop	{r3, r4, r5, pc}
 8011610:	20006968 	.word	0x20006968

08011614 <__malloc_lock>:
 8011614:	4770      	bx	lr

08011616 <__malloc_unlock>:
 8011616:	4770      	bx	lr

08011618 <_realloc_r>:
 8011618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801161a:	4607      	mov	r7, r0
 801161c:	4614      	mov	r4, r2
 801161e:	460e      	mov	r6, r1
 8011620:	b921      	cbnz	r1, 801162c <_realloc_r+0x14>
 8011622:	4611      	mov	r1, r2
 8011624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011628:	f7ff bad6 	b.w	8010bd8 <_malloc_r>
 801162c:	b922      	cbnz	r2, 8011638 <_realloc_r+0x20>
 801162e:	f7ff fa85 	bl	8010b3c <_free_r>
 8011632:	4625      	mov	r5, r4
 8011634:	4628      	mov	r0, r5
 8011636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011638:	f000 f826 	bl	8011688 <_malloc_usable_size_r>
 801163c:	42a0      	cmp	r0, r4
 801163e:	d20f      	bcs.n	8011660 <_realloc_r+0x48>
 8011640:	4621      	mov	r1, r4
 8011642:	4638      	mov	r0, r7
 8011644:	f7ff fac8 	bl	8010bd8 <_malloc_r>
 8011648:	4605      	mov	r5, r0
 801164a:	2800      	cmp	r0, #0
 801164c:	d0f2      	beq.n	8011634 <_realloc_r+0x1c>
 801164e:	4631      	mov	r1, r6
 8011650:	4622      	mov	r2, r4
 8011652:	f7fe febe 	bl	80103d2 <memcpy>
 8011656:	4631      	mov	r1, r6
 8011658:	4638      	mov	r0, r7
 801165a:	f7ff fa6f 	bl	8010b3c <_free_r>
 801165e:	e7e9      	b.n	8011634 <_realloc_r+0x1c>
 8011660:	4635      	mov	r5, r6
 8011662:	e7e7      	b.n	8011634 <_realloc_r+0x1c>

08011664 <_read_r>:
 8011664:	b538      	push	{r3, r4, r5, lr}
 8011666:	4c07      	ldr	r4, [pc, #28]	; (8011684 <_read_r+0x20>)
 8011668:	4605      	mov	r5, r0
 801166a:	4608      	mov	r0, r1
 801166c:	4611      	mov	r1, r2
 801166e:	2200      	movs	r2, #0
 8011670:	6022      	str	r2, [r4, #0]
 8011672:	461a      	mov	r2, r3
 8011674:	f7ef fb28 	bl	8000cc8 <_read>
 8011678:	1c43      	adds	r3, r0, #1
 801167a:	d102      	bne.n	8011682 <_read_r+0x1e>
 801167c:	6823      	ldr	r3, [r4, #0]
 801167e:	b103      	cbz	r3, 8011682 <_read_r+0x1e>
 8011680:	602b      	str	r3, [r5, #0]
 8011682:	bd38      	pop	{r3, r4, r5, pc}
 8011684:	20006968 	.word	0x20006968

08011688 <_malloc_usable_size_r>:
 8011688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801168c:	1f18      	subs	r0, r3, #4
 801168e:	2b00      	cmp	r3, #0
 8011690:	bfbc      	itt	lt
 8011692:	580b      	ldrlt	r3, [r1, r0]
 8011694:	18c0      	addlt	r0, r0, r3
 8011696:	4770      	bx	lr

08011698 <_init>:
 8011698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801169a:	bf00      	nop
 801169c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801169e:	bc08      	pop	{r3}
 80116a0:	469e      	mov	lr, r3
 80116a2:	4770      	bx	lr

080116a4 <_fini>:
 80116a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116a6:	bf00      	nop
 80116a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116aa:	bc08      	pop	{r3}
 80116ac:	469e      	mov	lr, r3
 80116ae:	4770      	bx	lr
